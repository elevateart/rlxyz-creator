{
  "address": "0x42884066baaD2466E8b9e06e0949cC02F70E0832",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_collectionSize",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxPublicBatchPerAddress",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amountForPromotion",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_mintPrice",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AllOwnershipsHaveBeenSet",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ApprovalCallerNotOwnerNorApproved",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ApprovalQueryForNonexistentToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ApprovalToCurrentOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ApproveToCaller",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BalanceQueryForZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "HashQueryForNonexistentToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MintToZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MintZeroQuantity",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoTokensMintedYet",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OwnerQueryForNonexistentToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "QuantityMustBeNonZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferCallerNotOwnerNorApproved",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferFromIncorrectOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferToNonERC721ReceiverImplementer",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferToZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "URIQueryForNonexistentToken",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "currentTotalSupply",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "invocations",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32[]",
          "name": "identifiers",
          "type": "bytes32[]"
        }
      ],
      "name": "Created",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "amountForPromotion",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimMerkleRoot",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "invocations",
          "type": "uint256"
        },
        {
          "internalType": "bytes32[]",
          "name": "proof",
          "type": "bytes32[]"
        }
      ],
      "name": "claimMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxPublicBatchPerAddress",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "mintOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintRandomizerContract",
      "outputs": [
        {
          "internalType": "contract IRandomizer",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextOwnerToExplicitlySet",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "presaleMerkleRoot",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "invocations",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxInvocation",
          "type": "uint256"
        },
        {
          "internalType": "bytes32[]",
          "name": "proof",
          "type": "bytes32[]"
        }
      ],
      "name": "presaleMint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "presaleTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "invocations",
          "type": "uint256"
        }
      ],
      "name": "promotionMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "invocations",
          "type": "uint256"
        }
      ],
      "name": "publicMint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "publicTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "newBaseURI",
          "type": "string"
        }
      ],
      "name": "setBaseURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_claimMerkleRoot",
          "type": "bytes32"
        }
      ],
      "name": "setClaimMerkleRoot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_mintRandomizerContract",
          "type": "address"
        }
      ],
      "name": "setMintRandomizerContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_claimTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_presaleTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_publicTime",
          "type": "uint256"
        }
      ],
      "name": "setMintTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        }
      ],
      "name": "setOwnersExplicit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_presaleMerkleRoot",
          "type": "bytes32"
        }
      ],
      "name": "setPresaleMerkleRoot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawMoney",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x61d0a5646c4834b1b4bf6a13911aff6d0e92be47b048cf39d0e65f2fbae798ff",
  "receipt": {
    "to": null,
    "from": "0xe78AB0C30856b4F82d73Fc3411a9860A8ff5c57B",
    "contractAddress": "0x42884066baaD2466E8b9e06e0949cC02F70E0832",
    "transactionIndex": 23,
    "gasUsed": "4852294",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000800000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000020008020000000000000000000800000000000000000000000010000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000010000000000001000000000000000000",
    "blockHash": "0x6cffe76db781524fc8d94c2046ddec3d773e1ba39d323dba8755fe8f04de0eb6",
    "transactionHash": "0x61d0a5646c4834b1b4bf6a13911aff6d0e92be47b048cf39d0e65f2fbae798ff",
    "logs": [
      {
        "transactionIndex": 23,
        "blockNumber": 10542626,
        "transactionHash": "0x61d0a5646c4834b1b4bf6a13911aff6d0e92be47b048cf39d0e65f2fbae798ff",
        "address": "0x42884066baaD2466E8b9e06e0949cC02F70E0832",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000e78ab0c30856b4f82d73fc3411a9860a8ff5c57b"
        ],
        "data": "0x",
        "logIndex": 13,
        "blockHash": "0x6cffe76db781524fc8d94c2046ddec3d773e1ba39d323dba8755fe8f04de0eb6"
      }
    ],
    "blockNumber": 10542626,
    "cumulativeGasUsed": "6175346",
    "status": 1,
    "byzantium": true
  },
  "args": [
    1111,
    2,
    40,
    "333000000000000000"
  ],
  "numDeployments": 21,
  "solcInputHash": "40a64b0be9585bf1c74045a177e53037",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_collectionSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxPublicBatchPerAddress\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountForPromotion\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_mintPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AllOwnershipsHaveBeenSet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalToCurrentOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApproveToCaller\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BalanceQueryForZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"HashQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintZeroQuantity\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoTokensMintedYet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnerQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"QuantityMustBeNonZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFromIncorrectOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToNonERC721ReceiverImplementer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"URIQueryForNonexistentToken\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currentTotalSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"invocations\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32[]\",\"name\":\"identifiers\",\"type\":\"bytes32[]\"}],\"name\":\"Created\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountForPromotion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimMerkleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"invocations\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"claimMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPublicBatchPerAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"mintOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintRandomizerContract\",\"outputs\":[{\"internalType\":\"contract IRandomizer\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextOwnerToExplicitlySet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presaleMerkleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"invocations\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxInvocation\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"presaleMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presaleTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"invocations\",\"type\":\"uint256\"}],\"name\":\"promotionMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"invocations\",\"type\":\"uint256\"}],\"name\":\"publicMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newBaseURI\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_claimMerkleRoot\",\"type\":\"bytes32\"}],\"name\":\"setClaimMerkleRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mintRandomizerContract\",\"type\":\"address\"}],\"name\":\"setMintRandomizerContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_claimTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_presaleTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_publicTime\",\"type\":\"uint256\"}],\"name\":\"setMintTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"setOwnersExplicit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_presaleMerkleRoot\",\"type\":\"bytes32\"}],\"name\":\"setPresaleMerkleRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawMoney\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"claimMint(uint256,bytes32[])\":{\"details\":\"user must mint max invocations\",\"params\":{\"invocations\":\"number of tokens to mint\",\"proof\":\"merkle proof to prove address and token mint count are in tree\"}},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"presaleMint(uint256,uint256,bytes32[])\":{\"params\":{\"invocations\":\"number of tokens to mint\",\"maxInvocation\":\"max number of invocations of the user\",\"proof\":\"merkle proof to prove address and token mint count are in tree\"}},\"promotionMint(uint256)\":{\"params\":{\"invocations\":\"the number of invocations to batch mint\"}},\"publicMint(uint256)\":{\"details\":\"user can only mint less than maxPublicBatchPerAddress of tokens\",\"params\":{\"invocations\":\"number of tokens to mint\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"setClaimMerkleRoot(bytes32)\":{\"params\":{\"_claimMerkleRoot\":\"root of the merklelized claimlist\"}},\"setMintTime(uint256,uint256,uint256)\":{\"details\":\"this function can serve as an \\\"active\\\" and \\\"non-active\\\" sale statusset the values to uint256(-1) for \\\"non-active\\\" sale statusalso, pass contract ownership to address(0) to close sale forever\",\"params\":{\"_presaleTime\":\"time the presale starts\",\"_publicTime\":\"time the public sale starts\"}},\"setOwnersExplicit(uint256)\":{\"details\":\"eliminate loops in future calls of ownerOf()\"},\"setPresaleMerkleRoot(bytes32)\":{\"params\":{\"_presaleMerkleRoot\":\"root of the merklelized whitelist\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"totalSupply()\":{\"details\":\"Burned tokens are calculated here, use _totalMinted() if you want to count just minted tokens.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"events\":{\"Created(address,uint256,uint256,bytes32[])\":{\"notice\":\"============ Events ============\"}},\"kind\":\"user\",\"methods\":{\"VERSION()\":{\"notice\":\"Semver Version\"},\"amountForPromotion()\":{\"notice\":\"promotional nfts count\"},\"baseURI()\":{\"notice\":\"core metadata baseURI used for tokens metadata\"},\"claimMerkleRoot()\":{\"notice\":\"ERC721-claim inclusion root\"},\"claimMint(uint256,bytes32[])\":{\"notice\":\"Allows claim of tokens if address is part of merkle tree\"},\"claimTime()\":{\"notice\":\"time the public starts\"},\"maxPublicBatchPerAddress()\":{\"notice\":\"max mintable tokens for each address in public\"},\"mintOf(address)\":{\"notice\":\"returns the number of mints of an address\"},\"mintPrice()\":{\"notice\":\"mint price of each nft; same for pre/public sale.\"},\"mintRandomizerContract()\":{\"notice\":\"the randomizer contract\"},\"presaleMerkleRoot()\":{\"notice\":\"ERC721-presale inclusion root\"},\"presaleMint(uint256,uint256,bytes32[])\":{\"notice\":\"Allows presale minting of tokens if address is part of merkle tree\"},\"presaleTime()\":{\"notice\":\"time the presale starts\"},\"promotionMint(uint256)\":{\"notice\":\"used by owner to mint promotional nfts\"},\"publicMint(uint256)\":{\"notice\":\"Allows public minting of tokens\"},\"publicTime()\":{\"notice\":\"time the public starts\"},\"setBaseURI(string)\":{\"notice\":\"set the new baseURI to change the tokens metadata\"},\"setClaimMerkleRoot(bytes32)\":{\"notice\":\"force override the merkle root used in presale mint\"},\"setMintRandomizerContract(address)\":{\"notice\":\"used the set the mint randomizer for on-chain generative projects\"},\"setMintTime(uint256,uint256,uint256)\":{\"notice\":\"Set the time for the mint\"},\"setOwnersExplicit(uint256)\":{\"notice\":\"sets the owners quantity explicity\"},\"setPresaleMerkleRoot(bytes32)\":{\"notice\":\"force override the merkle root used in presale mint\"},\"withdrawMoney()\":{\"notice\":\"withdraws the ether in the contract to owner\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/test/helpers/RhapsodyCreatorGenerativeRinkeby.sol\":\"RhapsodyCreatorGenerativeRinkeby\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x11b84bb56dc112a6590bfe3e0efa118aa1b5891132342200d04c4ef544cb93de\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd5fa74b4fb323776fa4a8158800fec9d5ac0fec0d6dd046dd93798632ada265f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Trees proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merklee tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            bytes32 proofElement = proof[i];\\n            if (computedHash <= proofElement) {\\n                // Hash(current computed hash + current element of the proof)\\n                computedHash = _efficientHash(computedHash, proofElement);\\n            } else {\\n                // Hash(current element of the proof + current computed hash)\\n                computedHash = _efficientHash(proofElement, computedHash);\\n            }\\n        }\\n        return computedHash;\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xea64fbaccbf9d8c235cf6838240ddcebb97f9fc383660289e9dff32e4fb85f7a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa2f576be637946f767aa56601c26d717f48a0aff44f82e46f13807eea1009a21\",\"license\":\"MIT\"},\"contracts/RhapsodyCreatorGenerative.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"erc721a/contracts/ERC721A.sol\\\";\\nimport \\\"erc721a/contracts/extensions/ERC721AOwnersExplicit.sol\\\";\\nimport \\\"./utils/interfaces/IRandomizer.sol\\\";\\n\\nerror HashQueryForNonexistentToken();\\n\\ncontract RhapsodyCreatorGenerative is ERC721A, ERC721AOwnersExplicit, Ownable, ReentrancyGuard {\\n    /// ============ Libraries ============\\n\\n    /// @notice safe math for arithmetic operations\\n    using SafeMath for uint256;\\n\\n    /// ============ Events ============\\n\\n    event Created(address indexed to, uint256 currentTotalSupply, uint256 invocations, bytes32[] identifiers);\\n\\n    /// ============ Immutable storage ============\\n\\n    /// @notice promotional nfts count\\n    uint256 public immutable amountForPromotion;\\n\\n    /// @notice max mintable tokens for each address in public\\n    uint256 public immutable maxPublicBatchPerAddress;\\n\\n    /// @notice mint price of each nft; same for pre/public sale.\\n    uint256 public immutable mintPrice;\\n\\n    /// @notice total number of tokens in the collection\\n    uint256 internal immutable collectionSize;\\n\\n    // ============ Mutable storage ============\\n\\n    /// @notice ERC721-presale inclusion root\\n    bytes32 public presaleMerkleRoot;\\n\\n    /// @notice ERC721-claim inclusion root\\n    bytes32 public claimMerkleRoot;\\n\\n    /// @notice time the public starts\\n    uint256 public claimTime;\\n\\n    /// @notice time the presale starts\\n    uint256 public presaleTime;\\n\\n    /// @notice time the public starts\\n    uint256 public publicTime;\\n\\n    /// @notice the hash of each token\\n    mapping(uint256 => bytes32) private _tokenHash;\\n\\n    // ============ Private storage ============\\n\\n    string private _baseTokenURI;\\n\\n    // ============= Dependencies ==============\\n\\n    /// @notice the randomizer contract\\n    IRandomizer public mintRandomizerContract;\\n\\n    /// ============= Constructor =============\\n\\n    /// @notice Creates a new Creator contract\\n    /// @param _collectionSize the total size of the collection\\n    /// @param _maxPublicBatchPerAddress max mintable tokens in public sale\\n    /// @param _amountForPromotion promotional nfts count\\n    /// @param _mintPrice mint price of each nft\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        uint256 _collectionSize,\\n        uint256 _maxPublicBatchPerAddress,\\n        uint256 _amountForPromotion,\\n        uint256 _mintPrice\\n    ) ERC721A(_name, _symbol) {\\n        require(_collectionSize > 0, \\\"RhapsodyCreatorGenerative/invalid-collection-size\\\");\\n        require(_amountForPromotion <= _collectionSize, \\\"RhapsodyCreatorGenerative/invalid-promotion-amount\\\");\\n        require(_mintPrice > 0, \\\"RhapsodyCreatorGenerative/invalid-mint-price\\\");\\n\\n        collectionSize = _collectionSize;\\n        maxPublicBatchPerAddress = _maxPublicBatchPerAddress;\\n        amountForPromotion = _amountForPromotion;\\n        mintPrice = _mintPrice;\\n    }\\n\\n    /// =========== Sale ===========\\n\\n    /// @notice Allows claim of tokens if address is part of merkle tree\\n    /// @param invocations number of tokens to mint\\n    /// @param proof merkle proof to prove address and token mint count are in tree\\n    /// @dev user must mint max invocations\\n    function claimMint(uint256 invocations, bytes32[] calldata proof)\\n        external\\n        nonReentrant\\n        isMintLive(claimTime)\\n        isMintValid(invocations, invocations)\\n        isMintProofValid(invocations, msg.sender, proof, claimMerkleRoot)\\n    {\\n        _mintMany(msg.sender, invocations);\\n    }\\n\\n    /// @notice Allows presale minting of tokens if address is part of merkle tree\\n    /// @param invocations number of tokens to mint\\n    /// @param maxInvocation max number of invocations of the user\\n    /// @param proof merkle proof to prove address and token mint count are in tree\\n    function presaleMint(\\n        uint256 invocations,\\n        uint256 maxInvocation,\\n        bytes32[] calldata proof\\n    )\\n        external\\n        payable\\n        nonReentrant\\n        isMintLive(presaleTime)\\n        isMintValid(invocations, maxInvocation)\\n        isMintPricingValid(invocations)\\n        isMintProofValid(maxInvocation, msg.sender, proof, presaleMerkleRoot)\\n    {\\n        _mintMany(msg.sender, invocations);\\n    }\\n\\n    /// @notice Allows public minting of tokens\\n    /// @param invocations number of tokens to mint\\n    /// @dev user can only mint less than maxPublicBatchPerAddress of tokens\\n    function publicMint(uint256 invocations)\\n        external\\n        payable\\n        nonReentrant\\n        isMintLive(publicTime)\\n        isMintValid(invocations, maxPublicBatchPerAddress)\\n        isMintPricingValid(invocations)\\n    {\\n        _mintMany(msg.sender, invocations);\\n    }\\n\\n    /// @notice mint tokens in batches\\n    /// @param to address to mint to\\n    /// @param invocations number of tokens to mint\\n    function _mintMany(address to, uint256 invocations) internal {\\n        _safeMint(to, invocations);\\n\\n        uint256 currentTotalSupply = totalSupply();\\n        uint256 currentInvocations = currentTotalSupply.sub(invocations);\\n        bytes32[] memory uniqueIdentifiers = new bytes32[](invocations);\\n        for (uint256 i = 0; i < invocations; i++) {\\n            uint256 currentIndex = currentInvocations.add(i);\\n            bytes32 identifier = _generateUniqueIdentifier(currentIndex);\\n            uniqueIdentifiers[i] = identifier;\\n            _tokenHash[currentIndex] = identifier;\\n        }\\n\\n        emit Created(to, currentTotalSupply, invocations, uniqueIdentifiers);\\n    }\\n\\n    /// @notice Set the time for the mint\\n    /// @param _presaleTime time the presale starts\\n    /// @param _publicTime time the public sale starts\\n    /// @dev this function can serve as an \\\"active\\\" and \\\"non-active\\\" sale status\\n    /// @dev set the values to uint256(-1) for \\\"non-active\\\" sale status\\n    /// @dev also, pass contract ownership to address(0) to close sale forever\\n    function setMintTime(\\n        uint256 _claimTime,\\n        uint256 _presaleTime,\\n        uint256 _publicTime\\n    ) public onlyOwner {\\n        require(_presaleTime > _claimTime, \\\"RhapsodyCreatorGenerative/invalid-presale-time\\\");\\n        require(_publicTime > _presaleTime, \\\"RhapsodyCreatorGenerative/invalid-public-time\\\");\\n        claimTime = _claimTime;\\n        presaleTime = _presaleTime;\\n        publicTime = _publicTime;\\n    }\\n\\n    /// @notice ensures that minters need valid invocations + value to mint\\n    modifier isMintValid(uint256 invocations, uint256 maxInvocation) {\\n        require(tx.origin == msg.sender, \\\"RhapsodyCreatorGenerative/invalid-mint-caller\\\");\\n        require(totalSupply().add(invocations) <= collectionSize, \\\"RhapsodyCreatorGenerative/invalid-total-supply\\\");\\n        require(\\n            _mintOf(msg.sender).add(invocations) <= maxInvocation,\\n            \\\"RhapsodyCreatorGenerative/invalid-invocation-upper-boundary\\\"\\n        );\\n        require(invocations > 0, \\\"RhapsodyCreatorGenerative/invalid-invocation-lower-boundary\\\");\\n        _;\\n    }\\n\\n    modifier isMintPricingValid(uint256 invocations) {\\n        require(msg.value == mintPrice.mul(invocations), \\\"RhapsodyCreatorGenerative/invalid-mint-value\\\");\\n        require(msg.value > 0, \\\"RhapsodyCreatorGenerative/invalid-invocation-lower-boundary\\\");\\n        _;\\n    }\\n\\n    /// @notice used to check the time of mint of presale and public\\n    /// @dev only publicTime/presaleTime variable is used here; see publicMint/presaleMint function\\n    /// @dev time > 0 is optimization when the sale is not live; r.e  mint \\\"not-active\\\" mode\\n    modifier isMintLive(uint256 time) {\\n        require(time > 0 && block.timestamp > time, \\\"RhapsodyCreatorGenerative/invalid-mint-time\\\");\\n        _;\\n    }\\n\\n    modifier isMintProofValid(\\n        uint256 invocations,\\n        address prover,\\n        bytes32[] calldata proof,\\n        bytes32 merkleRoot\\n    ) {\\n        require(\\n            MerkleProof.verify(proof, merkleRoot, keccak256(abi.encodePacked(prover, invocations))),\\n            \\\"RhapsodyCreatorGenerative/invalid-address-proof\\\"\\n        );\\n        _;\\n    }\\n\\n    /// @notice used the set the mint randomizer for on-chain generative projects\\n    function setMintRandomizerContract(address _mintRandomizerContract) external onlyOwner {\\n        mintRandomizerContract = IRandomizer(_mintRandomizerContract);\\n    }\\n\\n    /// =========== Merkle Roots ===========\\n\\n    /// @notice force override the merkle root used in presale mint\\n    /// @param _presaleMerkleRoot root of the merklelized whitelist\\n    function setPresaleMerkleRoot(bytes32 _presaleMerkleRoot) public onlyOwner {\\n        presaleMerkleRoot = _presaleMerkleRoot;\\n    }\\n\\n    /// @notice force override the merkle root used in presale mint\\n    /// @param _claimMerkleRoot root of the merklelized claimlist\\n    function setClaimMerkleRoot(bytes32 _claimMerkleRoot) public onlyOwner {\\n        claimMerkleRoot = _claimMerkleRoot;\\n    }\\n\\n    /// =========== Metadata ===========\\n\\n    /// @notice set the new baseURI to change the tokens metadata\\n    function setBaseURI(string calldata newBaseURI) external onlyOwner {\\n        _baseTokenURI = newBaseURI;\\n    }\\n\\n    /// @notice core metadata baseURI used for tokens metadata\\n    function _baseURI() internal view virtual override returns (string memory) {\\n        return _baseTokenURI;\\n    }\\n\\n    /// @notice core metadata baseURI used for tokens metadata\\n    function baseURI() public view returns (string memory) {\\n        return _baseURI();\\n    }\\n\\n    /// =========== Dev ===========\\n\\n    /// @notice used by owner to mint promotional nfts\\n    /// @param invocations the number of invocations to batch mint\\n    function promotionMint(uint256 invocations) external onlyOwner {\\n        require(\\n            totalSupply().add(invocations) <= amountForPromotion,\\n            \\\"RhapsodyCreatorGenerative/invalid-promotion-supply\\\"\\n        );\\n        uint256 maxBatchSize = maxPublicBatchPerAddress;\\n        require(invocations.mod(maxBatchSize) == 0, \\\"RhapsodyCreatorGenerative/invalid-batch-multiple\\\");\\n        uint256 blocks = invocations.div(maxBatchSize);\\n        for (uint256 i = 0; i < blocks; i++) {\\n            _mintMany(msg.sender, maxBatchSize);\\n        }\\n    }\\n\\n    /// @notice withdraws the ether in the contract to owner\\n    function withdrawMoney() external onlyOwner nonReentrant {\\n        (bool success, ) = msg.sender.call{ value: address(this).balance }(\\\"\\\");\\n        require(success, \\\"RhapsodyCreatorGenerative/invalid-withdraw-money\\\");\\n    }\\n\\n    /// @notice returns the current block timestamp\\n    /// @dev this function is overriden in testing for time-dependent testing\\n    function _currentTime() internal view virtual returns (uint256) {\\n        return block.timestamp;\\n    }\\n\\n    /// @notice sets the owners quantity explicity\\n    /// @dev eliminate loops in future calls of ownerOf()\\n    function setOwnersExplicit(uint256 quantity) external onlyOwner nonReentrant {\\n        _setOwnersExplicit(quantity);\\n    }\\n\\n    /// =========== Helpers ===========\\n\\n    /// @notice internally returns the number of mints of an address\\n    function _mintOf(address _owner) internal view returns (uint256) {\\n        return _numberMinted(_owner);\\n    }\\n\\n    /// @notice returns the number of mints of an address\\n    function mintOf(address _owner) public view returns (uint256) {\\n        return _mintOf(_owner);\\n    }\\n\\n    // @notice returns the hash of a token\\n    function tokenHash(uint256 _tokenId) public view returns (bytes32) {\\n        if (!_exists(_tokenId)) revert HashQueryForNonexistentToken();\\n        return _tokenHash[_tokenId];\\n    }\\n\\n    function _generateUniqueIdentifier(uint256 seed) internal view virtual returns (bytes32) {\\n        return keccak256(abi.encodePacked(seed, tx.origin, block.number - 1, mintRandomizerContract.getRandomValue()));\\n    }\\n}\\n\",\"keccak256\":\"0xe8319b01d839c61a171e41a1cc3a404cfa64c640ba6ebcba0445618acc7dfe72\",\"license\":\"MIT\"},\"contracts/test/helpers/RhapsodyCreatorGenerativeRinkeby.sol\":{\"content\":\"// SPDX-License-Identifier: CC-BY-NC-SA-4.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../RhapsodyCreatorGenerative.sol\\\";\\n\\n// @notice this RhapsodyCreatorRinkeby is used in testnets such as rinkeby\\ncontract RhapsodyCreatorGenerativeRinkeby is RhapsodyCreatorGenerative {\\n    /// @notice Semver Version\\n    string public constant VERSION = \\\"0.2.1\\\";\\n\\n    constructor(\\n        uint256 _collectionSize,\\n        uint256 _maxPublicBatchPerAddress,\\n        uint256 _amountForPromotion,\\n        uint256 _mintPrice\\n    )\\n        RhapsodyCreatorGenerative(\\n            \\\"Rhapsody Creator Generative Rinkeby\\\",\\n            \\\"RCT\\\",\\n            _collectionSize,\\n            _maxPublicBatchPerAddress,\\n            _amountForPromotion,\\n            _mintPrice\\n        )\\n    {}\\n\\n    function _generateUniqueIdentifier(uint256 seed) internal view override returns (bytes32) {\\n        return keccak256(abi.encodePacked(seed));\\n    }\\n}\\n\",\"keccak256\":\"0x9ef45cb05c50c860b9eef5133df509879bc548616ddc2dd9bdbf254c537d4923\",\"license\":\"CC-BY-NC-SA-4.0\"},\"contracts/utils/interfaces/IRandomizer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IRandomizer {\\n    function getRandomValue() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xf291325336a4f369a5ac57c61a5051bd676e928ee4b1ea167c17ec6e672d59ad\",\"license\":\"MIT\"},\"erc721a/contracts/ERC721A.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.4;\\n\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\nimport '@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol';\\nimport '@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol';\\nimport '@openzeppelin/contracts/utils/Address.sol';\\nimport '@openzeppelin/contracts/utils/Context.sol';\\nimport '@openzeppelin/contracts/utils/Strings.sol';\\nimport '@openzeppelin/contracts/utils/introspection/ERC165.sol';\\n\\nerror ApprovalCallerNotOwnerNorApproved();\\nerror ApprovalQueryForNonexistentToken();\\nerror ApproveToCaller();\\nerror ApprovalToCurrentOwner();\\nerror BalanceQueryForZeroAddress();\\nerror MintToZeroAddress();\\nerror MintZeroQuantity();\\nerror OwnerQueryForNonexistentToken();\\nerror TransferCallerNotOwnerNorApproved();\\nerror TransferFromIncorrectOwner();\\nerror TransferToNonERC721ReceiverImplementer();\\nerror TransferToZeroAddress();\\nerror URIQueryForNonexistentToken();\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension. Built to optimize for lower gas during batch mints.\\n *\\n * Assumes serials are sequentially minted starting at _startTokenId() (defaults to 0, e.g. 0, 1, 2, 3..).\\n *\\n * Assumes that an owner cannot have more than 2**64 - 1 (max value of uint64) of supply.\\n *\\n * Assumes that the maximum token id cannot exceed 2**256 - 1 (max value of uint256).\\n */\\ncontract ERC721A is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Compiler will pack this into a single 256bit word.\\n    struct TokenOwnership {\\n        // The address of the owner.\\n        address addr;\\n        // Keeps track of the start time of ownership with minimal overhead for tokenomics.\\n        uint64 startTimestamp;\\n        // Whether the token has been burned.\\n        bool burned;\\n    }\\n\\n    // Compiler will pack this into a single 256bit word.\\n    struct AddressData {\\n        // Realistically, 2**64-1 is more than enough.\\n        uint64 balance;\\n        // Keeps track of mint count with minimal overhead for tokenomics.\\n        uint64 numberMinted;\\n        // Keeps track of burn count with minimal overhead for tokenomics.\\n        uint64 numberBurned;\\n        // For miscellaneous variable(s) pertaining to the address\\n        // (e.g. number of whitelist mint slots used).\\n        // If there are multiple variables, please pack them into a uint64.\\n        uint64 aux;\\n    }\\n\\n    // The tokenId of the next token to be minted.\\n    uint256 internal _currentIndex;\\n\\n    // The number of tokens burned.\\n    uint256 internal _burnCounter;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to ownership details\\n    // An empty struct value does not necessarily mean the token is unowned. See _ownershipOf implementation for details.\\n    mapping(uint256 => TokenOwnership) internal _ownerships;\\n\\n    // Mapping owner address to address data\\n    mapping(address => AddressData) private _addressData;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _currentIndex = _startTokenId();\\n    }\\n\\n    /**\\n     * To change the starting tokenId, please override this function.\\n     */\\n    function _startTokenId() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev Burned tokens are calculated here, use _totalMinted() if you want to count just minted tokens.\\n     */\\n    function totalSupply() public view returns (uint256) {\\n        // Counter underflow is impossible as _burnCounter cannot be incremented\\n        // more than _currentIndex - _startTokenId() times\\n        unchecked {\\n            return _currentIndex - _burnCounter - _startTokenId();\\n        }\\n    }\\n\\n    /**\\n     * Returns the total amount of tokens minted in the contract.\\n     */\\n    function _totalMinted() internal view returns (uint256) {\\n        // Counter underflow is impossible as _currentIndex does not decrement,\\n        // and it is initialized to _startTokenId()\\n        unchecked {\\n            return _currentIndex - _startTokenId();\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view override returns (uint256) {\\n        if (owner == address(0)) revert BalanceQueryForZeroAddress();\\n        return uint256(_addressData[owner].balance);\\n    }\\n\\n    /**\\n     * Returns the number of tokens minted by `owner`.\\n     */\\n    function _numberMinted(address owner) internal view returns (uint256) {\\n        return uint256(_addressData[owner].numberMinted);\\n    }\\n\\n    /**\\n     * Returns the number of tokens burned by or on behalf of `owner`.\\n     */\\n    function _numberBurned(address owner) internal view returns (uint256) {\\n        return uint256(_addressData[owner].numberBurned);\\n    }\\n\\n    /**\\n     * Returns the auxillary data for `owner`. (e.g. number of whitelist mint slots used).\\n     */\\n    function _getAux(address owner) internal view returns (uint64) {\\n        return _addressData[owner].aux;\\n    }\\n\\n    /**\\n     * Sets the auxillary data for `owner`. (e.g. number of whitelist mint slots used).\\n     * If there are multiple variables, please pack them into a uint64.\\n     */\\n    function _setAux(address owner, uint64 aux) internal {\\n        _addressData[owner].aux = aux;\\n    }\\n\\n    /**\\n     * Gas spent here starts off proportional to the maximum mint batch size.\\n     * It gradually moves to O(1) as tokens get transferred around in the collection over time.\\n     */\\n    function _ownershipOf(uint256 tokenId) internal view returns (TokenOwnership memory) {\\n        uint256 curr = tokenId;\\n\\n        unchecked {\\n            if (_startTokenId() <= curr && curr < _currentIndex) {\\n                TokenOwnership memory ownership = _ownerships[curr];\\n                if (!ownership.burned) {\\n                    if (ownership.addr != address(0)) {\\n                        return ownership;\\n                    }\\n                    // Invariant:\\n                    // There will always be an ownership that has an address and is not burned\\n                    // before an ownership that does not have an address and is not burned.\\n                    // Hence, curr will not underflow.\\n                    while (true) {\\n                        curr--;\\n                        ownership = _ownerships[curr];\\n                        if (ownership.addr != address(0)) {\\n                            return ownership;\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n        revert OwnerQueryForNonexistentToken();\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view override returns (address) {\\n        return _ownershipOf(tokenId).addr;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        if (!_exists(tokenId)) revert URIQueryForNonexistentToken();\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length != 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : '';\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return '';\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public override {\\n        address owner = ERC721A.ownerOf(tokenId);\\n        if (to == owner) revert ApprovalToCurrentOwner();\\n\\n        if (_msgSender() != owner && !isApprovedForAll(owner, _msgSender())) {\\n            revert ApprovalCallerNotOwnerNorApproved();\\n        }\\n\\n        _approve(to, tokenId, owner);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view override returns (address) {\\n        if (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken();\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        if (operator == _msgSender()) revert ApproveToCaller();\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, '');\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        _transfer(from, to, tokenId);\\n        if (to.isContract() && !_checkContractOnERC721Received(from, to, tokenId, _data)) {\\n            revert TransferToNonERC721ReceiverImplementer();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     */\\n    function _exists(uint256 tokenId) internal view returns (bool) {\\n        return _startTokenId() <= tokenId && tokenId < _currentIndex && !_ownerships[tokenId].burned;\\n    }\\n\\n    function _safeMint(address to, uint256 quantity) internal {\\n        _safeMint(to, quantity, '');\\n    }\\n\\n    /**\\n     * @dev Safely mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called for each safe transfer.\\n     * - `quantity` must be greater than 0.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 quantity,\\n        bytes memory _data\\n    ) internal {\\n        _mint(to, quantity, _data, true);\\n    }\\n\\n    /**\\n     * @dev Mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `quantity` must be greater than 0.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 quantity,\\n        bytes memory _data,\\n        bool safe\\n    ) internal {\\n        uint256 startTokenId = _currentIndex;\\n        if (to == address(0)) revert MintToZeroAddress();\\n        if (quantity == 0) revert MintZeroQuantity();\\n\\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\\n\\n        // Overflows are incredibly unrealistic.\\n        // balance or numberMinted overflow if current value of either + quantity > 1.8e19 (2**64) - 1\\n        // updatedIndex overflows if _currentIndex + quantity > 1.2e77 (2**256) - 1\\n        unchecked {\\n            _addressData[to].balance += uint64(quantity);\\n            _addressData[to].numberMinted += uint64(quantity);\\n\\n            _ownerships[startTokenId].addr = to;\\n            _ownerships[startTokenId].startTimestamp = uint64(block.timestamp);\\n\\n            uint256 updatedIndex = startTokenId;\\n            uint256 end = updatedIndex + quantity;\\n\\n            if (safe && to.isContract()) {\\n                do {\\n                    emit Transfer(address(0), to, updatedIndex);\\n                    if (!_checkContractOnERC721Received(address(0), to, updatedIndex++, _data)) {\\n                        revert TransferToNonERC721ReceiverImplementer();\\n                    }\\n                } while (updatedIndex != end);\\n                // Reentrancy protection\\n                if (_currentIndex != startTokenId) revert();\\n            } else {\\n                do {\\n                    emit Transfer(address(0), to, updatedIndex++);\\n                } while (updatedIndex != end);\\n            }\\n            _currentIndex = updatedIndex;\\n        }\\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) private {\\n        TokenOwnership memory prevOwnership = _ownershipOf(tokenId);\\n\\n        if (prevOwnership.addr != from) revert TransferFromIncorrectOwner();\\n\\n        bool isApprovedOrOwner = (_msgSender() == from ||\\n            isApprovedForAll(from, _msgSender()) ||\\n            getApproved(tokenId) == _msgSender());\\n\\n        if (!isApprovedOrOwner) revert TransferCallerNotOwnerNorApproved();\\n        if (to == address(0)) revert TransferToZeroAddress();\\n\\n        _beforeTokenTransfers(from, to, tokenId, 1);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId, from);\\n\\n        // Underflow of the sender's balance is impossible because we check for\\n        // ownership above and the recipient's balance can't realistically overflow.\\n        // Counter overflow is incredibly unrealistic as tokenId would have to be 2**256.\\n        unchecked {\\n            _addressData[from].balance -= 1;\\n            _addressData[to].balance += 1;\\n\\n            TokenOwnership storage currSlot = _ownerships[tokenId];\\n            currSlot.addr = to;\\n            currSlot.startTimestamp = uint64(block.timestamp);\\n\\n            // If the ownership slot of tokenId+1 is not explicitly set, that means the transfer initiator owns it.\\n            // Set the slot of tokenId+1 explicitly in storage to maintain correctness for ownerOf(tokenId+1) calls.\\n            uint256 nextTokenId = tokenId + 1;\\n            TokenOwnership storage nextSlot = _ownerships[nextTokenId];\\n            if (nextSlot.addr == address(0)) {\\n                // This will suffice for checking _exists(nextTokenId),\\n                // as a burned slot cannot contain the zero address.\\n                if (nextTokenId != _currentIndex) {\\n                    nextSlot.addr = from;\\n                    nextSlot.startTimestamp = prevOwnership.startTimestamp;\\n                }\\n            }\\n        }\\n\\n        emit Transfer(from, to, tokenId);\\n        _afterTokenTransfers(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev This is equivalent to _burn(tokenId, false)\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        _burn(tokenId, false);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId, bool approvalCheck) internal virtual {\\n        TokenOwnership memory prevOwnership = _ownershipOf(tokenId);\\n\\n        address from = prevOwnership.addr;\\n\\n        if (approvalCheck) {\\n            bool isApprovedOrOwner = (_msgSender() == from ||\\n                isApprovedForAll(from, _msgSender()) ||\\n                getApproved(tokenId) == _msgSender());\\n\\n            if (!isApprovedOrOwner) revert TransferCallerNotOwnerNorApproved();\\n        }\\n\\n        _beforeTokenTransfers(from, address(0), tokenId, 1);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId, from);\\n\\n        // Underflow of the sender's balance is impossible because we check for\\n        // ownership above and the recipient's balance can't realistically overflow.\\n        // Counter overflow is incredibly unrealistic as tokenId would have to be 2**256.\\n        unchecked {\\n            AddressData storage addressData = _addressData[from];\\n            addressData.balance -= 1;\\n            addressData.numberBurned += 1;\\n\\n            // Keep track of who burned the token, and the timestamp of burning.\\n            TokenOwnership storage currSlot = _ownerships[tokenId];\\n            currSlot.addr = from;\\n            currSlot.startTimestamp = uint64(block.timestamp);\\n            currSlot.burned = true;\\n\\n            // If the ownership slot of tokenId+1 is not explicitly set, that means the burn initiator owns it.\\n            // Set the slot of tokenId+1 explicitly in storage to maintain correctness for ownerOf(tokenId+1) calls.\\n            uint256 nextTokenId = tokenId + 1;\\n            TokenOwnership storage nextSlot = _ownerships[nextTokenId];\\n            if (nextSlot.addr == address(0)) {\\n                // This will suffice for checking _exists(nextTokenId),\\n                // as a burned slot cannot contain the zero address.\\n                if (nextTokenId != _currentIndex) {\\n                    nextSlot.addr = from;\\n                    nextSlot.startTimestamp = prevOwnership.startTimestamp;\\n                }\\n            }\\n        }\\n\\n        emit Transfer(from, address(0), tokenId);\\n        _afterTokenTransfers(from, address(0), tokenId, 1);\\n\\n        // Overflow not possible, as _burnCounter cannot be exceed _currentIndex times.\\n        unchecked {\\n            _burnCounter++;\\n        }\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(\\n        address to,\\n        uint256 tokenId,\\n        address owner\\n    ) private {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(owner, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkContractOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n            return retval == IERC721Receiver(to).onERC721Received.selector;\\n        } catch (bytes memory reason) {\\n            if (reason.length == 0) {\\n                revert TransferToNonERC721ReceiverImplementer();\\n            } else {\\n                assembly {\\n                    revert(add(32, reason), mload(reason))\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before a set of serially-ordered token ids are about to be transferred. This includes minting.\\n     * And also called before burning one token.\\n     *\\n     * startTokenId - the first token id to be transferred\\n     * quantity - the amount to be transferred\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, `tokenId` will be burned by `from`.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _beforeTokenTransfers(\\n        address from,\\n        address to,\\n        uint256 startTokenId,\\n        uint256 quantity\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after a set of serially-ordered token ids have been transferred. This includes\\n     * minting.\\n     * And also called after one token has been burned.\\n     *\\n     * startTokenId - the first token id to be transferred\\n     * quantity - the amount to be transferred\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` has been\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` has been minted for `to`.\\n     * - When `to` is zero, `tokenId` has been burned by `from`.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _afterTokenTransfers(\\n        address from,\\n        address to,\\n        uint256 startTokenId,\\n        uint256 quantity\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x8ce51ff43bf1d6690341475ef3caf0929c43c63258fe56dc7fc301608ea9f30d\",\"license\":\"MIT\"},\"erc721a/contracts/extensions/ERC721AOwnersExplicit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.4;\\n\\nimport '../ERC721A.sol';\\n\\nerror AllOwnershipsHaveBeenSet();\\nerror QuantityMustBeNonZero();\\nerror NoTokensMintedYet();\\n\\nabstract contract ERC721AOwnersExplicit is ERC721A {\\n    uint256 public nextOwnerToExplicitlySet;\\n\\n    /**\\n     * @dev Explicitly set `owners` to eliminate loops in future calls of ownerOf().\\n     */\\n    function _setOwnersExplicit(uint256 quantity) internal {\\n        if (quantity == 0) revert QuantityMustBeNonZero();\\n        if (_currentIndex == _startTokenId()) revert NoTokensMintedYet();\\n        uint256 _nextOwnerToExplicitlySet = nextOwnerToExplicitlySet;\\n        if (_nextOwnerToExplicitlySet == 0) {\\n            _nextOwnerToExplicitlySet = _startTokenId();\\n        }\\n        if (_nextOwnerToExplicitlySet >= _currentIndex) revert AllOwnershipsHaveBeenSet();\\n\\n        // Index underflow is impossible.\\n        // Counter or index overflow is incredibly unrealistic.\\n        unchecked {\\n            uint256 endIndex = _nextOwnerToExplicitlySet + quantity - 1;\\n\\n            // Set the end index to be the last token index\\n            if (endIndex + 1 > _currentIndex) {\\n                endIndex = _currentIndex - 1;\\n            }\\n\\n            for (uint256 i = _nextOwnerToExplicitlySet; i <= endIndex; i++) {\\n                if (_ownerships[i].addr == address(0) && !_ownerships[i].burned) {\\n                    TokenOwnership memory ownership = _ownershipOf(i);\\n                    _ownerships[i].addr = ownership.addr;\\n                    _ownerships[i].startTimestamp = ownership.startTimestamp;\\n                }\\n            }\\n\\n            nextOwnerToExplicitlySet = endIndex + 1;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x87638daa1e525e20e73b587f5c921e94ef969d35843c225caa57194f64457bd7\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106102515760003560e01c8063715018a611610139578063ac446002116100b6578063c87b56dd1161007a578063c87b56dd14610870578063d7224ba0146108ad578063e985e9c5146108d8578063f2fde38b14610915578063fd1e29621461093e578063ffa1ad741461096757610251565b8063ac4460021461079f578063b1f536fa146107b6578063b88d4fde146107f3578063ba2f59c81461081c578063c6e62e0b1461084557610251565b8063993670f2116100fd578063993670f2146106b85780639c4dab52146106e3578063a22cb4651461070e578063a386439714610737578063a4babffd1461077457610251565b8063715018a6146105f757806372830dfd1461060e57806376972db2146106375780638da5cb5b1461066257806395d89b411461068d57610251565b806327b3bf11116101d257806355f804b31161019657806355f804b3146104d5578063617aa43c146104fe5780636352211e146105275780636817c76c146105645780636c0360eb1461058f57806370a08231146105ba57610251565b806327b3bf111461041357806328d7b2761461043e5780632d20fb60146104675780632db115441461049057806342842e0e146104ac57610251565b806318160ddd1161021957806318160ddd1461034d5780631b59169d146103785780631bdc608e1461039457806322212e2b146103bf57806323b872dd146103ea57610251565b806301ffc9a71461025657806306fdde0314610293578063081812fc146102be578063095ea7b3146102fb57806317ccc54b14610324575b600080fd5b34801561026257600080fd5b5061027d60048036038101906102789190613db5565b610992565b60405161028a9190613dfd565b60405180910390f35b34801561029f57600080fd5b506102a8610a74565b6040516102b59190613eb1565b60405180910390f35b3480156102ca57600080fd5b506102e560048036038101906102e09190613f09565b610b06565b6040516102f29190613f77565b60405180910390f35b34801561030757600080fd5b50610322600480360381019061031d9190613fbe565b610b82565b005b34801561033057600080fd5b5061034b60048036038101906103469190613ffe565b610c8d565b005b34801561035957600080fd5b50610362610d4d565b60405161036f919061403a565b60405180910390f35b610392600480360381019061038d91906140ba565b610d64565b005b3480156103a057600080fd5b506103a9611122565b6040516103b6919061403a565b60405180910390f35b3480156103cb57600080fd5b506103d4611128565b6040516103e19190614147565b60405180910390f35b3480156103f657600080fd5b50610411600480360381019061040c9190614162565b61112e565b005b34801561041f57600080fd5b5061042861113e565b604051610435919061403a565b60405180910390f35b34801561044a57600080fd5b50610465600480360381019061046091906141e1565b611144565b005b34801561047357600080fd5b5061048e60048036038101906104899190613f09565b6111ca565b005b6104aa60048036038101906104a59190613f09565b6112a8565b005b3480156104b857600080fd5b506104d360048036038101906104ce9190614162565b6115c4565b005b3480156104e157600080fd5b506104fc60048036038101906104f79190614264565b6115e4565b005b34801561050a57600080fd5b50610525600480360381019061052091906142b1565b611676565b005b34801561053357600080fd5b5061054e60048036038101906105499190613f09565b611790565b60405161055b9190613f77565b60405180910390f35b34801561057057600080fd5b506105796117a6565b604051610586919061403a565b60405180910390f35b34801561059b57600080fd5b506105a46117ca565b6040516105b19190613eb1565b60405180910390f35b3480156105c657600080fd5b506105e160048036038101906105dc9190613ffe565b6117d9565b6040516105ee919061403a565b60405180910390f35b34801561060357600080fd5b5061060c6118a9565b005b34801561061a57600080fd5b5061063560048036038101906106309190614304565b611931565b005b34801561064357600080fd5b5061064c611c35565b604051610659919061403a565b60405180910390f35b34801561066e57600080fd5b50610677611c59565b6040516106849190613f77565b60405180910390f35b34801561069957600080fd5b506106a2611c83565b6040516106af9190613eb1565b60405180910390f35b3480156106c457600080fd5b506106cd611d15565b6040516106da91906143c3565b60405180910390f35b3480156106ef57600080fd5b506106f8611d3b565b6040516107059190614147565b60405180910390f35b34801561071a57600080fd5b506107356004803603810190610730919061440a565b611d41565b005b34801561074357600080fd5b5061075e60048036038101906107599190613f09565b611eb9565b60405161076b9190614147565b60405180910390f35b34801561078057600080fd5b50610789611f15565b604051610796919061403a565b60405180910390f35b3480156107ab57600080fd5b506107b4611f39565b005b3480156107c257600080fd5b506107dd60048036038101906107d89190613ffe565b6120ba565b6040516107ea919061403a565b60405180910390f35b3480156107ff57600080fd5b5061081a6004803603810190610815919061457a565b6120cc565b005b34801561082857600080fd5b50610843600480360381019061083e9190613f09565b612148565b005b34801561085157600080fd5b5061085a6122ff565b604051610867919061403a565b60405180910390f35b34801561087c57600080fd5b5061089760048036038101906108929190613f09565b612305565b6040516108a49190613eb1565b60405180910390f35b3480156108b957600080fd5b506108c26123a4565b6040516108cf919061403a565b60405180910390f35b3480156108e457600080fd5b506108ff60048036038101906108fa91906145fd565b6123aa565b60405161090c9190613dfd565b60405180910390f35b34801561092157600080fd5b5061093c60048036038101906109379190613ffe565b61243e565b005b34801561094a57600080fd5b50610965600480360381019061096091906141e1565b612536565b005b34801561097357600080fd5b5061097c6125bc565b6040516109899190613eb1565b60405180910390f35b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480610a5d57507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80610a6d5750610a6c826125f5565b5b9050919050565b606060028054610a839061466c565b80601f0160208091040260200160405190810160405280929190818152602001828054610aaf9061466c565b8015610afc5780601f10610ad157610100808354040283529160200191610afc565b820191906000526020600020905b815481529060010190602001808311610adf57829003601f168201915b5050505050905090565b6000610b118261265f565b610b47576040517fcf4700e400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6006600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000610b8d82611790565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610bf5576040517f943f7b8c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610c146126ad565b73ffffffffffffffffffffffffffffffffffffffff1614158015610c465750610c4481610c3f6126ad565b6123aa565b155b15610c7d576040517fcfb3b94200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610c888383836126b5565b505050565b610c956126ad565b73ffffffffffffffffffffffffffffffffffffffff16610cb3611c59565b73ffffffffffffffffffffffffffffffffffffffff1614610d09576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d00906146ea565b60405180910390fd5b80601260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000610d57612767565b6001546000540303905090565b6002600a541415610daa576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610da190614756565b60405180910390fd5b6002600a81905550600e54600081118015610dc457508042115b610e03576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dfa906147e8565b60405180910390fd5b84843373ffffffffffffffffffffffffffffffffffffffff163273ffffffffffffffffffffffffffffffffffffffff1614610e73576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e6a9061487a565b60405180910390fd5b7f0000000000000000000000000000000000000000000000000000000000000000610eae83610ea0610d4d565b61276c90919063ffffffff16565b1115610eef576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ee69061490c565b60405180910390fd5b80610f0b83610efd33612782565b61276c90919063ffffffff16565b1115610f4c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f439061499e565b60405180910390fd5b60008211610f8f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f8690614a30565b60405180910390fd5b86610fc3817f000000000000000000000000000000000000000000000000000000000000000061279490919063ffffffff16565b3414611004576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ffb90614ac2565b60405180910390fd5b60003411611047576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161103e90614a30565b60405180910390fd5b86338787600b546110c2838380806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050508286886040516020016110a7929190614b4b565b604051602081830303815290604052805190602001206127aa565b611101576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110f890614be9565b60405180910390fd5b61110b338e6127c1565b5050505050505050506001600a8190555050505050565b600f5481565b600b5481565b611139838383612911565b505050565b600d5481565b61114c6126ad565b73ffffffffffffffffffffffffffffffffffffffff1661116a611c59565b73ffffffffffffffffffffffffffffffffffffffff16146111c0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111b7906146ea565b60405180910390fd5b80600b8190555050565b6111d26126ad565b73ffffffffffffffffffffffffffffffffffffffff166111f0611c59565b73ffffffffffffffffffffffffffffffffffffffff1614611246576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161123d906146ea565b60405180910390fd5b6002600a54141561128c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161128390614756565b60405180910390fd5b6002600a8190555061129d81612dc7565b6001600a8190555050565b6002600a5414156112ee576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112e590614756565b60405180910390fd5b6002600a81905550600f5460008111801561130857508042115b611347576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161133e906147e8565b60405180910390fd5b817f00000000000000000000000000000000000000000000000000000000000000003373ffffffffffffffffffffffffffffffffffffffff163273ffffffffffffffffffffffffffffffffffffffff16146113d7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113ce9061487a565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000061141283611404610d4d565b61276c90919063ffffffff16565b1115611453576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161144a9061490c565b60405180910390fd5b8061146f8361146133612782565b61276c90919063ffffffff16565b11156114b0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114a79061499e565b60405180910390fd5b600082116114f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114ea90614a30565b60405180910390fd5b83611527817f000000000000000000000000000000000000000000000000000000000000000061279490919063ffffffff16565b3414611568576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161155f90614ac2565b60405180910390fd5b600034116115ab576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115a290614a30565b60405180910390fd5b6115b533866127c1565b505050506001600a8190555050565b6115df838383604051806020016040528060008152506120cc565b505050565b6115ec6126ad565b73ffffffffffffffffffffffffffffffffffffffff1661160a611c59565b73ffffffffffffffffffffffffffffffffffffffff1614611660576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611657906146ea565b60405180910390fd5b818160119190611671929190613c63565b505050565b61167e6126ad565b73ffffffffffffffffffffffffffffffffffffffff1661169c611c59565b73ffffffffffffffffffffffffffffffffffffffff16146116f2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116e9906146ea565b60405180910390fd5b828211611734576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161172b90614c7b565b60405180910390fd5b818111611776576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161176d90614d0d565b60405180910390fd5b82600d8190555081600e8190555080600f81905550505050565b600061179b82613026565b600001519050919050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60606117d46132b5565b905090565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611841576040517f8f4eb60400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900467ffffffffffffffff1667ffffffffffffffff169050919050565b6118b16126ad565b73ffffffffffffffffffffffffffffffffffffffff166118cf611c59565b73ffffffffffffffffffffffffffffffffffffffff1614611925576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161191c906146ea565b60405180910390fd5b61192f6000613347565b565b6002600a541415611977576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161196e90614756565b60405180910390fd5b6002600a81905550600d5460008111801561199157508042115b6119d0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119c7906147e8565b60405180910390fd5b83843373ffffffffffffffffffffffffffffffffffffffff163273ffffffffffffffffffffffffffffffffffffffff1614611a40576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a379061487a565b60405180910390fd5b7f0000000000000000000000000000000000000000000000000000000000000000611a7b83611a6d610d4d565b61276c90919063ffffffff16565b1115611abc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ab39061490c565b60405180910390fd5b80611ad883611aca33612782565b61276c90919063ffffffff16565b1115611b19576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b109061499e565b60405180910390fd5b60008211611b5c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b5390614a30565b60405180910390fd5b85338686600c54611bd7838380806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050828688604051602001611bbc929190614b4b565b604051602081830303815290604052805190602001206127aa565b611c16576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c0d90614be9565b60405180910390fd5b611c20338c6127c1565b50505050505050506001600a81905550505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606060038054611c929061466c565b80601f0160208091040260200160405190810160405280929190818152602001828054611cbe9061466c565b8015611d0b5780601f10611ce057610100808354040283529160200191611d0b565b820191906000526020600020905b815481529060010190602001808311611cee57829003601f168201915b5050505050905090565b601260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600c5481565b611d496126ad565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611dae576040517fb06307db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8060076000611dbb6126ad565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff16611e686126ad565b73ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051611ead9190613dfd565b60405180910390a35050565b6000611ec48261265f565b611efa576040517f963eb14f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60106000838152602001908152602001600020549050919050565b7f000000000000000000000000000000000000000000000000000000000000000081565b611f416126ad565b73ffffffffffffffffffffffffffffffffffffffff16611f5f611c59565b73ffffffffffffffffffffffffffffffffffffffff1614611fb5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fac906146ea565b60405180910390fd5b6002600a541415611ffb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ff290614756565b60405180910390fd5b6002600a8190555060003373ffffffffffffffffffffffffffffffffffffffff164760405161202990614d5e565b60006040518083038185875af1925050503d8060008114612066576040519150601f19603f3d011682016040523d82523d6000602084013e61206b565b606091505b50509050806120af576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120a690614de5565b60405180910390fd5b506001600a81905550565b60006120c582612782565b9050919050565b6120d7848484612911565b6120f68373ffffffffffffffffffffffffffffffffffffffff1661340d565b801561210b575061210984848484613430565b155b15612142576040517fd1a57ed600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50505050565b6121506126ad565b73ffffffffffffffffffffffffffffffffffffffff1661216e611c59565b73ffffffffffffffffffffffffffffffffffffffff16146121c4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121bb906146ea565b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006121ff826121f1610d4d565b61276c90919063ffffffff16565b1115612240576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161223790614e77565b60405180910390fd5b60007f00000000000000000000000000000000000000000000000000000000000000009050600061227a828461359090919063ffffffff16565b146122ba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122b190614f09565b60405180910390fd5b60006122cf82846135a690919063ffffffff16565b905060005b818110156122f9576122e633846127c1565b80806122f190614f58565b9150506122d4565b50505050565b600e5481565b60606123108261265f565b612346576040517fa14c4b5000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006123506132b5565b9050600081511415612371576040518060200160405280600081525061239c565b8061237b846135bc565b60405160200161238c929190614fdd565b6040516020818303038152906040525b915050919050565b60085481565b6000600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6124466126ad565b73ffffffffffffffffffffffffffffffffffffffff16612464611c59565b73ffffffffffffffffffffffffffffffffffffffff16146124ba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124b1906146ea565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561252a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161252190615073565b60405180910390fd5b61253381613347565b50565b61253e6126ad565b73ffffffffffffffffffffffffffffffffffffffff1661255c611c59565b73ffffffffffffffffffffffffffffffffffffffff16146125b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125a9906146ea565b60405180910390fd5b80600c8190555050565b6040518060400160405280600581526020017f302e322e3100000000000000000000000000000000000000000000000000000081525081565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b60008161266a612767565b11158015612679575060005482105b80156126a6575060046000838152602001908152602001600020600001601c9054906101000a900460ff16155b9050919050565b600033905090565b826006600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550818373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a4505050565b600090565b6000818361277a9190615093565b905092915050565b600061278d8261371d565b9050919050565b600081836127a291906150e9565b905092915050565b6000826127b78584613787565b1490509392505050565b6127cb82826137fc565b60006127d5610d4d565b905060006127ec838361381a90919063ffffffff16565b905060008367ffffffffffffffff81111561280a5761280961444f565b5b6040519080825280602002602001820160405280156128385781602001602082028036833780820191505090505b50905060005b848110156128b757600061285b828561276c90919063ffffffff16565b9050600061286882613830565b90508084848151811061287e5761287d615143565b5b602002602001018181525050806010600084815260200190815260200160002081905550505080806128af90614f58565b91505061283e565b508473ffffffffffffffffffffffffffffffffffffffff167f5cb27d2833c0b1f5f25192224a4f5c4573f3c2a9394c0a0a9a31c092e8879eb484868460405161290293929190615230565b60405180910390a25050505050565b600061291c82613026565b90508373ffffffffffffffffffffffffffffffffffffffff16816000015173ffffffffffffffffffffffffffffffffffffffff1614612987576040517fa114810000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008473ffffffffffffffffffffffffffffffffffffffff166129a86126ad565b73ffffffffffffffffffffffffffffffffffffffff1614806129d757506129d6856129d16126ad565b6123aa565b5b80612a1c57506129e56126ad565b73ffffffffffffffffffffffffffffffffffffffff16612a0484610b06565b73ffffffffffffffffffffffffffffffffffffffff16145b905080612a55576040517f59c896be00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415612abc576040517fea553b3400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b612ac98585856001613860565b612ad5600084876126b5565b6001600560008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160008282829054906101000a900467ffffffffffffffff160392506101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055506001600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160008282829054906101000a900467ffffffffffffffff160192506101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055506000600460008581526020019081526020016000209050848160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550428160000160146101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060006001850190506000600460008381526020019081526020016000209050600073ffffffffffffffffffffffffffffffffffffffff168160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415612d55576000548214612d5457878160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555084602001518160000160146101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055505b5b505050828473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4612dc08585856001613866565b5050505050565b6000811415612e02576040517f56be441500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b612e0a612767565b6000541415612e45576040517fc0367cab00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060085490506000811415612e6057612e5d612767565b90505b6000548110612e9b576040517f70e89b1b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006001838301039050600054600182011115612ebb5760016000540390505b60008290505b81811161301657600073ffffffffffffffffffffffffffffffffffffffff166004600083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16148015612f5b575060046000828152602001908152602001600020600001601c9054906101000a900460ff16155b15613009576000612f6b82613026565b905080600001516004600084815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080602001516004600084815260200190815260200160002060000160146101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550505b8080600101915050612ec1565b5060018101600881905550505050565b61302e613ce9565b60008290508061303c612767565b1115801561304b575060005481105b1561327e576000600460008381526020019081526020016000206040518060600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160149054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff16815260200160008201601c9054906101000a900460ff1615151515815250509050806040015161327c57600073ffffffffffffffffffffffffffffffffffffffff16816000015173ffffffffffffffffffffffffffffffffffffffff16146131605780925050506132b0565b5b60011561327b57818060019003925050600460008381526020019081526020016000206040518060600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160149054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff16815260200160008201601c9054906101000a900460ff1615151515815250509050600073ffffffffffffffffffffffffffffffffffffffff16816000015173ffffffffffffffffffffffffffffffffffffffff16146132765780925050506132b0565b613161565b5b505b6040517fdf2d9b4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b919050565b6060601180546132c49061466c565b80601f01602080910402602001604051908101604052809291908181526020018280546132f09061466c565b801561333d5780601f106133125761010080835404028352916020019161333d565b820191906000526020600020905b81548152906001019060200180831161332057829003601f168201915b5050505050905090565b6000600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b60008373ffffffffffffffffffffffffffffffffffffffff1663150b7a026134566126ad565b8786866040518563ffffffff1660e01b815260040161347894939291906152c3565b602060405180830381600087803b15801561349257600080fd5b505af19250505080156134c357506040513d601f19601f820116820180604052508101906134c09190615324565b60015b61353d573d80600081146134f3576040519150601f19603f3d011682016040523d82523d6000602084013e6134f8565b606091505b50600081511415613535576040517fd1a57ed600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050949350505050565b6000818361359e9190615380565b905092915050565b600081836135b491906153b1565b905092915050565b60606000821415613604576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050613718565b600082905060005b6000821461363657808061361f90614f58565b915050600a8261362f91906153b1565b915061360c565b60008167ffffffffffffffff8111156136525761365161444f565b5b6040519080825280601f01601f1916602001820160405280156136845781602001600182028036833780820191505090505b5090505b600085146137115760018261369d91906153e2565b9150600a856136ac9190615380565b60306136b89190615093565b60f81b8183815181106136ce576136cd615143565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a8561370a91906153b1565b9450613688565b8093505050505b919050565b6000600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160089054906101000a900467ffffffffffffffff1667ffffffffffffffff169050919050565b60008082905060005b84518110156137f15760008582815181106137ae576137ad615143565b5b602002602001015190508083116137d0576137c9838261386c565b92506137dd565b6137da818461386c565b92505b5080806137e990614f58565b915050613790565b508091505092915050565b613816828260405180602001604052806000815250613883565b5050565b6000818361382891906153e2565b905092915050565b6000816040516020016138439190615416565b604051602081830303815290604052805190602001209050919050565b50505050565b50505050565b600082600052816020526040600020905092915050565b6138908383836001613895565b505050565b600080549050600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161415613902576040517f2e07630000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600084141561393d576040517fb562e8dd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61394a6000868387613860565b83600560008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160008282829054906101000a900467ffffffffffffffff160192506101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555083600560008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160088282829054906101000a900467ffffffffffffffff160192506101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550846004600083815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550426004600083815260200190815260200160002060000160146101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550600081905060008582019050838015613b145750613b138773ffffffffffffffffffffffffffffffffffffffff1661340d565b5b15613bda575b818773ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4613b896000888480600101955088613430565b613bbf576040517fd1a57ed600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80821415613b1a578260005414613bd557600080fd5b613c46565b5b818060010192508773ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a480821415613bdb575b816000819055505050613c5c6000868387613866565b5050505050565b828054613c6f9061466c565b90600052602060002090601f016020900481019282613c915760008555613cd8565b82601f10613caa57803560ff1916838001178555613cd8565b82800160010185558215613cd8579182015b82811115613cd7578235825591602001919060010190613cbc565b5b509050613ce59190613d2c565b5090565b6040518060600160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600067ffffffffffffffff1681526020016000151581525090565b5b80821115613d45576000816000905550600101613d2d565b5090565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b613d9281613d5d565b8114613d9d57600080fd5b50565b600081359050613daf81613d89565b92915050565b600060208284031215613dcb57613dca613d53565b5b6000613dd984828501613da0565b91505092915050565b60008115159050919050565b613df781613de2565b82525050565b6000602082019050613e126000830184613dee565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015613e52578082015181840152602081019050613e37565b83811115613e61576000848401525b50505050565b6000601f19601f8301169050919050565b6000613e8382613e18565b613e8d8185613e23565b9350613e9d818560208601613e34565b613ea681613e67565b840191505092915050565b60006020820190508181036000830152613ecb8184613e78565b905092915050565b6000819050919050565b613ee681613ed3565b8114613ef157600080fd5b50565b600081359050613f0381613edd565b92915050565b600060208284031215613f1f57613f1e613d53565b5b6000613f2d84828501613ef4565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000613f6182613f36565b9050919050565b613f7181613f56565b82525050565b6000602082019050613f8c6000830184613f68565b92915050565b613f9b81613f56565b8114613fa657600080fd5b50565b600081359050613fb881613f92565b92915050565b60008060408385031215613fd557613fd4613d53565b5b6000613fe385828601613fa9565b9250506020613ff485828601613ef4565b9150509250929050565b60006020828403121561401457614013613d53565b5b600061402284828501613fa9565b91505092915050565b61403481613ed3565b82525050565b600060208201905061404f600083018461402b565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f84011261407a57614079614055565b5b8235905067ffffffffffffffff8111156140975761409661405a565b5b6020830191508360208202830111156140b3576140b261405f565b5b9250929050565b600080600080606085870312156140d4576140d3613d53565b5b60006140e287828801613ef4565b94505060206140f387828801613ef4565b935050604085013567ffffffffffffffff81111561411457614113613d58565b5b61412087828801614064565b925092505092959194509250565b6000819050919050565b6141418161412e565b82525050565b600060208201905061415c6000830184614138565b92915050565b60008060006060848603121561417b5761417a613d53565b5b600061418986828701613fa9565b935050602061419a86828701613fa9565b92505060406141ab86828701613ef4565b9150509250925092565b6141be8161412e565b81146141c957600080fd5b50565b6000813590506141db816141b5565b92915050565b6000602082840312156141f7576141f6613d53565b5b6000614205848285016141cc565b91505092915050565b60008083601f84011261422457614223614055565b5b8235905067ffffffffffffffff8111156142415761424061405a565b5b60208301915083600182028301111561425d5761425c61405f565b5b9250929050565b6000806020838503121561427b5761427a613d53565b5b600083013567ffffffffffffffff81111561429957614298613d58565b5b6142a58582860161420e565b92509250509250929050565b6000806000606084860312156142ca576142c9613d53565b5b60006142d886828701613ef4565b93505060206142e986828701613ef4565b92505060406142fa86828701613ef4565b9150509250925092565b60008060006040848603121561431d5761431c613d53565b5b600061432b86828701613ef4565b935050602084013567ffffffffffffffff81111561434c5761434b613d58565b5b61435886828701614064565b92509250509250925092565b6000819050919050565b600061438961438461437f84613f36565b614364565b613f36565b9050919050565b600061439b8261436e565b9050919050565b60006143ad82614390565b9050919050565b6143bd816143a2565b82525050565b60006020820190506143d860008301846143b4565b92915050565b6143e781613de2565b81146143f257600080fd5b50565b600081359050614404816143de565b92915050565b6000806040838503121561442157614420613d53565b5b600061442f85828601613fa9565b9250506020614440858286016143f5565b9150509250929050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61448782613e67565b810181811067ffffffffffffffff821117156144a6576144a561444f565b5b80604052505050565b60006144b9613d49565b90506144c5828261447e565b919050565b600067ffffffffffffffff8211156144e5576144e461444f565b5b6144ee82613e67565b9050602081019050919050565b82818337600083830152505050565b600061451d614518846144ca565b6144af565b9050828152602081018484840111156145395761453861444a565b5b6145448482856144fb565b509392505050565b600082601f83011261456157614560614055565b5b813561457184826020860161450a565b91505092915050565b6000806000806080858703121561459457614593613d53565b5b60006145a287828801613fa9565b94505060206145b387828801613fa9565b93505060406145c487828801613ef4565b925050606085013567ffffffffffffffff8111156145e5576145e4613d58565b5b6145f18782880161454c565b91505092959194509250565b6000806040838503121561461457614613613d53565b5b600061462285828601613fa9565b925050602061463385828601613fa9565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061468457607f821691505b602082108114156146985761469761463d565b5b50919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006146d4602083613e23565b91506146df8261469e565b602082019050919050565b60006020820190508181036000830152614703816146c7565b9050919050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6000614740601f83613e23565b915061474b8261470a565b602082019050919050565b6000602082019050818103600083015261476f81614733565b9050919050565b7f52686170736f647943726561746f7247656e657261746976652f696e76616c6960008201527f642d6d696e742d74696d65000000000000000000000000000000000000000000602082015250565b60006147d2602b83613e23565b91506147dd82614776565b604082019050919050565b60006020820190508181036000830152614801816147c5565b9050919050565b7f52686170736f647943726561746f7247656e657261746976652f696e76616c6960008201527f642d6d696e742d63616c6c657200000000000000000000000000000000000000602082015250565b6000614864602d83613e23565b915061486f82614808565b604082019050919050565b6000602082019050818103600083015261489381614857565b9050919050565b7f52686170736f647943726561746f7247656e657261746976652f696e76616c6960008201527f642d746f74616c2d737570706c79000000000000000000000000000000000000602082015250565b60006148f6602e83613e23565b91506149018261489a565b604082019050919050565b60006020820190508181036000830152614925816148e9565b9050919050565b7f52686170736f647943726561746f7247656e657261746976652f696e76616c6960008201527f642d696e766f636174696f6e2d75707065722d626f756e646172790000000000602082015250565b6000614988603b83613e23565b91506149938261492c565b604082019050919050565b600060208201905081810360008301526149b78161497b565b9050919050565b7f52686170736f647943726561746f7247656e657261746976652f696e76616c6960008201527f642d696e766f636174696f6e2d6c6f7765722d626f756e646172790000000000602082015250565b6000614a1a603b83613e23565b9150614a25826149be565b604082019050919050565b60006020820190508181036000830152614a4981614a0d565b9050919050565b7f52686170736f647943726561746f7247656e657261746976652f696e76616c6960008201527f642d6d696e742d76616c75650000000000000000000000000000000000000000602082015250565b6000614aac602c83613e23565b9150614ab782614a50565b604082019050919050565b60006020820190508181036000830152614adb81614a9f565b9050919050565b60008160601b9050919050565b6000614afa82614ae2565b9050919050565b6000614b0c82614aef565b9050919050565b614b24614b1f82613f56565b614b01565b82525050565b6000819050919050565b614b45614b4082613ed3565b614b2a565b82525050565b6000614b578285614b13565b601482019150614b678284614b34565b6020820191508190509392505050565b7f52686170736f647943726561746f7247656e657261746976652f696e76616c6960008201527f642d616464726573732d70726f6f660000000000000000000000000000000000602082015250565b6000614bd3602f83613e23565b9150614bde82614b77565b604082019050919050565b60006020820190508181036000830152614c0281614bc6565b9050919050565b7f52686170736f647943726561746f7247656e657261746976652f696e76616c6960008201527f642d70726573616c652d74696d65000000000000000000000000000000000000602082015250565b6000614c65602e83613e23565b9150614c7082614c09565b604082019050919050565b60006020820190508181036000830152614c9481614c58565b9050919050565b7f52686170736f647943726561746f7247656e657261746976652f696e76616c6960008201527f642d7075626c69632d74696d6500000000000000000000000000000000000000602082015250565b6000614cf7602d83613e23565b9150614d0282614c9b565b604082019050919050565b60006020820190508181036000830152614d2681614cea565b9050919050565b600081905092915050565b50565b6000614d48600083614d2d565b9150614d5382614d38565b600082019050919050565b6000614d6982614d3b565b9150819050919050565b7f52686170736f647943726561746f7247656e657261746976652f696e76616c6960008201527f642d77697468647261772d6d6f6e657900000000000000000000000000000000602082015250565b6000614dcf603083613e23565b9150614dda82614d73565b604082019050919050565b60006020820190508181036000830152614dfe81614dc2565b9050919050565b7f52686170736f647943726561746f7247656e657261746976652f696e76616c6960008201527f642d70726f6d6f74696f6e2d737570706c790000000000000000000000000000602082015250565b6000614e61603283613e23565b9150614e6c82614e05565b604082019050919050565b60006020820190508181036000830152614e9081614e54565b9050919050565b7f52686170736f647943726561746f7247656e657261746976652f696e76616c6960008201527f642d62617463682d6d756c7469706c6500000000000000000000000000000000602082015250565b6000614ef3603083613e23565b9150614efe82614e97565b604082019050919050565b60006020820190508181036000830152614f2281614ee6565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000614f6382613ed3565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415614f9657614f95614f29565b5b600182019050919050565b600081905092915050565b6000614fb782613e18565b614fc18185614fa1565b9350614fd1818560208601613e34565b80840191505092915050565b6000614fe98285614fac565b9150614ff58284614fac565b91508190509392505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b600061505d602683613e23565b915061506882615001565b604082019050919050565b6000602082019050818103600083015261508c81615050565b9050919050565b600061509e82613ed3565b91506150a983613ed3565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156150de576150dd614f29565b5b828201905092915050565b60006150f482613ed3565b91506150ff83613ed3565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561513857615137614f29565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6151a78161412e565b82525050565b60006151b9838361519e565b60208301905092915050565b6000602082019050919050565b60006151dd82615172565b6151e7818561517d565b93506151f28361518e565b8060005b8381101561522357815161520a88826151ad565b9750615215836151c5565b9250506001810190506151f6565b5085935050505092915050565b6000606082019050615245600083018661402b565b615252602083018561402b565b818103604083015261526481846151d2565b9050949350505050565b600081519050919050565b600082825260208201905092915050565b60006152958261526e565b61529f8185615279565b93506152af818560208601613e34565b6152b881613e67565b840191505092915050565b60006080820190506152d86000830187613f68565b6152e56020830186613f68565b6152f2604083018561402b565b8181036060830152615304818461528a565b905095945050505050565b60008151905061531e81613d89565b92915050565b60006020828403121561533a57615339613d53565b5b60006153488482850161530f565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061538b82613ed3565b915061539683613ed3565b9250826153a6576153a5615351565b5b828206905092915050565b60006153bc82613ed3565b91506153c783613ed3565b9250826153d7576153d6615351565b5b828204905092915050565b60006153ed82613ed3565b91506153f883613ed3565b92508282101561540b5761540a614f29565b5b828203905092915050565b60006154228284614b34565b6020820191508190509291505056fea26469706673582212209ae97b3537a64cce91b02b68f22490992d6f47d6d5a909f86363c567367a7b9d64736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "claimMint(uint256,bytes32[])": {
        "details": "user must mint max invocations",
        "params": {
          "invocations": "number of tokens to mint",
          "proof": "merkle proof to prove address and token mint count are in tree"
        }
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "presaleMint(uint256,uint256,bytes32[])": {
        "params": {
          "invocations": "number of tokens to mint",
          "maxInvocation": "max number of invocations of the user",
          "proof": "merkle proof to prove address and token mint count are in tree"
        }
      },
      "promotionMint(uint256)": {
        "params": {
          "invocations": "the number of invocations to batch mint"
        }
      },
      "publicMint(uint256)": {
        "details": "user can only mint less than maxPublicBatchPerAddress of tokens",
        "params": {
          "invocations": "number of tokens to mint"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "setClaimMerkleRoot(bytes32)": {
        "params": {
          "_claimMerkleRoot": "root of the merklelized claimlist"
        }
      },
      "setMintTime(uint256,uint256,uint256)": {
        "details": "this function can serve as an \"active\" and \"non-active\" sale statusset the values to uint256(-1) for \"non-active\" sale statusalso, pass contract ownership to address(0) to close sale forever",
        "params": {
          "_presaleTime": "time the presale starts",
          "_publicTime": "time the public sale starts"
        }
      },
      "setOwnersExplicit(uint256)": {
        "details": "eliminate loops in future calls of ownerOf()"
      },
      "setPresaleMerkleRoot(bytes32)": {
        "params": {
          "_presaleMerkleRoot": "root of the merklelized whitelist"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "totalSupply()": {
        "details": "Burned tokens are calculated here, use _totalMinted() if you want to count just minted tokens."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "Created(address,uint256,uint256,bytes32[])": {
        "notice": "============ Events ============"
      }
    },
    "kind": "user",
    "methods": {
      "VERSION()": {
        "notice": "Semver Version"
      },
      "amountForPromotion()": {
        "notice": "promotional nfts count"
      },
      "baseURI()": {
        "notice": "core metadata baseURI used for tokens metadata"
      },
      "claimMerkleRoot()": {
        "notice": "ERC721-claim inclusion root"
      },
      "claimMint(uint256,bytes32[])": {
        "notice": "Allows claim of tokens if address is part of merkle tree"
      },
      "claimTime()": {
        "notice": "time the public starts"
      },
      "maxPublicBatchPerAddress()": {
        "notice": "max mintable tokens for each address in public"
      },
      "mintOf(address)": {
        "notice": "returns the number of mints of an address"
      },
      "mintPrice()": {
        "notice": "mint price of each nft; same for pre/public sale."
      },
      "mintRandomizerContract()": {
        "notice": "the randomizer contract"
      },
      "presaleMerkleRoot()": {
        "notice": "ERC721-presale inclusion root"
      },
      "presaleMint(uint256,uint256,bytes32[])": {
        "notice": "Allows presale minting of tokens if address is part of merkle tree"
      },
      "presaleTime()": {
        "notice": "time the presale starts"
      },
      "promotionMint(uint256)": {
        "notice": "used by owner to mint promotional nfts"
      },
      "publicMint(uint256)": {
        "notice": "Allows public minting of tokens"
      },
      "publicTime()": {
        "notice": "time the public starts"
      },
      "setBaseURI(string)": {
        "notice": "set the new baseURI to change the tokens metadata"
      },
      "setClaimMerkleRoot(bytes32)": {
        "notice": "force override the merkle root used in presale mint"
      },
      "setMintRandomizerContract(address)": {
        "notice": "used the set the mint randomizer for on-chain generative projects"
      },
      "setMintTime(uint256,uint256,uint256)": {
        "notice": "Set the time for the mint"
      },
      "setOwnersExplicit(uint256)": {
        "notice": "sets the owners quantity explicity"
      },
      "setPresaleMerkleRoot(bytes32)": {
        "notice": "force override the merkle root used in presale mint"
      },
      "withdrawMoney()": {
        "notice": "withdraws the ether in the contract to owner"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2978,
        "contract": "contracts/test/helpers/RhapsodyCreatorGenerativeRinkeby.sol:RhapsodyCreatorGenerativeRinkeby",
        "label": "_currentIndex",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 2980,
        "contract": "contracts/test/helpers/RhapsodyCreatorGenerativeRinkeby.sol:RhapsodyCreatorGenerativeRinkeby",
        "label": "_burnCounter",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 2982,
        "contract": "contracts/test/helpers/RhapsodyCreatorGenerativeRinkeby.sol:RhapsodyCreatorGenerativeRinkeby",
        "label": "_name",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 2984,
        "contract": "contracts/test/helpers/RhapsodyCreatorGenerativeRinkeby.sol:RhapsodyCreatorGenerativeRinkeby",
        "label": "_symbol",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 2989,
        "contract": "contracts/test/helpers/RhapsodyCreatorGenerativeRinkeby.sol:RhapsodyCreatorGenerativeRinkeby",
        "label": "_ownerships",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_struct(TokenOwnership)2967_storage)"
      },
      {
        "astId": 2994,
        "contract": "contracts/test/helpers/RhapsodyCreatorGenerativeRinkeby.sol:RhapsodyCreatorGenerativeRinkeby",
        "label": "_addressData",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_struct(AddressData)2976_storage)"
      },
      {
        "astId": 2998,
        "contract": "contracts/test/helpers/RhapsodyCreatorGenerativeRinkeby.sol:RhapsodyCreatorGenerativeRinkeby",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 3004,
        "contract": "contracts/test/helpers/RhapsodyCreatorGenerativeRinkeby.sol:RhapsodyCreatorGenerativeRinkeby",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 4244,
        "contract": "contracts/test/helpers/RhapsodyCreatorGenerativeRinkeby.sol:RhapsodyCreatorGenerativeRinkeby",
        "label": "nextOwnerToExplicitlySet",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 7,
        "contract": "contracts/test/helpers/RhapsodyCreatorGenerativeRinkeby.sol:RhapsodyCreatorGenerativeRinkeby",
        "label": "_owner",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 115,
        "contract": "contracts/test/helpers/RhapsodyCreatorGenerativeRinkeby.sol:RhapsodyCreatorGenerativeRinkeby",
        "label": "_status",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 2182,
        "contract": "contracts/test/helpers/RhapsodyCreatorGenerativeRinkeby.sol:RhapsodyCreatorGenerativeRinkeby",
        "label": "presaleMerkleRoot",
        "offset": 0,
        "slot": "11",
        "type": "t_bytes32"
      },
      {
        "astId": 2185,
        "contract": "contracts/test/helpers/RhapsodyCreatorGenerativeRinkeby.sol:RhapsodyCreatorGenerativeRinkeby",
        "label": "claimMerkleRoot",
        "offset": 0,
        "slot": "12",
        "type": "t_bytes32"
      },
      {
        "astId": 2188,
        "contract": "contracts/test/helpers/RhapsodyCreatorGenerativeRinkeby.sol:RhapsodyCreatorGenerativeRinkeby",
        "label": "claimTime",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 2191,
        "contract": "contracts/test/helpers/RhapsodyCreatorGenerativeRinkeby.sol:RhapsodyCreatorGenerativeRinkeby",
        "label": "presaleTime",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 2194,
        "contract": "contracts/test/helpers/RhapsodyCreatorGenerativeRinkeby.sol:RhapsodyCreatorGenerativeRinkeby",
        "label": "publicTime",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 2199,
        "contract": "contracts/test/helpers/RhapsodyCreatorGenerativeRinkeby.sol:RhapsodyCreatorGenerativeRinkeby",
        "label": "_tokenHash",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_uint256,t_bytes32)"
      },
      {
        "astId": 2201,
        "contract": "contracts/test/helpers/RhapsodyCreatorGenerativeRinkeby.sol:RhapsodyCreatorGenerativeRinkeby",
        "label": "_baseTokenURI",
        "offset": 0,
        "slot": "17",
        "type": "t_string_storage"
      },
      {
        "astId": 2205,
        "contract": "contracts/test/helpers/RhapsodyCreatorGenerativeRinkeby.sol:RhapsodyCreatorGenerativeRinkeby",
        "label": "mintRandomizerContract",
        "offset": 0,
        "slot": "18",
        "type": "t_contract(IRandomizer)2910"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IRandomizer)2910": {
        "encoding": "inplace",
        "label": "contract IRandomizer",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_struct(AddressData)2976_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ERC721A.AddressData)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressData)2976_storage"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_uint256,t_struct(TokenOwnership)2967_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ERC721A.TokenOwnership)",
        "numberOfBytes": "32",
        "value": "t_struct(TokenOwnership)2967_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AddressData)2976_storage": {
        "encoding": "inplace",
        "label": "struct ERC721A.AddressData",
        "members": [
          {
            "astId": 2969,
            "contract": "contracts/test/helpers/RhapsodyCreatorGenerativeRinkeby.sol:RhapsodyCreatorGenerativeRinkeby",
            "label": "balance",
            "offset": 0,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 2971,
            "contract": "contracts/test/helpers/RhapsodyCreatorGenerativeRinkeby.sol:RhapsodyCreatorGenerativeRinkeby",
            "label": "numberMinted",
            "offset": 8,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 2973,
            "contract": "contracts/test/helpers/RhapsodyCreatorGenerativeRinkeby.sol:RhapsodyCreatorGenerativeRinkeby",
            "label": "numberBurned",
            "offset": 16,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 2975,
            "contract": "contracts/test/helpers/RhapsodyCreatorGenerativeRinkeby.sol:RhapsodyCreatorGenerativeRinkeby",
            "label": "aux",
            "offset": 24,
            "slot": "0",
            "type": "t_uint64"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(TokenOwnership)2967_storage": {
        "encoding": "inplace",
        "label": "struct ERC721A.TokenOwnership",
        "members": [
          {
            "astId": 2962,
            "contract": "contracts/test/helpers/RhapsodyCreatorGenerativeRinkeby.sol:RhapsodyCreatorGenerativeRinkeby",
            "label": "addr",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 2964,
            "contract": "contracts/test/helpers/RhapsodyCreatorGenerativeRinkeby.sol:RhapsodyCreatorGenerativeRinkeby",
            "label": "startTimestamp",
            "offset": 20,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 2966,
            "contract": "contracts/test/helpers/RhapsodyCreatorGenerativeRinkeby.sol:RhapsodyCreatorGenerativeRinkeby",
            "label": "burned",
            "offset": 28,
            "slot": "0",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}