{
  "address": "0x855cE5929Ab9AdFDf6E1140364c86041B80f6781",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_collectionSize",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxMintPerAddress",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amountForPromotion",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_mintPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_claimTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_presaleTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_publicTime",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AllOwnershipsHaveBeenSet",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ApprovalCallerNotOwnerNorApproved",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ApprovalQueryForNonexistentToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ApprovalToCurrentOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ApproveToCaller",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BalanceQueryForZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "HashQueryForNonexistentToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MintToZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MintZeroQuantity",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoTokensMintedYet",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OwnerQueryForNonexistentToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "QuantityMustBeNonZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferCallerNotOwnerNorApproved",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferFromIncorrectOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferToNonERC721ReceiverImplementer",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferToZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "URIQueryForNonexistentToken",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "currentTotalSupply",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "invocations",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32[]",
          "name": "identifiers",
          "type": "bytes32[]"
        }
      ],
      "name": "Created",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "amountForPromotion",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimMerkleRoot",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "invocations",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxInvocation",
          "type": "uint256"
        },
        {
          "internalType": "bytes32[]",
          "name": "proof",
          "type": "bytes32[]"
        }
      ],
      "name": "claimMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collectionSize",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxMintPerAddress",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "mintOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextOwnerToExplicitlySet",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "presaleMerkleRoot",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "invocations",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxInvocation",
          "type": "uint256"
        },
        {
          "internalType": "bytes32[]",
          "name": "proof",
          "type": "bytes32[]"
        }
      ],
      "name": "presaleMint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "presaleTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "invocations",
          "type": "uint256"
        }
      ],
      "name": "promotionMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "invocations",
          "type": "uint256"
        }
      ],
      "name": "publicMint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "publicTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "newBaseURI",
          "type": "string"
        }
      ],
      "name": "setBaseURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_claimMerkleRoot",
          "type": "bytes32"
        }
      ],
      "name": "setClaimMerkleRoot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_claimTime",
          "type": "uint256"
        }
      ],
      "name": "setClaimTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        }
      ],
      "name": "setOwnersExplicit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_presaleMerkleRoot",
          "type": "bytes32"
        }
      ],
      "name": "setPresaleMerkleRoot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_presaleTime",
          "type": "uint256"
        }
      ],
      "name": "setPresaleTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_publicTime",
          "type": "uint256"
        }
      ],
      "name": "setPublicTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawMoney",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x9ac4328ae22b38921368d0a29d1be70c1753c92e87a739b912c3f23a0857c8f1",
  "receipt": {
    "to": null,
    "from": "0xf8cA77ED09429aDe0d5C01ADB1D284C45324F608",
    "contractAddress": "0x855cE5929Ab9AdFDf6E1140364c86041B80f6781",
    "transactionIndex": 38,
    "gasUsed": "2576110",
    "logsBloom": "0x
    "blockHash": "0xbd5bcff9f2e66a3d1c279a406be5d9de25517414f610eb3c921d938c0b1a64e0",
    "transactionHash": "0x9ac4328ae22b38921368d0a29d1be70c1753c92e87a739b912c3f23a0857c8f1",
    "logs": [
      {
        "transactionIndex": 38,
        "blockNumber": 8359753,
        "transactionHash": "0x9ac4328ae22b38921368d0a29d1be70c1753c92e87a739b912c3f23a0857c8f1",
        "address": "0x855cE5929Ab9AdFDf6E1140364c86041B80f6781",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f8ca77ed09429ade0d5c01adb1d284c45324f608"
        ],
        "data": "0x",
        "logIndex": 91,
        "blockHash": "0xbd5bcff9f2e66a3d1c279a406be5d9de25517414f610eb3c921d938c0b1a64e0"
      }
    ],
    "blockNumber": 8359753,
    "cumulativeGasUsed": "6479802",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "Rhapsody",
    "RHY",
    1111,
    2,
    40,
    "333000000000000000",
    1670819200,
    1670819400,
    1670823000
  ],
  "numDeployments": 2,
  "solcInputHash": "9058c0d4ec14415579c7c3e3805e7114",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_collectionSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxMintPerAddress\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountForPromotion\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_mintPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_claimTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_presaleTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_publicTime\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AllOwnershipsHaveBeenSet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalToCurrentOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApproveToCaller\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BalanceQueryForZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"HashQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintZeroQuantity\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoTokensMintedYet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnerQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"QuantityMustBeNonZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFromIncorrectOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToNonERC721ReceiverImplementer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"URIQueryForNonexistentToken\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currentTotalSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"invocations\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32[]\",\"name\":\"identifiers\",\"type\":\"bytes32[]\"}],\"name\":\"Created\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"amountForPromotion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimMerkleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"invocations\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxInvocation\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"claimMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectionSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxMintPerAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"mintOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextOwnerToExplicitlySet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presaleMerkleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"invocations\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxInvocation\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"presaleMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presaleTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"invocations\",\"type\":\"uint256\"}],\"name\":\"promotionMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"invocations\",\"type\":\"uint256\"}],\"name\":\"publicMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newBaseURI\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_claimMerkleRoot\",\"type\":\"bytes32\"}],\"name\":\"setClaimMerkleRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_claimTime\",\"type\":\"uint256\"}],\"name\":\"setClaimTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"setOwnersExplicit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_presaleMerkleRoot\",\"type\":\"bytes32\"}],\"name\":\"setPresaleMerkleRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_presaleTime\",\"type\":\"uint256\"}],\"name\":\"setPresaleTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_publicTime\",\"type\":\"uint256\"}],\"name\":\"setPublicTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawMoney\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"claimMint(uint256,uint256,bytes32[])\":{\"details\":\"user must mint max invocations\",\"params\":{\"invocations\":\"number of tokens to mint\",\"proof\":\"merkle proof to prove address and token mint count are in tree\"}},\"constructor\":{\"params\":{\"_amountForPromotion\":\"promotional nfts count\",\"_collectionSize\":\"the total size of the collection\",\"_maxMintPerAddress\":\"max mintable tokens in public sale\",\"_mintPrice\":\"mint price of each nft\"}},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"presaleMint(uint256,uint256,bytes32[])\":{\"params\":{\"invocations\":\"number of tokens to mint\",\"maxInvocation\":\"max number of invocations of the user\",\"proof\":\"merkle proof to prove address and token mint count are in tree\"}},\"promotionMint(uint256)\":{\"params\":{\"invocations\":\"the number of invocations to batch mint\"}},\"publicMint(uint256)\":{\"details\":\"user can only mint less than maxMintPerAddress of tokens\",\"params\":{\"invocations\":\"number of tokens to mint\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"setClaimMerkleRoot(bytes32)\":{\"params\":{\"_claimMerkleRoot\":\"root of the merklelized claimlist\"}},\"setClaimTime(uint256)\":{\"details\":\"this function can serve as an \\\"active\\\" and \\\"non-active\\\" sale statusset the values to uint256(-1) for \\\"non-active\\\" sale statusalso, pass contract ownership to address(0) to close sale forever\",\"params\":{\"_claimTime\":\"time the presale starts\"}},\"setOwnersExplicit(uint256)\":{\"details\":\"eliminate loops in future calls of ownerOf()\"},\"setPresaleMerkleRoot(bytes32)\":{\"params\":{\"_presaleMerkleRoot\":\"root of the merklelized whitelist\"}},\"setPresaleTime(uint256)\":{\"details\":\"this function can serve as an \\\"active\\\" and \\\"non-active\\\" sale statusset the values to uint256(-1) for \\\"non-active\\\" sale statusalso, pass contract ownership to address(0) to close sale forever\",\"params\":{\"_presaleTime\":\"time the presale starts\"}},\"setPublicTime(uint256)\":{\"details\":\"this function can serve as an \\\"active\\\" and \\\"non-active\\\" sale statusset the values to uint256(-1) for \\\"non-active\\\" sale statusalso, pass contract ownership to address(0) to close sale forever\",\"params\":{\"_publicTime\":\"time the presale starts\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"totalSupply()\":{\"details\":\"Burned tokens are calculated here, use _totalMinted() if you want to count just minted tokens.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"version\":{\"details\":\"Semantic versioning for this contract\"}},\"version\":1},\"userdoc\":{\"events\":{\"Created(address,uint256,uint256,bytes32[])\":{\"notice\":\"============ Events ============\"}},\"kind\":\"user\",\"methods\":{\"amountForPromotion()\":{\"notice\":\"promotional nfts count\"},\"baseURI()\":{\"notice\":\"core metadata baseURI used for tokens metadata\"},\"claimMerkleRoot()\":{\"notice\":\"ERC721-claim inclusion root\"},\"claimMint(uint256,uint256,bytes32[])\":{\"notice\":\"Allows claim of tokens if address is part of merkle tree\"},\"claimTime()\":{\"notice\":\"time the claim starts\"},\"collectionSize()\":{\"notice\":\"total number of tokens in the collection\"},\"constructor\":{\"notice\":\"Creates a new Creator contract\"},\"maxMintPerAddress()\":{\"notice\":\"max mintable tokens for each address in public\"},\"mintOf(address)\":{\"notice\":\"returns the number of mints of an address\"},\"mintPrice()\":{\"notice\":\"mint price of each nft; same for pre/public sale.\"},\"presaleMerkleRoot()\":{\"notice\":\"ERC721-presale inclusion root\"},\"presaleMint(uint256,uint256,bytes32[])\":{\"notice\":\"Allows presale minting of tokens if address is part of merkle tree\"},\"presaleTime()\":{\"notice\":\"time the presale starts\"},\"promotionMint(uint256)\":{\"notice\":\"used by owner to mint promotional nfts\"},\"publicMint(uint256)\":{\"notice\":\"Allows public minting of tokens\"},\"publicTime()\":{\"notice\":\"time the public starts\"},\"setBaseURI(string)\":{\"notice\":\"set the new baseURI to change the tokens metadata\"},\"setClaimMerkleRoot(bytes32)\":{\"notice\":\"force override the merkle root used in presale mint\"},\"setClaimTime(uint256)\":{\"notice\":\"Set the claim time for the mint\"},\"setOwnersExplicit(uint256)\":{\"notice\":\"sets the owners quantity explicity\"},\"setPresaleMerkleRoot(bytes32)\":{\"notice\":\"force override the merkle root used in presale mint\"},\"setPresaleTime(uint256)\":{\"notice\":\"Set the presale time for the mint\"},\"setPublicTime(uint256)\":{\"notice\":\"Set the public time for the mint\"},\"version()\":{\"notice\":\"============ Semantic Versioning ============\"},\"withdrawMoney()\":{\"notice\":\"withdraws the ether in the contract to owner\"}},\"notice\":\"! 1. Removed IRandomizer.sol\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/RhapsodyCreatorGenerative.sol\":\"RhapsodyCreatorGenerative\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x0b606994df12f0ce35f6d2f6dcdde7e55e6899cdef7e00f180980caa81e3844e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xed6a749c5373af398105ce6ee3ac4763aa450ea7285d268c85d9eeca809cdb1f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Tree proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {verify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function verifyCalldata(\\n        bytes32[] calldata proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProofCalldata(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns true if the `leaves` can be proved to be a part of a Merkle tree defined by\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerify(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProof(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {multiProofVerify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerifyCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the root of a tree reconstructed from `leaves` and the sibling nodes in `proof`,\\n     * consuming from one or the other at each step according to the instructions given by\\n     * `proofFlags`.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProof(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processMultiProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProofCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x596ed72a251d391b814a4aa19d7acb02ebdcc92ba27d3fff74a6f0c158b12ab7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"contracts/RhapsodyCreatorGenerative.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"erc721a/contracts/ERC721A.sol\\\";\\nimport \\\"erc721a/contracts/extensions/ERC721AOwnersExplicit.sol\\\";\\nimport \\\"./utils/interfaces/IRandomizer.sol\\\";\\n\\nerror HashQueryForNonexistentToken();\\n\\n///! 1. Removed IRandomizer.sol\\ncontract RhapsodyCreatorGenerative is ERC721A, ERC721AOwnersExplicit, Ownable, ReentrancyGuard {\\n    /// ============ Semantic Versioning ============\\n    /// @dev Semantic versioning for this contract\\n    string public constant version = \\\"1.0.0\\\";\\n\\n    /// ============ Libraries ============\\n\\n    /// @notice safe math for arithmetic operations\\n    using SafeMath for uint256;\\n\\n    /// ============ Events ============\\n\\n    event Created(address indexed to, uint256 currentTotalSupply, uint256 invocations, bytes32[] identifiers);\\n\\n    /// ============ Immutable storage ============\\n\\n    /// @notice promotional nfts count\\n    uint256 public immutable amountForPromotion;\\n\\n    /// @notice max mintable tokens for each address in public\\n    uint256 public immutable maxMintPerAddress;\\n\\n    /// @notice mint price of each nft; same for pre/public sale.\\n    uint256 public immutable mintPrice;\\n\\n    /// @notice total number of tokens in the collection\\n    uint256 public immutable collectionSize;\\n\\n    // ============ Mutable storage ============\\n\\n    /// @notice ERC721-presale inclusion root\\n    bytes32 public presaleMerkleRoot;\\n\\n    /// @notice ERC721-claim inclusion root\\n    bytes32 public claimMerkleRoot;\\n\\n    /// @notice time the claim starts\\n    uint256 public claimTime;\\n\\n    /// @notice time the presale starts\\n    uint256 public presaleTime;\\n\\n    /// @notice time the public starts\\n    uint256 public publicTime;\\n\\n    /// @notice the hash of each token\\n    mapping(uint256 => bytes32) private _tokenHash;\\n\\n    // ============ Private storage ============\\n\\n    string private _baseTokenURI;\\n\\n    /// ============= Constructor =============\\n\\n    /// @notice Creates a new Creator contract\\n    /// @param _collectionSize the total size of the collection\\n    /// @param _maxMintPerAddress max mintable tokens in public sale\\n    /// @param _amountForPromotion promotional nfts count\\n    /// @param _mintPrice mint price of each nft\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        uint256 _collectionSize,\\n        uint256 _maxMintPerAddress,\\n        uint256 _amountForPromotion,\\n        uint256 _mintPrice,\\n        uint256 _claimTime,\\n        uint256 _presaleTime,\\n        uint256 _publicTime\\n    ) ERC721A(_name, _symbol) {\\n        require(_collectionSize > 0, \\\"RhapsodyCreatorGenerative/invalid-collection-size\\\");\\n        require(_amountForPromotion <= _collectionSize, \\\"RhapsodyCreatorGenerative/invalid-promotion-amount\\\");\\n        require(_mintPrice > 0, \\\"RhapsodyCreatorGenerative/invalid-mint-price\\\");\\n\\n        collectionSize = _collectionSize;\\n        maxMintPerAddress = _maxMintPerAddress;\\n        amountForPromotion = _amountForPromotion;\\n        mintPrice = _mintPrice;\\n\\n        setClaimTime(_claimTime);\\n        setPresaleTime(_presaleTime);\\n        setPublicTime(_publicTime);\\n    }\\n\\n    /// =========== Sale ===========\\n\\n    /// @notice Allows claim of tokens if address is part of merkle tree\\n    /// @param invocations number of tokens to mint\\n    /// @param proof merkle proof to prove address and token mint count are in tree\\n    /// @dev user must mint max invocations\\n    function claimMint(\\n        uint256 invocations,\\n        uint256 maxInvocation,\\n        bytes32[] calldata proof\\n    )\\n        external\\n        nonReentrant\\n        isMintLive(claimTime)\\n        isMintValid(invocations, maxInvocation)\\n        isMintProofValid(maxInvocation, msg.sender, proof, claimMerkleRoot)\\n    {\\n        _mintMany(msg.sender, invocations);\\n    }\\n\\n    /// @notice Allows presale minting of tokens if address is part of merkle tree\\n    /// @param invocations number of tokens to mint\\n    /// @param maxInvocation max number of invocations of the user\\n    /// @param proof merkle proof to prove address and token mint count are in tree\\n    function presaleMint(\\n        uint256 invocations,\\n        uint256 maxInvocation,\\n        bytes32[] calldata proof\\n    )\\n        external\\n        payable\\n        nonReentrant\\n        isMintLive(presaleTime)\\n        isMintValid(invocations, maxInvocation)\\n        isMintPricingValid(invocations)\\n        isMintProofValid(maxInvocation, msg.sender, proof, presaleMerkleRoot)\\n    {\\n        _mintMany(msg.sender, invocations);\\n    }\\n\\n    /// @notice Allows public minting of tokens\\n    /// @param invocations number of tokens to mint\\n    /// @dev user can only mint less than maxMintPerAddress of tokens\\n    function publicMint(uint256 invocations)\\n        external\\n        payable\\n        nonReentrant\\n        isMintLive(publicTime)\\n        isMintValid(invocations, maxMintPerAddress)\\n        isMintPricingValid(invocations)\\n    {\\n        _mintMany(msg.sender, invocations);\\n    }\\n\\n    /// @notice mint tokens in batches\\n    /// @param to address to mint to\\n    /// @param invocations number of tokens to mint\\n    function _mintMany(address to, uint256 invocations) internal {\\n        _safeMint(to, invocations);\\n\\n        uint256 currentTotalSupply = totalSupply();\\n        uint256 currentInvocations = currentTotalSupply.sub(invocations);\\n        bytes32[] memory uniqueIdentifiers = new bytes32[](invocations);\\n        for (uint256 i = 0; i < invocations; i++) {\\n            uint256 currentIndex = currentInvocations.add(i);\\n            bytes32 identifier = _generateUniqueIdentifier(currentIndex);\\n            uniqueIdentifiers[i] = identifier;\\n            _tokenHash[currentIndex] = identifier;\\n        }\\n\\n        emit Created(to, currentTotalSupply, invocations, uniqueIdentifiers);\\n    }\\n\\n    /// @notice Set the claim time for the mint\\n    /// @param _claimTime time the presale starts\\n    /// @dev this function can serve as an \\\"active\\\" and \\\"non-active\\\" sale status\\n    /// @dev set the values to uint256(-1) for \\\"non-active\\\" sale status\\n    /// @dev also, pass contract ownership to address(0) to close sale forever\\n    function setClaimTime(uint256 _claimTime) public onlyOwner {\\n        claimTime = _claimTime;\\n    }\\n\\n    /// @notice Set the presale time for the mint\\n    /// @param _presaleTime time the presale starts\\n    /// @dev this function can serve as an \\\"active\\\" and \\\"non-active\\\" sale status\\n    /// @dev set the values to uint256(-1) for \\\"non-active\\\" sale status\\n    /// @dev also, pass contract ownership to address(0) to close sale forever\\n    function setPresaleTime(uint256 _presaleTime) public onlyOwner {\\n        presaleTime = _presaleTime;\\n    }\\n\\n    /// @notice Set the public time for the mint\\n    /// @param _publicTime time the presale starts\\n    /// @dev this function can serve as an \\\"active\\\" and \\\"non-active\\\" sale status\\n    /// @dev set the values to uint256(-1) for \\\"non-active\\\" sale status\\n    /// @dev also, pass contract ownership to address(0) to close sale forever\\n    function setPublicTime(uint256 _publicTime) public onlyOwner {\\n        publicTime = _publicTime;\\n    }\\n\\n    /// @notice ensures that minters need valid invocations + value to mint\\n    modifier isMintValid(uint256 invocations, uint256 maxInvocation) {\\n        require(tx.origin == msg.sender, \\\"RhapsodyCreatorGenerative/invalid-mint-caller\\\");\\n        require(totalSupply().add(invocations) <= collectionSize, \\\"RhapsodyCreatorGenerative/invalid-total-supply\\\");\\n        require(\\n            _mintOf(msg.sender).add(invocations) <= maxInvocation,\\n            \\\"RhapsodyCreatorGenerative/invalid-invocation-upper-boundary\\\"\\n        );\\n        require(\\n            _mintOf(msg.sender).add(invocations) <= maxMintPerAddress,\\n            \\\"RhapsodyCreatorGenerative/invalid-invocation-upper-boundary\\\"\\n        );\\n        require(invocations > 0, \\\"RhapsodyCreatorGenerative/invalid-invocation-lower-boundary\\\");\\n        _;\\n    }\\n\\n    modifier isMintPricingValid(uint256 invocations) {\\n        require(msg.value == mintPrice.mul(invocations), \\\"RhapsodyCreatorGenerative/invalid-mint-value\\\");\\n        require(msg.value > 0, \\\"RhapsodyCreatorGenerative/invalid-invocation-lower-boundary\\\");\\n        _;\\n    }\\n\\n    /// @notice used to check the time of mint of presale and public\\n    /// @dev only publicTime/presaleTime variable is used here; see publicMint/presaleMint function\\n    /// @dev time > 0 is optimization when the sale is not live; r.e  mint \\\"not-active\\\" mode\\n    modifier isMintLive(uint256 time) {\\n        require(time > 0 && block.timestamp > time, \\\"RhapsodyCreatorGenerative/invalid-mint-time\\\");\\n        _;\\n    }\\n\\n    modifier isMintProofValid(\\n        uint256 invocations,\\n        address prover,\\n        bytes32[] calldata proof,\\n        bytes32 merkleRoot\\n    ) {\\n        require(\\n            MerkleProof.verify(proof, merkleRoot, keccak256(abi.encodePacked(prover, invocations))),\\n            \\\"RhapsodyCreatorGenerative/invalid-address-proof\\\"\\n        );\\n        _;\\n    }\\n\\n    /// =========== Merkle Roots ===========\\n\\n    /// @notice force override the merkle root used in presale mint\\n    /// @param _presaleMerkleRoot root of the merklelized whitelist\\n    function setPresaleMerkleRoot(bytes32 _presaleMerkleRoot) public onlyOwner {\\n        presaleMerkleRoot = _presaleMerkleRoot;\\n    }\\n\\n    /// @notice force override the merkle root used in presale mint\\n    /// @param _claimMerkleRoot root of the merklelized claimlist\\n    function setClaimMerkleRoot(bytes32 _claimMerkleRoot) public onlyOwner {\\n        claimMerkleRoot = _claimMerkleRoot;\\n    }\\n\\n    /// =========== Metadata ===========\\n\\n    /// @notice set the new baseURI to change the tokens metadata\\n    function setBaseURI(string calldata newBaseURI) external onlyOwner {\\n        _setBaseURI(newBaseURI);\\n    }\\n\\n    /// @notice set the internal baseURI to change the tokens metadata\\n    function _setBaseURI(string memory newBaseURI) internal virtual {\\n        _baseTokenURI = newBaseURI;\\n    }\\n\\n    /// @notice core metadata baseURI used for tokens metadata\\n    function baseURI() public view returns (string memory) {\\n        return _baseTokenURI;\\n    }\\n\\n    /// =========== Dev ===========\\n\\n    /// @notice used by owner to mint promotional nfts\\n    /// @param invocations the number of invocations to batch mint\\n    function promotionMint(uint256 invocations) external onlyOwner {\\n        require(\\n            totalSupply().add(invocations) <= amountForPromotion,\\n            \\\"RhapsodyCreatorGenerative/invalid-promotion-supply\\\"\\n        );\\n        uint256 maxBatchSize = maxMintPerAddress;\\n        require(invocations.mod(maxBatchSize) == 0, \\\"RhapsodyCreatorGenerative/invalid-batch-multiple\\\");\\n        uint256 blocks = invocations.div(maxBatchSize);\\n        for (uint256 i = 0; i < blocks; i++) {\\n            _mintMany(msg.sender, maxBatchSize);\\n        }\\n    }\\n\\n    /// @notice withdraws the ether in the contract to owner\\n    function withdrawMoney() external onlyOwner nonReentrant {\\n        (bool success, ) = msg.sender.call{ value: address(this).balance }(\\\"\\\");\\n        require(success, \\\"RhapsodyCreatorGenerative/invalid-withdraw-money\\\");\\n    }\\n\\n    /// @notice returns the current block timestamp\\n    /// @dev this function is overriden in testing for time-dependent testing\\n    function _currentTime() internal view virtual returns (uint256) {\\n        return block.timestamp;\\n    }\\n\\n    /// @notice sets the owners quantity explicity\\n    /// @dev eliminate loops in future calls of ownerOf()\\n    function setOwnersExplicit(uint256 quantity) external onlyOwner nonReentrant {\\n        _setOwnersExplicit(quantity);\\n    }\\n\\n    /// =========== Helpers ===========\\n\\n    /// @notice internally returns the number of mints of an address\\n    function _mintOf(address _owner) internal view returns (uint256) {\\n        return _numberMinted(_owner);\\n    }\\n\\n    /// @notice returns the number of mints of an address\\n    function mintOf(address _owner) public view returns (uint256) {\\n        return _mintOf(_owner);\\n    }\\n\\n    // @notice returns the hash of a token\\n    function tokenHash(uint256 _tokenId) public view returns (bytes32) {\\n        if (!_exists(_tokenId)) revert HashQueryForNonexistentToken();\\n        return _tokenHash[_tokenId];\\n    }\\n\\n    function _generateUniqueIdentifier(uint256 seed) internal view virtual returns (bytes32) {\\n        return keccak256(abi.encodePacked(seed, tx.origin, block.number - 1));\\n    }\\n}\\n\",\"keccak256\":\"0x7ed7d1dc8eb5d82507feca67d1ae0a99f553534a35b154ea88fcc8ef1dc9dabd\",\"license\":\"MIT\"},\"contracts/utils/interfaces/IRandomizer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IRandomizer {\\n    function getRandomValue() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xf291325336a4f369a5ac57c61a5051bd676e928ee4b1ea167c17ec6e672d59ad\",\"license\":\"MIT\"},\"erc721a/contracts/ERC721A.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.4;\\n\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\nimport '@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol';\\nimport '@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol';\\nimport '@openzeppelin/contracts/utils/Address.sol';\\nimport '@openzeppelin/contracts/utils/Context.sol';\\nimport '@openzeppelin/contracts/utils/Strings.sol';\\nimport '@openzeppelin/contracts/utils/introspection/ERC165.sol';\\n\\nerror ApprovalCallerNotOwnerNorApproved();\\nerror ApprovalQueryForNonexistentToken();\\nerror ApproveToCaller();\\nerror ApprovalToCurrentOwner();\\nerror BalanceQueryForZeroAddress();\\nerror MintToZeroAddress();\\nerror MintZeroQuantity();\\nerror OwnerQueryForNonexistentToken();\\nerror TransferCallerNotOwnerNorApproved();\\nerror TransferFromIncorrectOwner();\\nerror TransferToNonERC721ReceiverImplementer();\\nerror TransferToZeroAddress();\\nerror URIQueryForNonexistentToken();\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension. Built to optimize for lower gas during batch mints.\\n *\\n * Assumes serials are sequentially minted starting at _startTokenId() (defaults to 0, e.g. 0, 1, 2, 3..).\\n *\\n * Assumes that an owner cannot have more than 2**64 - 1 (max value of uint64) of supply.\\n *\\n * Assumes that the maximum token id cannot exceed 2**256 - 1 (max value of uint256).\\n */\\ncontract ERC721A is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Compiler will pack this into a single 256bit word.\\n    struct TokenOwnership {\\n        // The address of the owner.\\n        address addr;\\n        // Keeps track of the start time of ownership with minimal overhead for tokenomics.\\n        uint64 startTimestamp;\\n        // Whether the token has been burned.\\n        bool burned;\\n    }\\n\\n    // Compiler will pack this into a single 256bit word.\\n    struct AddressData {\\n        // Realistically, 2**64-1 is more than enough.\\n        uint64 balance;\\n        // Keeps track of mint count with minimal overhead for tokenomics.\\n        uint64 numberMinted;\\n        // Keeps track of burn count with minimal overhead for tokenomics.\\n        uint64 numberBurned;\\n        // For miscellaneous variable(s) pertaining to the address\\n        // (e.g. number of whitelist mint slots used).\\n        // If there are multiple variables, please pack them into a uint64.\\n        uint64 aux;\\n    }\\n\\n    // The tokenId of the next token to be minted.\\n    uint256 internal _currentIndex;\\n\\n    // The number of tokens burned.\\n    uint256 internal _burnCounter;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to ownership details\\n    // An empty struct value does not necessarily mean the token is unowned. See _ownershipOf implementation for details.\\n    mapping(uint256 => TokenOwnership) internal _ownerships;\\n\\n    // Mapping owner address to address data\\n    mapping(address => AddressData) private _addressData;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _currentIndex = _startTokenId();\\n    }\\n\\n    /**\\n     * To change the starting tokenId, please override this function.\\n     */\\n    function _startTokenId() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev Burned tokens are calculated here, use _totalMinted() if you want to count just minted tokens.\\n     */\\n    function totalSupply() public view returns (uint256) {\\n        // Counter underflow is impossible as _burnCounter cannot be incremented\\n        // more than _currentIndex - _startTokenId() times\\n        unchecked {\\n            return _currentIndex - _burnCounter - _startTokenId();\\n        }\\n    }\\n\\n    /**\\n     * Returns the total amount of tokens minted in the contract.\\n     */\\n    function _totalMinted() internal view returns (uint256) {\\n        // Counter underflow is impossible as _currentIndex does not decrement,\\n        // and it is initialized to _startTokenId()\\n        unchecked {\\n            return _currentIndex - _startTokenId();\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view override returns (uint256) {\\n        if (owner == address(0)) revert BalanceQueryForZeroAddress();\\n        return uint256(_addressData[owner].balance);\\n    }\\n\\n    /**\\n     * Returns the number of tokens minted by `owner`.\\n     */\\n    function _numberMinted(address owner) internal view returns (uint256) {\\n        return uint256(_addressData[owner].numberMinted);\\n    }\\n\\n    /**\\n     * Returns the number of tokens burned by or on behalf of `owner`.\\n     */\\n    function _numberBurned(address owner) internal view returns (uint256) {\\n        return uint256(_addressData[owner].numberBurned);\\n    }\\n\\n    /**\\n     * Returns the auxillary data for `owner`. (e.g. number of whitelist mint slots used).\\n     */\\n    function _getAux(address owner) internal view returns (uint64) {\\n        return _addressData[owner].aux;\\n    }\\n\\n    /**\\n     * Sets the auxillary data for `owner`. (e.g. number of whitelist mint slots used).\\n     * If there are multiple variables, please pack them into a uint64.\\n     */\\n    function _setAux(address owner, uint64 aux) internal {\\n        _addressData[owner].aux = aux;\\n    }\\n\\n    /**\\n     * Gas spent here starts off proportional to the maximum mint batch size.\\n     * It gradually moves to O(1) as tokens get transferred around in the collection over time.\\n     */\\n    function _ownershipOf(uint256 tokenId) internal view returns (TokenOwnership memory) {\\n        uint256 curr = tokenId;\\n\\n        unchecked {\\n            if (_startTokenId() <= curr && curr < _currentIndex) {\\n                TokenOwnership memory ownership = _ownerships[curr];\\n                if (!ownership.burned) {\\n                    if (ownership.addr != address(0)) {\\n                        return ownership;\\n                    }\\n                    // Invariant:\\n                    // There will always be an ownership that has an address and is not burned\\n                    // before an ownership that does not have an address and is not burned.\\n                    // Hence, curr will not underflow.\\n                    while (true) {\\n                        curr--;\\n                        ownership = _ownerships[curr];\\n                        if (ownership.addr != address(0)) {\\n                            return ownership;\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n        revert OwnerQueryForNonexistentToken();\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view override returns (address) {\\n        return _ownershipOf(tokenId).addr;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        if (!_exists(tokenId)) revert URIQueryForNonexistentToken();\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length != 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : '';\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return '';\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public override {\\n        address owner = ERC721A.ownerOf(tokenId);\\n        if (to == owner) revert ApprovalToCurrentOwner();\\n\\n        if (_msgSender() != owner && !isApprovedForAll(owner, _msgSender())) {\\n            revert ApprovalCallerNotOwnerNorApproved();\\n        }\\n\\n        _approve(to, tokenId, owner);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view override returns (address) {\\n        if (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken();\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        if (operator == _msgSender()) revert ApproveToCaller();\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, '');\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        _transfer(from, to, tokenId);\\n        if (to.isContract() && !_checkContractOnERC721Received(from, to, tokenId, _data)) {\\n            revert TransferToNonERC721ReceiverImplementer();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     */\\n    function _exists(uint256 tokenId) internal view returns (bool) {\\n        return _startTokenId() <= tokenId && tokenId < _currentIndex && !_ownerships[tokenId].burned;\\n    }\\n\\n    function _safeMint(address to, uint256 quantity) internal {\\n        _safeMint(to, quantity, '');\\n    }\\n\\n    /**\\n     * @dev Safely mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called for each safe transfer.\\n     * - `quantity` must be greater than 0.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 quantity,\\n        bytes memory _data\\n    ) internal {\\n        _mint(to, quantity, _data, true);\\n    }\\n\\n    /**\\n     * @dev Mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `quantity` must be greater than 0.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 quantity,\\n        bytes memory _data,\\n        bool safe\\n    ) internal {\\n        uint256 startTokenId = _currentIndex;\\n        if (to == address(0)) revert MintToZeroAddress();\\n        if (quantity == 0) revert MintZeroQuantity();\\n\\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\\n\\n        // Overflows are incredibly unrealistic.\\n        // balance or numberMinted overflow if current value of either + quantity > 1.8e19 (2**64) - 1\\n        // updatedIndex overflows if _currentIndex + quantity > 1.2e77 (2**256) - 1\\n        unchecked {\\n            _addressData[to].balance += uint64(quantity);\\n            _addressData[to].numberMinted += uint64(quantity);\\n\\n            _ownerships[startTokenId].addr = to;\\n            _ownerships[startTokenId].startTimestamp = uint64(block.timestamp);\\n\\n            uint256 updatedIndex = startTokenId;\\n            uint256 end = updatedIndex + quantity;\\n\\n            if (safe && to.isContract()) {\\n                do {\\n                    emit Transfer(address(0), to, updatedIndex);\\n                    if (!_checkContractOnERC721Received(address(0), to, updatedIndex++, _data)) {\\n                        revert TransferToNonERC721ReceiverImplementer();\\n                    }\\n                } while (updatedIndex != end);\\n                // Reentrancy protection\\n                if (_currentIndex != startTokenId) revert();\\n            } else {\\n                do {\\n                    emit Transfer(address(0), to, updatedIndex++);\\n                } while (updatedIndex != end);\\n            }\\n            _currentIndex = updatedIndex;\\n        }\\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) private {\\n        TokenOwnership memory prevOwnership = _ownershipOf(tokenId);\\n\\n        if (prevOwnership.addr != from) revert TransferFromIncorrectOwner();\\n\\n        bool isApprovedOrOwner = (_msgSender() == from ||\\n            isApprovedForAll(from, _msgSender()) ||\\n            getApproved(tokenId) == _msgSender());\\n\\n        if (!isApprovedOrOwner) revert TransferCallerNotOwnerNorApproved();\\n        if (to == address(0)) revert TransferToZeroAddress();\\n\\n        _beforeTokenTransfers(from, to, tokenId, 1);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId, from);\\n\\n        // Underflow of the sender's balance is impossible because we check for\\n        // ownership above and the recipient's balance can't realistically overflow.\\n        // Counter overflow is incredibly unrealistic as tokenId would have to be 2**256.\\n        unchecked {\\n            _addressData[from].balance -= 1;\\n            _addressData[to].balance += 1;\\n\\n            TokenOwnership storage currSlot = _ownerships[tokenId];\\n            currSlot.addr = to;\\n            currSlot.startTimestamp = uint64(block.timestamp);\\n\\n            // If the ownership slot of tokenId+1 is not explicitly set, that means the transfer initiator owns it.\\n            // Set the slot of tokenId+1 explicitly in storage to maintain correctness for ownerOf(tokenId+1) calls.\\n            uint256 nextTokenId = tokenId + 1;\\n            TokenOwnership storage nextSlot = _ownerships[nextTokenId];\\n            if (nextSlot.addr == address(0)) {\\n                // This will suffice for checking _exists(nextTokenId),\\n                // as a burned slot cannot contain the zero address.\\n                if (nextTokenId != _currentIndex) {\\n                    nextSlot.addr = from;\\n                    nextSlot.startTimestamp = prevOwnership.startTimestamp;\\n                }\\n            }\\n        }\\n\\n        emit Transfer(from, to, tokenId);\\n        _afterTokenTransfers(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev This is equivalent to _burn(tokenId, false)\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        _burn(tokenId, false);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId, bool approvalCheck) internal virtual {\\n        TokenOwnership memory prevOwnership = _ownershipOf(tokenId);\\n\\n        address from = prevOwnership.addr;\\n\\n        if (approvalCheck) {\\n            bool isApprovedOrOwner = (_msgSender() == from ||\\n                isApprovedForAll(from, _msgSender()) ||\\n                getApproved(tokenId) == _msgSender());\\n\\n            if (!isApprovedOrOwner) revert TransferCallerNotOwnerNorApproved();\\n        }\\n\\n        _beforeTokenTransfers(from, address(0), tokenId, 1);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId, from);\\n\\n        // Underflow of the sender's balance is impossible because we check for\\n        // ownership above and the recipient's balance can't realistically overflow.\\n        // Counter overflow is incredibly unrealistic as tokenId would have to be 2**256.\\n        unchecked {\\n            AddressData storage addressData = _addressData[from];\\n            addressData.balance -= 1;\\n            addressData.numberBurned += 1;\\n\\n            // Keep track of who burned the token, and the timestamp of burning.\\n            TokenOwnership storage currSlot = _ownerships[tokenId];\\n            currSlot.addr = from;\\n            currSlot.startTimestamp = uint64(block.timestamp);\\n            currSlot.burned = true;\\n\\n            // If the ownership slot of tokenId+1 is not explicitly set, that means the burn initiator owns it.\\n            // Set the slot of tokenId+1 explicitly in storage to maintain correctness for ownerOf(tokenId+1) calls.\\n            uint256 nextTokenId = tokenId + 1;\\n            TokenOwnership storage nextSlot = _ownerships[nextTokenId];\\n            if (nextSlot.addr == address(0)) {\\n                // This will suffice for checking _exists(nextTokenId),\\n                // as a burned slot cannot contain the zero address.\\n                if (nextTokenId != _currentIndex) {\\n                    nextSlot.addr = from;\\n                    nextSlot.startTimestamp = prevOwnership.startTimestamp;\\n                }\\n            }\\n        }\\n\\n        emit Transfer(from, address(0), tokenId);\\n        _afterTokenTransfers(from, address(0), tokenId, 1);\\n\\n        // Overflow not possible, as _burnCounter cannot be exceed _currentIndex times.\\n        unchecked {\\n            _burnCounter++;\\n        }\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(\\n        address to,\\n        uint256 tokenId,\\n        address owner\\n    ) private {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(owner, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkContractOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n            return retval == IERC721Receiver(to).onERC721Received.selector;\\n        } catch (bytes memory reason) {\\n            if (reason.length == 0) {\\n                revert TransferToNonERC721ReceiverImplementer();\\n            } else {\\n                assembly {\\n                    revert(add(32, reason), mload(reason))\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before a set of serially-ordered token ids are about to be transferred. This includes minting.\\n     * And also called before burning one token.\\n     *\\n     * startTokenId - the first token id to be transferred\\n     * quantity - the amount to be transferred\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, `tokenId` will be burned by `from`.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _beforeTokenTransfers(\\n        address from,\\n        address to,\\n        uint256 startTokenId,\\n        uint256 quantity\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after a set of serially-ordered token ids have been transferred. This includes\\n     * minting.\\n     * And also called after one token has been burned.\\n     *\\n     * startTokenId - the first token id to be transferred\\n     * quantity - the amount to be transferred\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` has been\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` has been minted for `to`.\\n     * - When `to` is zero, `tokenId` has been burned by `from`.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _afterTokenTransfers(\\n        address from,\\n        address to,\\n        uint256 startTokenId,\\n        uint256 quantity\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x8ce51ff43bf1d6690341475ef3caf0929c43c63258fe56dc7fc301608ea9f30d\",\"license\":\"MIT\"},\"erc721a/contracts/extensions/ERC721AOwnersExplicit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.4;\\n\\nimport '../ERC721A.sol';\\n\\nerror AllOwnershipsHaveBeenSet();\\nerror QuantityMustBeNonZero();\\nerror NoTokensMintedYet();\\n\\nabstract contract ERC721AOwnersExplicit is ERC721A {\\n    uint256 public nextOwnerToExplicitlySet;\\n\\n    /**\\n     * @dev Explicitly set `owners` to eliminate loops in future calls of ownerOf().\\n     */\\n    function _setOwnersExplicit(uint256 quantity) internal {\\n        if (quantity == 0) revert QuantityMustBeNonZero();\\n        if (_currentIndex == _startTokenId()) revert NoTokensMintedYet();\\n        uint256 _nextOwnerToExplicitlySet = nextOwnerToExplicitlySet;\\n        if (_nextOwnerToExplicitlySet == 0) {\\n            _nextOwnerToExplicitlySet = _startTokenId();\\n        }\\n        if (_nextOwnerToExplicitlySet >= _currentIndex) revert AllOwnershipsHaveBeenSet();\\n\\n        // Index underflow is impossible.\\n        // Counter or index overflow is incredibly unrealistic.\\n        unchecked {\\n            uint256 endIndex = _nextOwnerToExplicitlySet + quantity - 1;\\n\\n            // Set the end index to be the last token index\\n            if (endIndex + 1 > _currentIndex) {\\n                endIndex = _currentIndex - 1;\\n            }\\n\\n            for (uint256 i = _nextOwnerToExplicitlySet; i <= endIndex; i++) {\\n                if (_ownerships[i].addr == address(0) && !_ownerships[i].burned) {\\n                    TokenOwnership memory ownership = _ownershipOf(i);\\n                    _ownerships[i].addr = ownership.addr;\\n                    _ownerships[i].startTimestamp = ownership.startTimestamp;\\n                }\\n            }\\n\\n            nextOwnerToExplicitlySet = endIndex + 1;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x87638daa1e525e20e73b587f5c921e94ef969d35843c225caa57194f64457bd7\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101006040523480156200001257600080fd5b50604051620030123803806200301283398101604081905262000035916200041d565b8851899089906200004e906002906020850190620002aa565b50805162000064906003906020840190620002aa565b505060008055506200007633620001cd565b6001600a5586620000d75760405162461bcd60e51b8152602060048201526031602482015260008051602062002ff2833981519152604482015270642d636f6c6c656374696f6e2d73697a6560781b60648201526084015b60405180910390fd5b86851115620001335760405162461bcd60e51b8152602060048201526032602482015260008051602062002ff2833981519152604482015271190b5c1c9bdb5bdd1a5bdb8b585b5bdd5b9d60721b6064820152608401620000ce565b60008411620001895760405162461bcd60e51b815260206004820152602c602482015260008051602062002ff283398151915260448201526b642d6d696e742d707269636560a01b6064820152608401620000ce565b60e087905260a0869052608085905260c0849052620001a8836200021f565b620001b3826200022e565b620001be816200023d565b50505050505050505062000508565b600980546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b620002296200024c565b600d55565b620002386200024c565b600e55565b620002476200024c565b600f55565b6009546001600160a01b03163314620002a85760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401620000ce565b565b828054620002b890620004cb565b90600052602060002090601f016020900481019282620002dc576000855562000327565b82601f10620002f757805160ff191683800117855562000327565b8280016001018555821562000327579182015b82811115620003275782518255916020019190600101906200030a565b506200033592915062000339565b5090565b5b808211156200033557600081556001016200033a565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200037857600080fd5b81516001600160401b038082111562000395576200039562000350565b604051601f8301601f19908116603f01168101908282118183101715620003c057620003c062000350565b81604052838152602092508683858801011115620003dd57600080fd5b600091505b83821015620004015785820183015181830184015290820190620003e2565b83821115620004135760008385830101525b9695505050505050565b60008060008060008060008060006101208a8c0312156200043d57600080fd5b89516001600160401b03808211156200045557600080fd5b620004638d838e0162000366565b9a5060208c01519150808211156200047a57600080fd5b50620004898c828d0162000366565b98505060408a0151965060608a0151955060808a0151945060a08a0151935060c08a0151925060e08a015191506101008a015190509295985092959850929598565b600181811c90821680620004e057607f821691505b602082108114156200050257634e487b7160e01b600052602260045260246000fd5b50919050565b60805160a05160c05160e051612a636200058f6000396000818161046f01528181610a3f01528181610d3c01526113fe01526000818161056801528181610b310152610e2801526000818161051401528181610ac101528181610cfc01528181610db801528181611242015261147a0152600081816105e601526111b90152612a636000f3fe60806040526004361061025c5760003560e01c80636352211e11610144578063ac446002116100b6578063c87b56dd1161007a578063c87b56dd1461071c578063d7224ba01461073c578063e7d5161114610752578063e985e9c514610772578063f2fde38b146107bb578063fd1e2962146107db57600080fd5b8063ac44600214610691578063b1f536fa146106a6578063b88d4fde146106c6578063ba2f59c8146106e6578063c6e62e0b1461070657600080fd5b806376972db21161010857806376972db2146105d45780638da5cb5b1461060857806395d89b41146106265780639c4dab521461063b578063a22cb46514610651578063a38643971461067157600080fd5b80636352211e146105365780636817c76c146105565780636c0360eb1461058a57806370a082311461059f578063715018a6146105bf57600080fd5b806327b3bf11116101dd57806342842e0e116101a157806342842e0e1461043d57806345c0f5331461045d57806348ce85841461049157806354fd4d50146104b157806355f804b3146104e2578063572849c41461050257600080fd5b806327b3bf11146103b457806328d7b276146103ca5780632d20fb60146103ea5780632db115441461040a578063421cc3371461041d57600080fd5b806318160ddd1161022457806318160ddd146103325780631b59169d146103555780631bdc608e1461036857806322212e2b1461037e57806323b872dd1461039457600080fd5b806301ffc9a71461026157806306fdde0314610296578063081812fc146102b8578063095ea7b3146102f0578063150c5c2614610312575b600080fd5b34801561026d57600080fd5b5061028161027c36600461229c565b6107fb565b60405190151581526020015b60405180910390f35b3480156102a257600080fd5b506102ab61084d565b60405161028d9190612311565b3480156102c457600080fd5b506102d86102d3366004612324565b6108df565b6040516001600160a01b03909116815260200161028d565b3480156102fc57600080fd5b5061031061030b366004612359565b610923565b005b34801561031e57600080fd5b5061031061032d366004612324565b6109b1565b34801561033e57600080fd5b50600154600054035b60405190815260200161028d565b610310610363366004612383565b6109be565b34801561037457600080fd5b50610347600f5481565b34801561038a57600080fd5b50610347600b5481565b3480156103a057600080fd5b506103106103af366004612405565b610c4b565b3480156103c057600080fd5b50610347600d5481565b3480156103d657600080fd5b506103106103e5366004612324565b610c56565b3480156103f657600080fd5b50610310610405366004612324565b610c63565b610310610418366004612324565b610ca4565b34801561042957600080fd5b50610310610438366004612324565b610ea1565b34801561044957600080fd5b50610310610458366004612405565b610eae565b34801561046957600080fd5b506103477f000000000000000000000000000000000000000000000000000000000000000081565b34801561049d57600080fd5b506103106104ac366004612324565b610ec9565b3480156104bd57600080fd5b506102ab604051806040016040528060058152602001640312e302e360dc1b81525081565b3480156104ee57600080fd5b506103106104fd366004612441565b610ed6565b34801561050e57600080fd5b506103477f000000000000000000000000000000000000000000000000000000000000000081565b34801561054257600080fd5b506102d8610551366004612324565b610f21565b34801561056257600080fd5b506103477f000000000000000000000000000000000000000000000000000000000000000081565b34801561059657600080fd5b506102ab610f33565b3480156105ab57600080fd5b506103476105ba3660046124b2565b610f42565b3480156105cb57600080fd5b50610310610f90565b3480156105e057600080fd5b506103477f000000000000000000000000000000000000000000000000000000000000000081565b34801561061457600080fd5b506009546001600160a01b03166102d8565b34801561063257600080fd5b506102ab610fa4565b34801561064757600080fd5b50610347600c5481565b34801561065d57600080fd5b5061031061066c3660046124cd565b610fb3565b34801561067d57600080fd5b5061034761068c366004612324565b611049565b34801561069d57600080fd5b50610310611084565b3480156106b257600080fd5b506103476106c13660046124b2565b611153565b3480156106d257600080fd5b506103106106e136600461251f565b61115e565b3480156106f257600080fd5b50610310610701366004612324565b6111af565b34801561071257600080fd5b50610347600e5481565b34801561072857600080fd5b506102ab610737366004612324565b6112f4565b34801561074857600080fd5b5061034760085481565b34801561075e57600080fd5b5061031061076d366004612383565b611386565b34801561077e57600080fd5b5061028161078d3660046125fa565b6001600160a01b03918216600090815260076020908152604080832093909416825291909152205460ff1690565b3480156107c757600080fd5b506103106107d63660046124b2565b611583565b3480156107e757600080fd5b506103106107f6366004612324565b6115fc565b60006001600160e01b031982166380ac58cd60e01b148061082c57506001600160e01b03198216635b5e139f60e01b145b8061084757506301ffc9a760e01b6001600160e01b03198316145b92915050565b60606002805461085c9061262d565b80601f01602080910402602001604051908101604052809291908181526020018280546108889061262d565b80156108d55780601f106108aa576101008083540402835291602001916108d5565b820191906000526020600020905b8154815290600101906020018083116108b857829003601f168201915b5050505050905090565b60006108ea82611609565b610907576040516333d1c03960e21b815260040160405180910390fd5b506000908152600660205260409020546001600160a01b031690565b600061092e82610f21565b9050806001600160a01b0316836001600160a01b031614156109635760405163250fdee360e21b815260040160405180910390fd5b336001600160a01b038216148015906109835750610981813361078d565b155b156109a1576040516367d9dca160e11b815260040160405180910390fd5b6109ac838383611634565b505050565b6109b9611690565b600f55565b6002600a5414156109ea5760405162461bcd60e51b81526004016109e190612668565b60405180910390fd5b6002600a55600e548015801590610a0057508042115b610a1c5760405162461bcd60e51b81526004016109e19061269f565b8484323314610a3d5760405162461bcd60e51b81526004016109e1906126d8565b7f0000000000000000000000000000000000000000000000000000000000000000610a7583610a6f6001546000540390565b906116ea565b1115610a935760405162461bcd60e51b81526004016109e190612713565b80610aa183610a6f336116f6565b1115610abf5760405162461bcd60e51b81526004016109e19061274f565b7f0000000000000000000000000000000000000000000000000000000000000000610aed83610a6f336116f6565b1115610b0b5760405162461bcd60e51b81526004016109e19061274f565b60008211610b2b5760405162461bcd60e51b81526004016109e19061279a565b86610b567f000000000000000000000000000000000000000000000000000000000000000082611724565b3414610b745760405162461bcd60e51b81526004016109e1906127e5565b60003411610b945760405162461bcd60e51b81526004016109e19061279a565b86338787600b54610c11838380806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250506040516001600160601b031960608a901b166020820152603481018a905285925060540190505b60405160208183030381529060405280519060200120611730565b610c2d5760405162461bcd60e51b81526004016109e19061281f565b610c37338e611746565b50506001600a555050505050505050505050565b6109ac83838361186b565b610c5e611690565b600b55565b610c6b611690565b6002600a541415610c8e5760405162461bcd60e51b81526004016109e190612668565b6002600a55610c9c81611a59565b506001600a55565b6002600a541415610cc75760405162461bcd60e51b81526004016109e190612668565b6002600a55600f548015801590610cdd57508042115b610cf95760405162461bcd60e51b81526004016109e19061269f565b817f0000000000000000000000000000000000000000000000000000000000000000323314610d3a5760405162461bcd60e51b81526004016109e1906126d8565b7f0000000000000000000000000000000000000000000000000000000000000000610d6c83610a6f6001546000540390565b1115610d8a5760405162461bcd60e51b81526004016109e190612713565b80610d9883610a6f336116f6565b1115610db65760405162461bcd60e51b81526004016109e19061274f565b7f0000000000000000000000000000000000000000000000000000000000000000610de483610a6f336116f6565b1115610e025760405162461bcd60e51b81526004016109e19061274f565b60008211610e225760405162461bcd60e51b81526004016109e19061279a565b83610e4d7f000000000000000000000000000000000000000000000000000000000000000082611724565b3414610e6b5760405162461bcd60e51b81526004016109e1906127e5565b60003411610e8b5760405162461bcd60e51b81526004016109e19061279a565b610e953386611746565b50506001600a55505050565b610ea9611690565b600d55565b6109ac8383836040518060200160405280600081525061115e565b610ed1611690565b600e55565b610ede611690565b610f1d82828080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611b9092505050565b5050565b6000610f2c82611ba3565b5192915050565b60606011805461085c9061262d565b60006001600160a01b038216610f6b576040516323d3ad8160e21b815260040160405180910390fd5b506001600160a01b03166000908152600560205260409020546001600160401b031690565b610f98611690565b610fa26000611cbd565b565b60606003805461085c9061262d565b6001600160a01b038216331415610fdd5760405163b06307db60e01b815260040160405180910390fd5b3360008181526007602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b600061105482611609565b6110715760405163963eb14f60e01b815260040160405180910390fd5b5060009081526010602052604090205490565b61108c611690565b6002600a5414156110af5760405162461bcd60e51b81526004016109e190612668565b6002600a55604051600090339047908381818185875af1925050503d80600081146110f6576040519150601f19603f3d011682016040523d82523d6000602084013e6110fb565b606091505b5050905080610c9c5760405162461bcd60e51b81526020600482015260306024820152600080516020612a0e83398151915260448201526f642d77697468647261772d6d6f6e657960801b60648201526084016109e1565b6000610847826116f6565b61116984848461186b565b6001600160a01b0383163b1515801561118b575061118984848484611d0f565b155b156111a9576040516368d2bf6b60e11b815260040160405180910390fd5b50505050565b6111b7611690565b7f00000000000000000000000000000000000000000000000000000000000000006111e982610a6f6001546000540390565b11156112405760405162461bcd60e51b81526020600482015260326024820152600080516020612a0e833981519152604482015271642d70726f6d6f74696f6e2d737570706c7960701b60648201526084016109e1565b7f000000000000000000000000000000000000000000000000000000000000000061126b8282611e07565b156112bf5760405162461bcd60e51b81526020600482015260306024820152600080516020612a0e83398151915260448201526f642d62617463682d6d756c7469706c6560801b60648201526084016109e1565b60006112cb8383611e13565b905060005b818110156111a9576112e23384611746565b806112ec81612872565b9150506112d0565b60606112ff82611609565b61131c57604051630a14c4b560e41b815260040160405180910390fd5b600061133360408051602081019091526000815290565b9050805160001415611354576040518060200160405280600081525061137f565b8061135e84611e1f565b60405160200161136f92919061288d565b6040516020818303038152906040525b9392505050565b6002600a5414156113a95760405162461bcd60e51b81526004016109e190612668565b6002600a55600d5480158015906113bf57508042115b6113db5760405162461bcd60e51b81526004016109e19061269f565b84843233146113fc5760405162461bcd60e51b81526004016109e1906126d8565b7f000000000000000000000000000000000000000000000000000000000000000061142e83610a6f6001546000540390565b111561144c5760405162461bcd60e51b81526004016109e190612713565b8061145a83610a6f336116f6565b11156114785760405162461bcd60e51b81526004016109e19061274f565b7f00000000000000000000000000000000000000000000000000000000000000006114a683610a6f336116f6565b11156114c45760405162461bcd60e51b81526004016109e19061274f565b600082116114e45760405162461bcd60e51b81526004016109e19061279a565b85338686600c5461154a838380806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250506040516001600160601b031960608a901b166020820152603481018a90528592506054019050610bf6565b6115665760405162461bcd60e51b81526004016109e19061281f565b611570338d611746565b50506001600a5550505050505050505050565b61158b611690565b6001600160a01b0381166115f05760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016109e1565b6115f981611cbd565b50565b611604611690565b600c55565b6000805482108015610847575050600090815260046020526040902054600160e01b900460ff161590565b60008281526006602052604080822080546001600160a01b0319166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b6009546001600160a01b03163314610fa25760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016109e1565b600061137f82846128bc565b6001600160a01b038116600090815260056020526040812054600160401b90046001600160401b0316610847565b600061137f82846128d4565b60008261173d8584611f1c565b14949350505050565b6117508282611f69565b600061175f6001546000540390565b9050600061176d8284611f83565b90506000836001600160401b0381111561178957611789612509565b6040519080825280602002602001820160405280156117b2578160200160208202803683370190505b50905060005b8481101561181e5760006117cc84836116ea565b905060006117d982611f8f565b9050808484815181106117ee576117ee6128f3565b6020908102919091018101919091526000928352601090526040909120558061181681612872565b9150506117b8565b50846001600160a01b03167f5cb27d2833c0b1f5f25192224a4f5c4573f3c2a9394c0a0a9a31c092e8879eb484868460405161185c93929190612909565b60405180910390a25050505050565b600061187682611ba3565b9050836001600160a01b031681600001516001600160a01b0316146118ad5760405162a1148160e81b815260040160405180910390fd5b6000336001600160a01b03861614806118cb57506118cb853361078d565b806118e65750336118db846108df565b6001600160a01b0316145b90508061190657604051632ce44b5f60e11b815260040160405180910390fd5b6001600160a01b03841661192d57604051633a954ecd60e21b815260040160405180910390fd5b61193960008487611634565b6001600160a01b038581166000908152600560209081526040808320805467ffffffffffffffff198082166001600160401b0392831660001901831617909255898616808652838620805493841693831660019081018416949094179055898652600490945282852080546001600160e01b031916909417600160a01b42909216919091021783558701808452922080549193909116611a0d576000548214611a0d57805460208601516001600160401b0316600160a01b026001600160e01b03199091166001600160a01b038a16171781555b50505082846001600160a01b0316866001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45b5050505050565b80611a77576040516356be441560e01b815260040160405180910390fd5b600054611a975760405163c0367cab60e01b815260040160405180910390fd5b60085480611aa3575060005b6000548110611ac5576040516370e89b1b60e01b815260040160405180910390fd5b6000548282016000198101911015611ae05750600054600019015b815b818111611b85576000818152600460205260409020546001600160a01b0316158015611b245750600081815260046020526040902054600160e01b900460ff16155b15611b7d576000611b3482611ba3565b80516000848152600460209081526040909120805491909301516001600160401b0316600160a01b026001600160e01b03199091166001600160a01b0390921691909117179055505b600101611ae2565b506001016008555050565b8051610f1d9060119060208401906121ed565b604080516060810182526000808252602082018190529181019190915281600054811015611ca457600081815260046020908152604091829020825160608101845290546001600160a01b0381168252600160a01b81046001600160401b031692820192909252600160e01b90910460ff16151591810182905290611ca25780516001600160a01b031615611c39579392505050565b5060001901600081815260046020908152604091829020825160608101845290546001600160a01b038116808352600160a01b82046001600160401b031693830193909352600160e01b900460ff1615159281019290925215611c9d579392505050565b611c39565b505b604051636f96cda160e11b815260040160405180910390fd5b600980546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b604051630a85bd0160e11b81526000906001600160a01b0385169063150b7a0290611d4490339089908890889060040161295e565b602060405180830381600087803b158015611d5e57600080fd5b505af1925050508015611d8e575060408051601f3d908101601f19168201909252611d8b9181019061299b565b60015b611de9573d808015611dbc576040519150601f19603f3d011682016040523d82523d6000602084013e611dc1565b606091505b508051611de1576040516368d2bf6b60e11b815260040160405180910390fd5b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490505b949350505050565b600061137f82846129ce565b600061137f82846129e2565b606081611e435750506040805180820190915260018152600360fc1b602082015290565b8160005b8115611e6d5780611e5781612872565b9150611e669050600a836129e2565b9150611e47565b6000816001600160401b03811115611e8757611e87612509565b6040519080825280601f01601f191660200182016040528015611eb1576020820181803683370190505b5090505b8415611dff57611ec66001836129f6565b9150611ed3600a866129ce565b611ede9060306128bc565b60f81b818381518110611ef357611ef36128f3565b60200101906001600160f81b031916908160001a905350611f15600a866129e2565b9450611eb5565b600081815b8451811015611f6157611f4d82868381518110611f4057611f406128f3565b6020026020010151611feb565b915080611f5981612872565b915050611f21565b509392505050565b610f1d82826040518060200160405280600081525061201a565b600061137f82846129f6565b60008132611f9e6001436129f6565b604051602001611fce9392919092835260609190911b6001600160601b0319166020830152603482015260540190565b604051602081830303815290604052805190602001209050919050565b600081831061200757600082815260208490526040902061137f565b600083815260208390526040902061137f565b6109ac83838360016000546001600160a01b03851661204b57604051622e076360e81b815260040160405180910390fd5b836120695760405163b562e8dd60e01b815260040160405180910390fd5b6001600160a01b038516600081815260056020908152604080832080546fffffffffffffffffffffffffffffffff1981166001600160401b038083168c018116918217600160401b67ffffffffffffffff1990941690921783900481168c01811690920217909155858452600490925290912080546001600160e01b031916909217600160a01b42909216919091021790558080850183801561211557506001600160a01b0387163b15155b1561219e575b60405182906001600160a01b038916906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a46121666000888480600101955088611d0f565b612183576040516368d2bf6b60e11b815260040160405180910390fd5b8082141561211b57826000541461219957600080fd5b6121e4565b5b6040516001830192906001600160a01b038916906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a48082141561219f575b50600055611a52565b8280546121f99061262d565b90600052602060002090601f01602090048101928261221b5760008555612261565b82601f1061223457805160ff1916838001178555612261565b82800160010185558215612261579182015b82811115612261578251825591602001919060010190612246565b5061226d929150612271565b5090565b5b8082111561226d5760008155600101612272565b6001600160e01b0319811681146115f957600080fd5b6000602082840312156122ae57600080fd5b813561137f81612286565b60005b838110156122d45781810151838201526020016122bc565b838111156111a95750506000910152565b600081518084526122fd8160208601602086016122b9565b601f01601f19169290920160200192915050565b60208152600061137f60208301846122e5565b60006020828403121561233657600080fd5b5035919050565b80356001600160a01b038116811461235457600080fd5b919050565b6000806040838503121561236c57600080fd5b6123758361233d565b946020939093013593505050565b6000806000806060858703121561239957600080fd5b843593506020850135925060408501356001600160401b03808211156123be57600080fd5b818701915087601f8301126123d257600080fd5b8135818111156123e157600080fd5b8860208260051b85010111156123f657600080fd5b95989497505060200194505050565b60008060006060848603121561241a57600080fd5b6124238461233d565b92506124316020850161233d565b9150604084013590509250925092565b6000806020838503121561245457600080fd5b82356001600160401b038082111561246b57600080fd5b818501915085601f83011261247f57600080fd5b81358181111561248e57600080fd5b8660208285010111156124a057600080fd5b60209290920196919550909350505050565b6000602082840312156124c457600080fd5b61137f8261233d565b600080604083850312156124e057600080fd5b6124e98361233d565b9150602083013580151581146124fe57600080fd5b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b6000806000806080858703121561253557600080fd5b61253e8561233d565b935061254c6020860161233d565b92506040850135915060608501356001600160401b038082111561256f57600080fd5b818701915087601f83011261258357600080fd5b81358181111561259557612595612509565b604051601f8201601f19908116603f011681019083821181831017156125bd576125bd612509565b816040528281528a60208487010111156125d657600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b6000806040838503121561260d57600080fd5b6126168361233d565b91506126246020840161233d565b90509250929050565b600181811c9082168061264157607f821691505b6020821081141561266257634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6020808252602b90820152600080516020612a0e83398151915260408201526a642d6d696e742d74696d6560a81b606082015260800190565b6020808252602d90820152600080516020612a0e83398151915260408201526c3216b6b4b73a16b1b0b63632b960991b606082015260800190565b6020808252602e90820152600080516020612a0e83398151915260408201526d642d746f74616c2d737570706c7960901b606082015260800190565b6020808252603b90820152600080516020612a0e83398151915260408201527f642d696e766f636174696f6e2d75707065722d626f756e646172790000000000606082015260800190565b6020808252603b90820152600080516020612a0e83398151915260408201527f642d696e766f636174696f6e2d6c6f7765722d626f756e646172790000000000606082015260800190565b6020808252602c90820152600080516020612a0e83398151915260408201526b642d6d696e742d76616c756560a01b606082015260800190565b6020808252602f90820152600080516020612a0e83398151915260408201526e3216b0b2323932b9b996b83937b7b360891b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b60006000198214156128865761288661285c565b5060010190565b6000835161289f8184602088016122b9565b8351908301906128b38183602088016122b9565b01949350505050565b600082198211156128cf576128cf61285c565b500190565b60008160001904831182151516156128ee576128ee61285c565b500290565b634e487b7160e01b600052603260045260246000fd5b6000606082018583526020858185015260606040850152818551808452608086019150828701935060005b8181101561295057845183529383019391830191600101612934565b509098975050505050505050565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090612991908301846122e5565b9695505050505050565b6000602082840312156129ad57600080fd5b815161137f81612286565b634e487b7160e01b600052601260045260246000fd5b6000826129dd576129dd6129b8565b500690565b6000826129f1576129f16129b8565b500490565b600082821015612a0857612a0861285c565b50039056fe52686170736f647943726561746f7247656e657261746976652f696e76616c69a264697066735822122025792731dfca2baf22969103bd34ed7fcbff20682debbf5eaa69e98841d01dc464736f6c6343000809003352686170736f647943726561746f7247656e657261746976652f696e76616c69",
  "deployedBytecode": "0x60806040526004361061025c5760003560e01c80636352211e11610144578063ac446002116100b6578063c87b56dd1161007a578063c87b56dd1461071c578063d7224ba01461073c578063e7d5161114610752578063e985e9c514610772578063f2fde38b146107bb578063fd1e2962146107db57600080fd5b8063ac44600214610691578063b1f536fa146106a6578063b88d4fde146106c6578063ba2f59c8146106e6578063c6e62e0b1461070657600080fd5b806376972db21161010857806376972db2146105d45780638da5cb5b1461060857806395d89b41146106265780639c4dab521461063b578063a22cb46514610651578063a38643971461067157600080fd5b80636352211e146105365780636817c76c146105565780636c0360eb1461058a57806370a082311461059f578063715018a6146105bf57600080fd5b806327b3bf11116101dd57806342842e0e116101a157806342842e0e1461043d57806345c0f5331461045d57806348ce85841461049157806354fd4d50146104b157806355f804b3146104e2578063572849c41461050257600080fd5b806327b3bf11146103b457806328d7b276146103ca5780632d20fb60146103ea5780632db115441461040a578063421cc3371461041d57600080fd5b806318160ddd1161022457806318160ddd146103325780631b59169d146103555780631bdc608e1461036857806322212e2b1461037e57806323b872dd1461039457600080fd5b806301ffc9a71461026157806306fdde0314610296578063081812fc146102b8578063095ea7b3146102f0578063150c5c2614610312575b600080fd5b34801561026d57600080fd5b5061028161027c36600461229c565b6107fb565b60405190151581526020015b60405180910390f35b3480156102a257600080fd5b506102ab61084d565b60405161028d9190612311565b3480156102c457600080fd5b506102d86102d3366004612324565b6108df565b6040516001600160a01b03909116815260200161028d565b3480156102fc57600080fd5b5061031061030b366004612359565b610923565b005b34801561031e57600080fd5b5061031061032d366004612324565b6109b1565b34801561033e57600080fd5b50600154600054035b60405190815260200161028d565b610310610363366004612383565b6109be565b34801561037457600080fd5b50610347600f5481565b34801561038a57600080fd5b50610347600b5481565b3480156103a057600080fd5b506103106103af366004612405565b610c4b565b3480156103c057600080fd5b50610347600d5481565b3480156103d657600080fd5b506103106103e5366004612324565b610c56565b3480156103f657600080fd5b50610310610405366004612324565b610c63565b610310610418366004612324565b610ca4565b34801561042957600080fd5b50610310610438366004612324565b610ea1565b34801561044957600080fd5b50610310610458366004612405565b610eae565b34801561046957600080fd5b506103477f000000000000000000000000000000000000000000000000000000000000000081565b34801561049d57600080fd5b506103106104ac366004612324565b610ec9565b3480156104bd57600080fd5b506102ab604051806040016040528060058152602001640312e302e360dc1b81525081565b3480156104ee57600080fd5b506103106104fd366004612441565b610ed6565b34801561050e57600080fd5b506103477f000000000000000000000000000000000000000000000000000000000000000081565b34801561054257600080fd5b506102d8610551366004612324565b610f21565b34801561056257600080fd5b506103477f000000000000000000000000000000000000000000000000000000000000000081565b34801561059657600080fd5b506102ab610f33565b3480156105ab57600080fd5b506103476105ba3660046124b2565b610f42565b3480156105cb57600080fd5b50610310610f90565b3480156105e057600080fd5b506103477f000000000000000000000000000000000000000000000000000000000000000081565b34801561061457600080fd5b506009546001600160a01b03166102d8565b34801561063257600080fd5b506102ab610fa4565b34801561064757600080fd5b50610347600c5481565b34801561065d57600080fd5b5061031061066c3660046124cd565b610fb3565b34801561067d57600080fd5b5061034761068c366004612324565b611049565b34801561069d57600080fd5b50610310611084565b3480156106b257600080fd5b506103476106c13660046124b2565b611153565b3480156106d257600080fd5b506103106106e136600461251f565b61115e565b3480156106f257600080fd5b50610310610701366004612324565b6111af565b34801561071257600080fd5b50610347600e5481565b34801561072857600080fd5b506102ab610737366004612324565b6112f4565b34801561074857600080fd5b5061034760085481565b34801561075e57600080fd5b5061031061076d366004612383565b611386565b34801561077e57600080fd5b5061028161078d3660046125fa565b6001600160a01b03918216600090815260076020908152604080832093909416825291909152205460ff1690565b3480156107c757600080fd5b506103106107d63660046124b2565b611583565b3480156107e757600080fd5b506103106107f6366004612324565b6115fc565b60006001600160e01b031982166380ac58cd60e01b148061082c57506001600160e01b03198216635b5e139f60e01b145b8061084757506301ffc9a760e01b6001600160e01b03198316145b92915050565b60606002805461085c9061262d565b80601f01602080910402602001604051908101604052809291908181526020018280546108889061262d565b80156108d55780601f106108aa576101008083540402835291602001916108d5565b820191906000526020600020905b8154815290600101906020018083116108b857829003601f168201915b5050505050905090565b60006108ea82611609565b610907576040516333d1c03960e21b815260040160405180910390fd5b506000908152600660205260409020546001600160a01b031690565b600061092e82610f21565b9050806001600160a01b0316836001600160a01b031614156109635760405163250fdee360e21b815260040160405180910390fd5b336001600160a01b038216148015906109835750610981813361078d565b155b156109a1576040516367d9dca160e11b815260040160405180910390fd5b6109ac838383611634565b505050565b6109b9611690565b600f55565b6002600a5414156109ea5760405162461bcd60e51b81526004016109e190612668565b60405180910390fd5b6002600a55600e548015801590610a0057508042115b610a1c5760405162461bcd60e51b81526004016109e19061269f565b8484323314610a3d5760405162461bcd60e51b81526004016109e1906126d8565b7f0000000000000000000000000000000000000000000000000000000000000000610a7583610a6f6001546000540390565b906116ea565b1115610a935760405162461bcd60e51b81526004016109e190612713565b80610aa183610a6f336116f6565b1115610abf5760405162461bcd60e51b81526004016109e19061274f565b7f0000000000000000000000000000000000000000000000000000000000000000610aed83610a6f336116f6565b1115610b0b5760405162461bcd60e51b81526004016109e19061274f565b60008211610b2b5760405162461bcd60e51b81526004016109e19061279a565b86610b567f000000000000000000000000000000000000000000000000000000000000000082611724565b3414610b745760405162461bcd60e51b81526004016109e1906127e5565b60003411610b945760405162461bcd60e51b81526004016109e19061279a565b86338787600b54610c11838380806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250506040516001600160601b031960608a901b166020820152603481018a905285925060540190505b60405160208183030381529060405280519060200120611730565b610c2d5760405162461bcd60e51b81526004016109e19061281f565b610c37338e611746565b50506001600a555050505050505050505050565b6109ac83838361186b565b610c5e611690565b600b55565b610c6b611690565b6002600a541415610c8e5760405162461bcd60e51b81526004016109e190612668565b6002600a55610c9c81611a59565b506001600a55565b6002600a541415610cc75760405162461bcd60e51b81526004016109e190612668565b6002600a55600f548015801590610cdd57508042115b610cf95760405162461bcd60e51b81526004016109e19061269f565b817f0000000000000000000000000000000000000000000000000000000000000000323314610d3a5760405162461bcd60e51b81526004016109e1906126d8565b7f0000000000000000000000000000000000000000000000000000000000000000610d6c83610a6f6001546000540390565b1115610d8a5760405162461bcd60e51b81526004016109e190612713565b80610d9883610a6f336116f6565b1115610db65760405162461bcd60e51b81526004016109e19061274f565b7f0000000000000000000000000000000000000000000000000000000000000000610de483610a6f336116f6565b1115610e025760405162461bcd60e51b81526004016109e19061274f565b60008211610e225760405162461bcd60e51b81526004016109e19061279a565b83610e4d7f000000000000000000000000000000000000000000000000000000000000000082611724565b3414610e6b5760405162461bcd60e51b81526004016109e1906127e5565b60003411610e8b5760405162461bcd60e51b81526004016109e19061279a565b610e953386611746565b50506001600a55505050565b610ea9611690565b600d55565b6109ac8383836040518060200160405280600081525061115e565b610ed1611690565b600e55565b610ede611690565b610f1d82828080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611b9092505050565b5050565b6000610f2c82611ba3565b5192915050565b60606011805461085c9061262d565b60006001600160a01b038216610f6b576040516323d3ad8160e21b815260040160405180910390fd5b506001600160a01b03166000908152600560205260409020546001600160401b031690565b610f98611690565b610fa26000611cbd565b565b60606003805461085c9061262d565b6001600160a01b038216331415610fdd5760405163b06307db60e01b815260040160405180910390fd5b3360008181526007602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b600061105482611609565b6110715760405163963eb14f60e01b815260040160405180910390fd5b5060009081526010602052604090205490565b61108c611690565b6002600a5414156110af5760405162461bcd60e51b81526004016109e190612668565b6002600a55604051600090339047908381818185875af1925050503d80600081146110f6576040519150601f19603f3d011682016040523d82523d6000602084013e6110fb565b606091505b5050905080610c9c5760405162461bcd60e51b81526020600482015260306024820152600080516020612a0e83398151915260448201526f642d77697468647261772d6d6f6e657960801b60648201526084016109e1565b6000610847826116f6565b61116984848461186b565b6001600160a01b0383163b1515801561118b575061118984848484611d0f565b155b156111a9576040516368d2bf6b60e11b815260040160405180910390fd5b50505050565b6111b7611690565b7f00000000000000000000000000000000000000000000000000000000000000006111e982610a6f6001546000540390565b11156112405760405162461bcd60e51b81526020600482015260326024820152600080516020612a0e833981519152604482015271642d70726f6d6f74696f6e2d737570706c7960701b60648201526084016109e1565b7f000000000000000000000000000000000000000000000000000000000000000061126b8282611e07565b156112bf5760405162461bcd60e51b81526020600482015260306024820152600080516020612a0e83398151915260448201526f642d62617463682d6d756c7469706c6560801b60648201526084016109e1565b60006112cb8383611e13565b905060005b818110156111a9576112e23384611746565b806112ec81612872565b9150506112d0565b60606112ff82611609565b61131c57604051630a14c4b560e41b815260040160405180910390fd5b600061133360408051602081019091526000815290565b9050805160001415611354576040518060200160405280600081525061137f565b8061135e84611e1f565b60405160200161136f92919061288d565b6040516020818303038152906040525b9392505050565b6002600a5414156113a95760405162461bcd60e51b81526004016109e190612668565b6002600a55600d5480158015906113bf57508042115b6113db5760405162461bcd60e51b81526004016109e19061269f565b84843233146113fc5760405162461bcd60e51b81526004016109e1906126d8565b7f000000000000000000000000000000000000000000000000000000000000000061142e83610a6f6001546000540390565b111561144c5760405162461bcd60e51b81526004016109e190612713565b8061145a83610a6f336116f6565b11156114785760405162461bcd60e51b81526004016109e19061274f565b7f00000000000000000000000000000000000000000000000000000000000000006114a683610a6f336116f6565b11156114c45760405162461bcd60e51b81526004016109e19061274f565b600082116114e45760405162461bcd60e51b81526004016109e19061279a565b85338686600c5461154a838380806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250506040516001600160601b031960608a901b166020820152603481018a90528592506054019050610bf6565b6115665760405162461bcd60e51b81526004016109e19061281f565b611570338d611746565b50506001600a5550505050505050505050565b61158b611690565b6001600160a01b0381166115f05760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016109e1565b6115f981611cbd565b50565b611604611690565b600c55565b6000805482108015610847575050600090815260046020526040902054600160e01b900460ff161590565b60008281526006602052604080822080546001600160a01b0319166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b6009546001600160a01b03163314610fa25760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016109e1565b600061137f82846128bc565b6001600160a01b038116600090815260056020526040812054600160401b90046001600160401b0316610847565b600061137f82846128d4565b60008261173d8584611f1c565b14949350505050565b6117508282611f69565b600061175f6001546000540390565b9050600061176d8284611f83565b90506000836001600160401b0381111561178957611789612509565b6040519080825280602002602001820160405280156117b2578160200160208202803683370190505b50905060005b8481101561181e5760006117cc84836116ea565b905060006117d982611f8f565b9050808484815181106117ee576117ee6128f3565b6020908102919091018101919091526000928352601090526040909120558061181681612872565b9150506117b8565b50846001600160a01b03167f5cb27d2833c0b1f5f25192224a4f5c4573f3c2a9394c0a0a9a31c092e8879eb484868460405161185c93929190612909565b60405180910390a25050505050565b600061187682611ba3565b9050836001600160a01b031681600001516001600160a01b0316146118ad5760405162a1148160e81b815260040160405180910390fd5b6000336001600160a01b03861614806118cb57506118cb853361078d565b806118e65750336118db846108df565b6001600160a01b0316145b90508061190657604051632ce44b5f60e11b815260040160405180910390fd5b6001600160a01b03841661192d57604051633a954ecd60e21b815260040160405180910390fd5b61193960008487611634565b6001600160a01b038581166000908152600560209081526040808320805467ffffffffffffffff198082166001600160401b0392831660001901831617909255898616808652838620805493841693831660019081018416949094179055898652600490945282852080546001600160e01b031916909417600160a01b42909216919091021783558701808452922080549193909116611a0d576000548214611a0d57805460208601516001600160401b0316600160a01b026001600160e01b03199091166001600160a01b038a16171781555b50505082846001600160a01b0316866001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45b5050505050565b80611a77576040516356be441560e01b815260040160405180910390fd5b600054611a975760405163c0367cab60e01b815260040160405180910390fd5b60085480611aa3575060005b6000548110611ac5576040516370e89b1b60e01b815260040160405180910390fd5b6000548282016000198101911015611ae05750600054600019015b815b818111611b85576000818152600460205260409020546001600160a01b0316158015611b245750600081815260046020526040902054600160e01b900460ff16155b15611b7d576000611b3482611ba3565b80516000848152600460209081526040909120805491909301516001600160401b0316600160a01b026001600160e01b03199091166001600160a01b0390921691909117179055505b600101611ae2565b506001016008555050565b8051610f1d9060119060208401906121ed565b604080516060810182526000808252602082018190529181019190915281600054811015611ca457600081815260046020908152604091829020825160608101845290546001600160a01b0381168252600160a01b81046001600160401b031692820192909252600160e01b90910460ff16151591810182905290611ca25780516001600160a01b031615611c39579392505050565b5060001901600081815260046020908152604091829020825160608101845290546001600160a01b038116808352600160a01b82046001600160401b031693830193909352600160e01b900460ff1615159281019290925215611c9d579392505050565b611c39565b505b604051636f96cda160e11b815260040160405180910390fd5b600980546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b604051630a85bd0160e11b81526000906001600160a01b0385169063150b7a0290611d4490339089908890889060040161295e565b602060405180830381600087803b158015611d5e57600080fd5b505af1925050508015611d8e575060408051601f3d908101601f19168201909252611d8b9181019061299b565b60015b611de9573d808015611dbc576040519150601f19603f3d011682016040523d82523d6000602084013e611dc1565b606091505b508051611de1576040516368d2bf6b60e11b815260040160405180910390fd5b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490505b949350505050565b600061137f82846129ce565b600061137f82846129e2565b606081611e435750506040805180820190915260018152600360fc1b602082015290565b8160005b8115611e6d5780611e5781612872565b9150611e669050600a836129e2565b9150611e47565b6000816001600160401b03811115611e8757611e87612509565b6040519080825280601f01601f191660200182016040528015611eb1576020820181803683370190505b5090505b8415611dff57611ec66001836129f6565b9150611ed3600a866129ce565b611ede9060306128bc565b60f81b818381518110611ef357611ef36128f3565b60200101906001600160f81b031916908160001a905350611f15600a866129e2565b9450611eb5565b600081815b8451811015611f6157611f4d82868381518110611f4057611f406128f3565b6020026020010151611feb565b915080611f5981612872565b915050611f21565b509392505050565b610f1d82826040518060200160405280600081525061201a565b600061137f82846129f6565b60008132611f9e6001436129f6565b604051602001611fce9392919092835260609190911b6001600160601b0319166020830152603482015260540190565b604051602081830303815290604052805190602001209050919050565b600081831061200757600082815260208490526040902061137f565b600083815260208390526040902061137f565b6109ac83838360016000546001600160a01b03851661204b57604051622e076360e81b815260040160405180910390fd5b836120695760405163b562e8dd60e01b815260040160405180910390fd5b6001600160a01b038516600081815260056020908152604080832080546fffffffffffffffffffffffffffffffff1981166001600160401b038083168c018116918217600160401b67ffffffffffffffff1990941690921783900481168c01811690920217909155858452600490925290912080546001600160e01b031916909217600160a01b42909216919091021790558080850183801561211557506001600160a01b0387163b15155b1561219e575b60405182906001600160a01b038916906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a46121666000888480600101955088611d0f565b612183576040516368d2bf6b60e11b815260040160405180910390fd5b8082141561211b57826000541461219957600080fd5b6121e4565b5b6040516001830192906001600160a01b038916906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a48082141561219f575b50600055611a52565b8280546121f99061262d565b90600052602060002090601f01602090048101928261221b5760008555612261565b82601f1061223457805160ff1916838001178555612261565b82800160010185558215612261579182015b82811115612261578251825591602001919060010190612246565b5061226d929150612271565b5090565b5b8082111561226d5760008155600101612272565b6001600160e01b0319811681146115f957600080fd5b6000602082840312156122ae57600080fd5b813561137f81612286565b60005b838110156122d45781810151838201526020016122bc565b838111156111a95750506000910152565b600081518084526122fd8160208601602086016122b9565b601f01601f19169290920160200192915050565b60208152600061137f60208301846122e5565b60006020828403121561233657600080fd5b5035919050565b80356001600160a01b038116811461235457600080fd5b919050565b6000806040838503121561236c57600080fd5b6123758361233d565b946020939093013593505050565b6000806000806060858703121561239957600080fd5b843593506020850135925060408501356001600160401b03808211156123be57600080fd5b818701915087601f8301126123d257600080fd5b8135818111156123e157600080fd5b8860208260051b85010111156123f657600080fd5b95989497505060200194505050565b60008060006060848603121561241a57600080fd5b6124238461233d565b92506124316020850161233d565b9150604084013590509250925092565b6000806020838503121561245457600080fd5b82356001600160401b038082111561246b57600080fd5b818501915085601f83011261247f57600080fd5b81358181111561248e57600080fd5b8660208285010111156124a057600080fd5b60209290920196919550909350505050565b6000602082840312156124c457600080fd5b61137f8261233d565b600080604083850312156124e057600080fd5b6124e98361233d565b9150602083013580151581146124fe57600080fd5b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b6000806000806080858703121561253557600080fd5b61253e8561233d565b935061254c6020860161233d565b92506040850135915060608501356001600160401b038082111561256f57600080fd5b818701915087601f83011261258357600080fd5b81358181111561259557612595612509565b604051601f8201601f19908116603f011681019083821181831017156125bd576125bd612509565b816040528281528a60208487010111156125d657600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b6000806040838503121561260d57600080fd5b6126168361233d565b91506126246020840161233d565b90509250929050565b600181811c9082168061264157607f821691505b6020821081141561266257634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6020808252602b90820152600080516020612a0e83398151915260408201526a642d6d696e742d74696d6560a81b606082015260800190565b6020808252602d90820152600080516020612a0e83398151915260408201526c3216b6b4b73a16b1b0b63632b960991b606082015260800190565b6020808252602e90820152600080516020612a0e83398151915260408201526d642d746f74616c2d737570706c7960901b606082015260800190565b6020808252603b90820152600080516020612a0e83398151915260408201527f642d696e766f636174696f6e2d75707065722d626f756e646172790000000000606082015260800190565b6020808252603b90820152600080516020612a0e83398151915260408201527f642d696e766f636174696f6e2d6c6f7765722d626f756e646172790000000000606082015260800190565b6020808252602c90820152600080516020612a0e83398151915260408201526b642d6d696e742d76616c756560a01b606082015260800190565b6020808252602f90820152600080516020612a0e83398151915260408201526e3216b0b2323932b9b996b83937b7b360891b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b60006000198214156128865761288661285c565b5060010190565b6000835161289f8184602088016122b9565b8351908301906128b38183602088016122b9565b01949350505050565b600082198211156128cf576128cf61285c565b500190565b60008160001904831182151516156128ee576128ee61285c565b500290565b634e487b7160e01b600052603260045260246000fd5b6000606082018583526020858185015260606040850152818551808452608086019150828701935060005b8181101561295057845183529383019391830191600101612934565b509098975050505050505050565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090612991908301846122e5565b9695505050505050565b6000602082840312156129ad57600080fd5b815161137f81612286565b634e487b7160e01b600052601260045260246000fd5b6000826129dd576129dd6129b8565b500690565b6000826129f1576129f16129b8565b500490565b600082821015612a0857612a0861285c565b50039056fe52686170736f647943726561746f7247656e657261746976652f696e76616c69a264697066735822122025792731dfca2baf22969103bd34ed7fcbff20682debbf5eaa69e98841d01dc464736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "claimMint(uint256,uint256,bytes32[])": {
        "details": "user must mint max invocations",
        "params": {
          "invocations": "number of tokens to mint",
          "proof": "merkle proof to prove address and token mint count are in tree"
        }
      },
      "constructor": {
        "params": {
          "_amountForPromotion": "promotional nfts count",
          "_collectionSize": "the total size of the collection",
          "_maxMintPerAddress": "max mintable tokens in public sale",
          "_mintPrice": "mint price of each nft"
        }
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "presaleMint(uint256,uint256,bytes32[])": {
        "params": {
          "invocations": "number of tokens to mint",
          "maxInvocation": "max number of invocations of the user",
          "proof": "merkle proof to prove address and token mint count are in tree"
        }
      },
      "promotionMint(uint256)": {
        "params": {
          "invocations": "the number of invocations to batch mint"
        }
      },
      "publicMint(uint256)": {
        "details": "user can only mint less than maxMintPerAddress of tokens",
        "params": {
          "invocations": "number of tokens to mint"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "setClaimMerkleRoot(bytes32)": {
        "params": {
          "_claimMerkleRoot": "root of the merklelized claimlist"
        }
      },
      "setClaimTime(uint256)": {
        "details": "this function can serve as an \"active\" and \"non-active\" sale statusset the values to uint256(-1) for \"non-active\" sale statusalso, pass contract ownership to address(0) to close sale forever",
        "params": {
          "_claimTime": "time the presale starts"
        }
      },
      "setOwnersExplicit(uint256)": {
        "details": "eliminate loops in future calls of ownerOf()"
      },
      "setPresaleMerkleRoot(bytes32)": {
        "params": {
          "_presaleMerkleRoot": "root of the merklelized whitelist"
        }
      },
      "setPresaleTime(uint256)": {
        "details": "this function can serve as an \"active\" and \"non-active\" sale statusset the values to uint256(-1) for \"non-active\" sale statusalso, pass contract ownership to address(0) to close sale forever",
        "params": {
          "_presaleTime": "time the presale starts"
        }
      },
      "setPublicTime(uint256)": {
        "details": "this function can serve as an \"active\" and \"non-active\" sale statusset the values to uint256(-1) for \"non-active\" sale statusalso, pass contract ownership to address(0) to close sale forever",
        "params": {
          "_publicTime": "time the presale starts"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "totalSupply()": {
        "details": "Burned tokens are calculated here, use _totalMinted() if you want to count just minted tokens."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "stateVariables": {
      "version": {
        "details": "Semantic versioning for this contract"
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "Created(address,uint256,uint256,bytes32[])": {
        "notice": "============ Events ============"
      }
    },
    "kind": "user",
    "methods": {
      "amountForPromotion()": {
        "notice": "promotional nfts count"
      },
      "baseURI()": {
        "notice": "core metadata baseURI used for tokens metadata"
      },
      "claimMerkleRoot()": {
        "notice": "ERC721-claim inclusion root"
      },
      "claimMint(uint256,uint256,bytes32[])": {
        "notice": "Allows claim of tokens if address is part of merkle tree"
      },
      "claimTime()": {
        "notice": "time the claim starts"
      },
      "collectionSize()": {
        "notice": "total number of tokens in the collection"
      },
      "constructor": {
        "notice": "Creates a new Creator contract"
      },
      "maxMintPerAddress()": {
        "notice": "max mintable tokens for each address in public"
      },
      "mintOf(address)": {
        "notice": "returns the number of mints of an address"
      },
      "mintPrice()": {
        "notice": "mint price of each nft; same for pre/public sale."
      },
      "presaleMerkleRoot()": {
        "notice": "ERC721-presale inclusion root"
      },
      "presaleMint(uint256,uint256,bytes32[])": {
        "notice": "Allows presale minting of tokens if address is part of merkle tree"
      },
      "presaleTime()": {
        "notice": "time the presale starts"
      },
      "promotionMint(uint256)": {
        "notice": "used by owner to mint promotional nfts"
      },
      "publicMint(uint256)": {
        "notice": "Allows public minting of tokens"
      },
      "publicTime()": {
        "notice": "time the public starts"
      },
      "setBaseURI(string)": {
        "notice": "set the new baseURI to change the tokens metadata"
      },
      "setClaimMerkleRoot(bytes32)": {
        "notice": "force override the merkle root used in presale mint"
      },
      "setClaimTime(uint256)": {
        "notice": "Set the claim time for the mint"
      },
      "setOwnersExplicit(uint256)": {
        "notice": "sets the owners quantity explicity"
      },
      "setPresaleMerkleRoot(bytes32)": {
        "notice": "force override the merkle root used in presale mint"
      },
      "setPresaleTime(uint256)": {
        "notice": "Set the presale time for the mint"
      },
      "setPublicTime(uint256)": {
        "notice": "Set the public time for the mint"
      },
      "version()": {
        "notice": "============ Semantic Versioning ============"
      },
      "withdrawMoney()": {
        "notice": "withdraws the ether in the contract to owner"
      }
    },
    "notice": "! 1. Removed IRandomizer.sol",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5074,
        "contract": "contracts/RhapsodyCreatorGenerative.sol:RhapsodyCreatorGenerative",
        "label": "_currentIndex",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 5076,
        "contract": "contracts/RhapsodyCreatorGenerative.sol:RhapsodyCreatorGenerative",
        "label": "_burnCounter",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 5078,
        "contract": "contracts/RhapsodyCreatorGenerative.sol:RhapsodyCreatorGenerative",
        "label": "_name",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 5080,
        "contract": "contracts/RhapsodyCreatorGenerative.sol:RhapsodyCreatorGenerative",
        "label": "_symbol",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 5085,
        "contract": "contracts/RhapsodyCreatorGenerative.sol:RhapsodyCreatorGenerative",
        "label": "_ownerships",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_struct(TokenOwnership)5063_storage)"
      },
      {
        "astId": 5090,
        "contract": "contracts/RhapsodyCreatorGenerative.sol:RhapsodyCreatorGenerative",
        "label": "_addressData",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_struct(AddressData)5072_storage)"
      },
      {
        "astId": 5094,
        "contract": "contracts/RhapsodyCreatorGenerative.sol:RhapsodyCreatorGenerative",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 5100,
        "contract": "contracts/RhapsodyCreatorGenerative.sol:RhapsodyCreatorGenerative",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 6340,
        "contract": "contracts/RhapsodyCreatorGenerative.sol:RhapsodyCreatorGenerative",
        "label": "nextOwnerToExplicitlySet",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 7,
        "contract": "contracts/RhapsodyCreatorGenerative.sol:RhapsodyCreatorGenerative",
        "label": "_owner",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 123,
        "contract": "contracts/RhapsodyCreatorGenerative.sol:RhapsodyCreatorGenerative",
        "label": "_status",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 3960,
        "contract": "contracts/RhapsodyCreatorGenerative.sol:RhapsodyCreatorGenerative",
        "label": "presaleMerkleRoot",
        "offset": 0,
        "slot": "11",
        "type": "t_bytes32"
      },
      {
        "astId": 3963,
        "contract": "contracts/RhapsodyCreatorGenerative.sol:RhapsodyCreatorGenerative",
        "label": "claimMerkleRoot",
        "offset": 0,
        "slot": "12",
        "type": "t_bytes32"
      },
      {
        "astId": 3966,
        "contract": "contracts/RhapsodyCreatorGenerative.sol:RhapsodyCreatorGenerative",
        "label": "claimTime",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 3969,
        "contract": "contracts/RhapsodyCreatorGenerative.sol:RhapsodyCreatorGenerative",
        "label": "presaleTime",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 3972,
        "contract": "contracts/RhapsodyCreatorGenerative.sol:RhapsodyCreatorGenerative",
        "label": "publicTime",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 3977,
        "contract": "contracts/RhapsodyCreatorGenerative.sol:RhapsodyCreatorGenerative",
        "label": "_tokenHash",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_uint256,t_bytes32)"
      },
      {
        "astId": 3979,
        "contract": "contracts/RhapsodyCreatorGenerative.sol:RhapsodyCreatorGenerative",
        "label": "_baseTokenURI",
        "offset": 0,
        "slot": "17",
        "type": "t_string_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_struct(AddressData)5072_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ERC721A.AddressData)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressData)5072_storage"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_uint256,t_struct(TokenOwnership)5063_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ERC721A.TokenOwnership)",
        "numberOfBytes": "32",
        "value": "t_struct(TokenOwnership)5063_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AddressData)5072_storage": {
        "encoding": "inplace",
        "label": "struct ERC721A.AddressData",
        "members": [
          {
            "astId": 5065,
            "contract": "contracts/RhapsodyCreatorGenerative.sol:RhapsodyCreatorGenerative",
            "label": "balance",
            "offset": 0,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 5067,
            "contract": "contracts/RhapsodyCreatorGenerative.sol:RhapsodyCreatorGenerative",
            "label": "numberMinted",
            "offset": 8,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 5069,
            "contract": "contracts/RhapsodyCreatorGenerative.sol:RhapsodyCreatorGenerative",
            "label": "numberBurned",
            "offset": 16,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 5071,
            "contract": "contracts/RhapsodyCreatorGenerative.sol:RhapsodyCreatorGenerative",
            "label": "aux",
            "offset": 24,
            "slot": "0",
            "type": "t_uint64"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(TokenOwnership)5063_storage": {
        "encoding": "inplace",
        "label": "struct ERC721A.TokenOwnership",
        "members": [
          {
            "astId": 5058,
            "contract": "contracts/RhapsodyCreatorGenerative.sol:RhapsodyCreatorGenerative",
            "label": "addr",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 5060,
            "contract": "contracts/RhapsodyCreatorGenerative.sol:RhapsodyCreatorGenerative",
            "label": "startTimestamp",
            "offset": 20,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 5062,
            "contract": "contracts/RhapsodyCreatorGenerative.sol:RhapsodyCreatorGenerative",
            "label": "burned",
            "offset": 28,
            "slot": "0",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}