{
  "address": "0xA1b88B243053aAC8548A230b2B3D657827ee68Cc",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_baseURI",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_collectionSize",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxPublicBatchPerAddress",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amountForPromotion",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_mintPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_claimTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_presaleTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_publicTime",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AllOwnershipsHaveBeenSet",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ApprovalCallerNotOwnerNorApproved",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ApprovalQueryForNonexistentToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ApprovalToCurrentOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ApproveToCaller",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BalanceQueryForZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MintToZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MintZeroQuantity",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoTokensMintedYet",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OwnerQueryForNonexistentToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "QuantityMustBeNonZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferCallerNotOwnerNorApproved",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferFromIncorrectOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferToNonERC721ReceiverImplementer",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferToZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "URIQueryForNonexistentToken",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Created",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "amountForPromotion",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimMerkleRoot",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "invocations",
          "type": "uint256"
        },
        {
          "internalType": "bytes32[]",
          "name": "proof",
          "type": "bytes32[]"
        }
      ],
      "name": "claimMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collectionSize",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxPublicBatchPerAddress",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "mintOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextOwnerToExplicitlySet",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "presaleMerkleRoot",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "invocations",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxInvocation",
          "type": "uint256"
        },
        {
          "internalType": "bytes32[]",
          "name": "proof",
          "type": "bytes32[]"
        }
      ],
      "name": "presaleMint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "presaleTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "invocations",
          "type": "uint256"
        }
      ],
      "name": "promotionMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "invocations",
          "type": "uint256"
        }
      ],
      "name": "publicMint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "publicTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "newBaseURI",
          "type": "string"
        }
      ],
      "name": "setBaseURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_claimMerkleRoot",
          "type": "bytes32"
        }
      ],
      "name": "setClaimMerkleRoot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_claimTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_presaleTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_publicTime",
          "type": "uint256"
        }
      ],
      "name": "setMintTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        }
      ],
      "name": "setOwnersExplicit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_presaleMerkleRoot",
          "type": "bytes32"
        }
      ],
      "name": "setPresaleMerkleRoot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawMoney",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xe8ed4dd3d8365e31e6ecb3bcaf7dd7f41db853a6311c8b4a354e756e061b9e05",
  "receipt": {
    "to": null,
    "from": "0xf8cA77ED09429aDe0d5C01ADB1D284C45324F608",
    "contractAddress": "0xA1b88B243053aAC8548A230b2B3D657827ee68Cc",
    "transactionIndex": 73,
    "gasUsed": "2516020",
    "logsBloom": "0x
    "blockHash": "0xc682f1b2b7ce1b49823ce765273709f9d38b6e9adaa6760136c8a33eb023c7ed",
    "transactionHash": "0xe8ed4dd3d8365e31e6ecb3bcaf7dd7f41db853a6311c8b4a354e756e061b9e05",
    "logs": [
      {
        "transactionIndex": 73,
        "blockNumber": 8280496,
        "transactionHash": "0xe8ed4dd3d8365e31e6ecb3bcaf7dd7f41db853a6311c8b4a354e756e061b9e05",
        "address": "0xA1b88B243053aAC8548A230b2B3D657827ee68Cc",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f8ca77ed09429ade0d5c01adb1d284c45324f608"
        ],
        "data": "0x",
        "logIndex": 195,
        "blockHash": "0xc682f1b2b7ce1b49823ce765273709f9d38b6e9adaa6760136c8a33eb023c7ed"
      }
    ],
    "blockNumber": 8280496,
    "cumulativeGasUsed": "10410069",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "Rhapsody",
    "RHY",
    "https://some-random.api/",
    1111,
    2,
    40,
    "333000000000000000",
    1670819200,
    1670819400,
    1670823000
  ],
  "numDeployments": 1,
  "solcInputHash": "56839b07babad4f58726ac7b477c42ec",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_baseURI\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_collectionSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxPublicBatchPerAddress\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountForPromotion\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_mintPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_claimTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_presaleTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_publicTime\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AllOwnershipsHaveBeenSet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalToCurrentOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApproveToCaller\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BalanceQueryForZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintZeroQuantity\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoTokensMintedYet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnerQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"QuantityMustBeNonZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFromIncorrectOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToNonERC721ReceiverImplementer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"URIQueryForNonexistentToken\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Created\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"amountForPromotion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimMerkleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"invocations\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"claimMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectionSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPublicBatchPerAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"mintOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextOwnerToExplicitlySet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presaleMerkleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"invocations\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxInvocation\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"presaleMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presaleTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"invocations\",\"type\":\"uint256\"}],\"name\":\"promotionMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"invocations\",\"type\":\"uint256\"}],\"name\":\"publicMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newBaseURI\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_claimMerkleRoot\",\"type\":\"bytes32\"}],\"name\":\"setClaimMerkleRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_claimTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_presaleTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_publicTime\",\"type\":\"uint256\"}],\"name\":\"setMintTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"setOwnersExplicit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_presaleMerkleRoot\",\"type\":\"bytes32\"}],\"name\":\"setPresaleMerkleRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawMoney\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"claimMint(uint256,bytes32[])\":{\"details\":\"user must mint max invocations\",\"params\":{\"invocations\":\"number of tokens to mint\",\"proof\":\"merkle proof to prove address and token mint count are in tree\"}},\"constructor\":{\"params\":{\"_amountForPromotion\":\"promotional nfts count\",\"_collectionSize\":\"the total size of the collection\",\"_maxPublicBatchPerAddress\":\"max mintable tokens in public sale\",\"_mintPrice\":\"mint price of each nft\"}},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"presaleMint(uint256,uint256,bytes32[])\":{\"params\":{\"invocations\":\"number of tokens to mint\",\"maxInvocation\":\"max number of invocations of the user\",\"proof\":\"merkle proof to prove address and token mint count are in tree\"}},\"promotionMint(uint256)\":{\"params\":{\"invocations\":\"the number of invocations to batch mint\"}},\"publicMint(uint256)\":{\"details\":\"user can only mint less than maxPublicBatchPerAddress of tokens\",\"params\":{\"invocations\":\"number of tokens to mint\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"setClaimMerkleRoot(bytes32)\":{\"params\":{\"_claimMerkleRoot\":\"root of the merklelized claimlist\"}},\"setMintTime(uint256,uint256,uint256)\":{\"details\":\"this function can serve as an \\\"active\\\" and \\\"non-active\\\" sale statusset the values to uint256(-1) for \\\"non-active\\\" sale statusalso, pass contract ownership to address(0) to close sale forever\",\"params\":{\"_presaleTime\":\"time the presale starts\",\"_publicTime\":\"time the public sale starts\"}},\"setOwnersExplicit(uint256)\":{\"details\":\"eliminate loops in future calls of ownerOf()\"},\"setPresaleMerkleRoot(bytes32)\":{\"params\":{\"_presaleMerkleRoot\":\"root of the merklelized whitelist\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"totalSupply()\":{\"details\":\"Burned tokens are calculated here, use _totalMinted() if you want to count just minted tokens.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"version\":{\"details\":\"Semantic versioning for this contract\"}},\"version\":1},\"userdoc\":{\"events\":{\"Created(address,uint256)\":{\"notice\":\"============ Events ============\"}},\"kind\":\"user\",\"methods\":{\"amountForPromotion()\":{\"notice\":\"promotional nfts count\"},\"baseURI()\":{\"notice\":\"core metadata baseURI used for tokens metadata\"},\"claimMerkleRoot()\":{\"notice\":\"ERC721-presale inclusion root\"},\"claimMint(uint256,bytes32[])\":{\"notice\":\"Allows claim of tokens if address is part of merkle tree\"},\"claimTime()\":{\"notice\":\"time the claim starts\"},\"collectionSize()\":{\"notice\":\"total number of tokens in the collection\"},\"constructor\":{\"notice\":\"Creates a new Creator contract\"},\"maxPublicBatchPerAddress()\":{\"notice\":\"max mintable tokens for each address in public\"},\"mintOf(address)\":{\"notice\":\"returns the number of mints of an address\"},\"mintPrice()\":{\"notice\":\"mint price of each nft; same for pre/public sale.\"},\"presaleMerkleRoot()\":{\"notice\":\"ERC721-presale inclusion root\"},\"presaleMint(uint256,uint256,bytes32[])\":{\"notice\":\"Allows presale minting of tokens if address is part of merkle tree\"},\"presaleTime()\":{\"notice\":\"time the presale starts;\"},\"promotionMint(uint256)\":{\"notice\":\"used by owner to mint promotional nfts\"},\"publicMint(uint256)\":{\"notice\":\"Allows public minting of tokens\"},\"publicTime()\":{\"notice\":\"time the public starts;\"},\"setBaseURI(string)\":{\"notice\":\"set the new baseURI to change the tokens metadata\"},\"setClaimMerkleRoot(bytes32)\":{\"notice\":\"force override the merkle root used in presale mint\"},\"setMintTime(uint256,uint256,uint256)\":{\"notice\":\"Set the time for the mint\"},\"setOwnersExplicit(uint256)\":{\"notice\":\"sets the owners quantity explicity\"},\"setPresaleMerkleRoot(bytes32)\":{\"notice\":\"force override the merkle root used in presale mint\"},\"version()\":{\"notice\":\"============ Semantic Versioning ============\"},\"withdrawMoney()\":{\"notice\":\"withdraws the ether in the contract to owner\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/RhapsodyCreatorBasic.sol\":\"RhapsodyCreatorBasic\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x0b606994df12f0ce35f6d2f6dcdde7e55e6899cdef7e00f180980caa81e3844e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xed6a749c5373af398105ce6ee3ac4763aa450ea7285d268c85d9eeca809cdb1f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Tree proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {verify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function verifyCalldata(\\n        bytes32[] calldata proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProofCalldata(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns true if the `leaves` can be proved to be a part of a Merkle tree defined by\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerify(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProof(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {multiProofVerify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerifyCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the root of a tree reconstructed from `leaves` and the sibling nodes in `proof`,\\n     * consuming from one or the other at each step according to the instructions given by\\n     * `proofFlags`.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProof(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processMultiProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProofCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x596ed72a251d391b814a4aa19d7acb02ebdcc92ba27d3fff74a6f0c158b12ab7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"contracts/RhapsodyCreatorBasic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"erc721a/contracts/ERC721A.sol\\\";\\nimport \\\"erc721a/contracts/extensions/ERC721AOwnersExplicit.sol\\\";\\n\\ncontract RhapsodyCreatorBasic is ERC721A, ERC721AOwnersExplicit, Ownable, ReentrancyGuard {\\n    /// ============ Semantic Versioning ============\\n    /// @dev Semantic versioning for this contract\\n    string public constant version = \\\"1.0.0\\\";\\n\\n    /// ============ Libraries ============\\n\\n    /// @notice safe math for arithmetic operations\\n    using SafeMath for uint256;\\n\\n    /// ============ Events ============\\n\\n    event Created(address indexed to, uint256 amount);\\n\\n    /// ============ Immutable storage ============\\n\\n    /// @notice promotional nfts count\\n    uint256 public immutable amountForPromotion;\\n\\n    /// @notice max mintable tokens for each address in public\\n    uint256 public immutable maxPublicBatchPerAddress;\\n\\n    /// @notice mint price of each nft; same for pre/public sale.\\n    uint256 public immutable mintPrice;\\n\\n    /// @notice total number of tokens in the collection\\n    uint256 public immutable collectionSize;\\n\\n    // ============ Mutable storage ============\\n\\n    /// @notice ERC721-presale inclusion root\\n    bytes32 public claimMerkleRoot;\\n\\n    /// @notice ERC721-presale inclusion root\\n    bytes32 public presaleMerkleRoot;\\n\\n    /// @notice time the claim starts\\n    uint256 public claimTime;\\n\\n    /// @notice time the presale starts;\\n    uint256 public presaleTime;\\n\\n    /// @notice time the public starts;\\n    uint256 public publicTime;\\n\\n    // ============ Private storage ============\\n\\n    string private _baseTokenURI;\\n\\n    /// ============ Constructor ============\\n\\n    /// @notice Creates a new Creator contract\\n    /// @param _collectionSize the total size of the collection\\n    /// @param _maxPublicBatchPerAddress max mintable tokens in public sale\\n    /// @param _amountForPromotion promotional nfts count\\n    /// @param _mintPrice mint price of each nft\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        string memory _baseURI,\\n        uint256 _collectionSize,\\n        uint256 _maxPublicBatchPerAddress,\\n        uint256 _amountForPromotion,\\n        uint256 _mintPrice,\\n        uint256 _claimTime,\\n        uint256 _presaleTime,\\n        uint256 _publicTime\\n    ) ERC721A(_name, _symbol) {\\n        require(_collectionSize > 0, \\\"RhapsodyCreator/invalid-collection-size\\\");\\n        require(_amountForPromotion <= _collectionSize, \\\"RhapsodyCreator/invalid-promotion-amount\\\");\\n        require(_mintPrice > 0, \\\"RhapsodyCreator/invalid-mint-price\\\");\\n\\n        collectionSize = _collectionSize;\\n        maxPublicBatchPerAddress = _maxPublicBatchPerAddress;\\n        amountForPromotion = _amountForPromotion;\\n        mintPrice = _mintPrice;\\n\\n        _setBaseURI(_baseURI);\\n        _setMintTime(_claimTime, _presaleTime, _publicTime);\\n    }\\n\\n    /// =========== Sale ===========\\n\\n    /// @notice Allows claim of tokens if address is part of merkle tree\\n    /// @param invocations number of tokens to mint\\n    /// @param proof merkle proof to prove address and token mint count are in tree\\n    /// @dev user must mint max invocations\\n    function claimMint(uint256 invocations, bytes32[] calldata proof)\\n        external\\n        nonReentrant\\n        isMintLive(claimTime)\\n        isMintValid(invocations, invocations)\\n        isMintProofValid(invocations, msg.sender, proof, claimMerkleRoot)\\n    {\\n        _mintMany(msg.sender, invocations);\\n    }\\n\\n    /// @notice Allows presale minting of tokens if address is part of merkle tree\\n    /// @param invocations number of tokens to mint\\n    /// @param maxInvocation max number of invocations of the user\\n    /// @param proof merkle proof to prove address and token mint count are in tree\\n    function presaleMint(\\n        uint256 invocations,\\n        uint256 maxInvocation,\\n        bytes32[] calldata proof\\n    )\\n        external\\n        payable\\n        nonReentrant\\n        isMintLive(presaleTime)\\n        isMintValid(invocations, maxInvocation)\\n        isMintPricingValid(invocations)\\n        isMintProofValid(maxInvocation, msg.sender, proof, presaleMerkleRoot)\\n    {\\n        _mintMany(msg.sender, invocations);\\n    }\\n\\n    /// @notice Allows public minting of tokens\\n    /// @param invocations number of tokens to mint\\n    /// @dev user can only mint less than maxPublicBatchPerAddress of tokens\\n    function publicMint(uint256 invocations)\\n        external\\n        payable\\n        nonReentrant\\n        isMintLive(publicTime)\\n        isMintValid(invocations, maxPublicBatchPerAddress)\\n        isMintPricingValid(invocations)\\n    {\\n        _mintMany(msg.sender, invocations);\\n    }\\n\\n    /// @notice mint tokens in batches\\n    /// @param to address to mint to\\n    /// @param invocations number of tokens to mint\\n    function _mintMany(address to, uint256 invocations) internal {\\n        _safeMint(to, invocations);\\n        emit Created(to, invocations);\\n    }\\n\\n    /// @notice Set the time for the mint\\n    /// @param _presaleTime time the presale starts\\n    /// @param _publicTime time the public sale starts\\n    /// @dev this function can serve as an \\\"active\\\" and \\\"non-active\\\" sale status\\n    /// @dev set the values to uint256(-1) for \\\"non-active\\\" sale status\\n    /// @dev also, pass contract ownership to address(0) to close sale forever\\n    function setMintTime(\\n        uint256 _claimTime,\\n        uint256 _presaleTime,\\n        uint256 _publicTime\\n    ) public onlyOwner {\\n        _setMintTime(_claimTime, _presaleTime, _publicTime);\\n    }\\n\\n    /// @notice Set the internal time for the mint\\n    /// @param _claimTime time the claim starts\\n    /// @param _presaleTime time the presale starts\\n    /// @param _publicTime time the public sale starts\\n    /// @dev this function can serve as an \\\"active\\\" and \\\"non-active\\\" sale status\\n    /// @dev set the values to uint256(-1) for \\\"non-active\\\" sale status\\n    /// @dev also, pass contract ownership to address(0) to close sale forever\\n    function _setMintTime(\\n        uint256 _claimTime,\\n        uint256 _presaleTime,\\n        uint256 _publicTime\\n    ) internal {\\n        require(_presaleTime > _claimTime, \\\"RhapsodyCreator/invalid-presale-time\\\");\\n        require(_publicTime > _presaleTime, \\\"RhapsodyCreator/invalid-public-time\\\");\\n\\n        claimTime = _claimTime;\\n        presaleTime = _presaleTime;\\n        publicTime = _publicTime;\\n    }\\n\\n    /// @notice force override the merkle root used in presale mint\\n    /// @param _presaleMerkleRoot root of the merklelized whitelist\\n    function setPresaleMerkleRoot(bytes32 _presaleMerkleRoot) public onlyOwner {\\n        presaleMerkleRoot = _presaleMerkleRoot;\\n    }\\n\\n    /// @notice force override the merkle root used in presale mint\\n    /// @param _claimMerkleRoot root of the merklelized claimlist\\n    function setClaimMerkleRoot(bytes32 _claimMerkleRoot) public onlyOwner {\\n        claimMerkleRoot = _claimMerkleRoot;\\n    }\\n\\n    /// @notice ensures that minters need valid invocations + value to mint\\n    modifier isMintValid(uint256 invocations, uint256 maxInvocation) {\\n        require(tx.origin == msg.sender, \\\"RhapsodyCreatorGenerative/invalid-mint-caller\\\");\\n        require(totalSupply().add(invocations) <= collectionSize, \\\"RhapsodyCreatorGenerative/invalid-total-supply\\\");\\n        require(\\n            _mintOf(msg.sender).add(invocations) <= maxInvocation,\\n            \\\"RhapsodyCreatorGenerative/invalid-invocation-upper-boundary\\\"\\n        );\\n        require(invocations > 0, \\\"RhapsodyCreatorGenerative/invalid-invocation-lower-boundary\\\");\\n        _;\\n    }\\n\\n    modifier isMintPricingValid(uint256 invocations) {\\n        require(msg.value == mintPrice.mul(invocations), \\\"RhapsodyCreatorGenerative/invalid-mint-value\\\");\\n        require(msg.value > 0, \\\"RhapsodyCreatorGenerative/invalid-invocation-lower-boundary\\\");\\n        _;\\n    }\\n\\n    /// @notice used to check the time of mint of presale and public\\n    /// @dev only publicTime/presaleTime variable is used here; see publicMint/presaleMint function\\n    /// @dev time > 0 is optimization when the sale is not live; r.e  mint \\\"not-active\\\" mode\\n    modifier isMintLive(uint256 time) {\\n        require(time > 0 && block.timestamp > time, \\\"RhapsodyCreatorGenerative/invalid-mint-time\\\");\\n        _;\\n    }\\n\\n    modifier isMintProofValid(\\n        uint256 invocations,\\n        address prover,\\n        bytes32[] calldata proof,\\n        bytes32 merkleRoot\\n    ) {\\n        require(\\n            MerkleProof.verify(proof, merkleRoot, keccak256(abi.encodePacked(prover, invocations))),\\n            \\\"RhapsodyCreatorGenerative/invalid-address-proof\\\"\\n        );\\n        _;\\n    }\\n\\n    /// =========== Metadata ===========\\n\\n    /// @notice set the new baseURI to change the tokens metadata\\n    function setBaseURI(string calldata newBaseURI) external onlyOwner {\\n        _setBaseURI(newBaseURI);\\n    }\\n\\n    /// @notice set the internal baseURI to change the tokens metadata\\n    function _setBaseURI(string memory newBaseURI) internal virtual {\\n        _baseTokenURI = newBaseURI;\\n    }\\n\\n    /// @notice core metadata baseURI used for tokens metadata\\n    function baseURI() public view returns (string memory) {\\n        return _baseTokenURI;\\n    }\\n\\n    /// =========== Dev ===========\\n\\n    /// @notice used by owner to mint promotional nfts\\n    /// @param invocations the number of invocations to batch mint\\n    function promotionMint(uint256 invocations) external onlyOwner {\\n        require(totalSupply().add(invocations) <= amountForPromotion, \\\"RhapsodyCreator/invalid-promotion-supply\\\");\\n        uint256 maxBatchSize = maxPublicBatchPerAddress;\\n        require(invocations.mod(maxBatchSize) == 0, \\\"RhapsodyCreator/invalid-batch-multiple\\\");\\n        uint256 blocks = invocations.div(maxBatchSize);\\n        for (uint256 i = 0; i < blocks; i++) {\\n            _safeMint(msg.sender, maxBatchSize);\\n        }\\n        emit Created(msg.sender, invocations);\\n    }\\n\\n    /// @notice withdraws the ether in the contract to owner\\n    function withdrawMoney() external onlyOwner nonReentrant {\\n        (bool success, ) = msg.sender.call{ value: address(this).balance }(\\\"\\\");\\n        require(success, \\\"RhapsodyCreator/invalid-withdraw-money\\\");\\n    }\\n\\n    /// @notice returns the current block timestamp\\n    /// @dev this function is overriden in testing for time-dependent testing\\n    function _currentTime() internal view virtual returns (uint256) {\\n        return block.timestamp;\\n    }\\n\\n    /// @notice sets the owners quantity explicity\\n    /// @dev eliminate loops in future calls of ownerOf()\\n    function setOwnersExplicit(uint256 quantity) external onlyOwner nonReentrant {\\n        _setOwnersExplicit(quantity);\\n    }\\n\\n    /// @notice internally returns the number of mints of an address\\n    function _mintOf(address _owner) internal view returns (uint256) {\\n        return _numberMinted(_owner);\\n    }\\n\\n    /// @notice returns the number of mints of an address\\n    function mintOf(address _owner) public view returns (uint256) {\\n        return _mintOf(_owner);\\n    }\\n}\\n\",\"keccak256\":\"0xae8f5109b6c5dcc364df402e2b964bf88292b52cd32c55a7672ba3eeb0e827ba\",\"license\":\"MIT\"},\"erc721a/contracts/ERC721A.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.4;\\n\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\nimport '@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol';\\nimport '@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol';\\nimport '@openzeppelin/contracts/utils/Address.sol';\\nimport '@openzeppelin/contracts/utils/Context.sol';\\nimport '@openzeppelin/contracts/utils/Strings.sol';\\nimport '@openzeppelin/contracts/utils/introspection/ERC165.sol';\\n\\nerror ApprovalCallerNotOwnerNorApproved();\\nerror ApprovalQueryForNonexistentToken();\\nerror ApproveToCaller();\\nerror ApprovalToCurrentOwner();\\nerror BalanceQueryForZeroAddress();\\nerror MintToZeroAddress();\\nerror MintZeroQuantity();\\nerror OwnerQueryForNonexistentToken();\\nerror TransferCallerNotOwnerNorApproved();\\nerror TransferFromIncorrectOwner();\\nerror TransferToNonERC721ReceiverImplementer();\\nerror TransferToZeroAddress();\\nerror URIQueryForNonexistentToken();\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension. Built to optimize for lower gas during batch mints.\\n *\\n * Assumes serials are sequentially minted starting at _startTokenId() (defaults to 0, e.g. 0, 1, 2, 3..).\\n *\\n * Assumes that an owner cannot have more than 2**64 - 1 (max value of uint64) of supply.\\n *\\n * Assumes that the maximum token id cannot exceed 2**256 - 1 (max value of uint256).\\n */\\ncontract ERC721A is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Compiler will pack this into a single 256bit word.\\n    struct TokenOwnership {\\n        // The address of the owner.\\n        address addr;\\n        // Keeps track of the start time of ownership with minimal overhead for tokenomics.\\n        uint64 startTimestamp;\\n        // Whether the token has been burned.\\n        bool burned;\\n    }\\n\\n    // Compiler will pack this into a single 256bit word.\\n    struct AddressData {\\n        // Realistically, 2**64-1 is more than enough.\\n        uint64 balance;\\n        // Keeps track of mint count with minimal overhead for tokenomics.\\n        uint64 numberMinted;\\n        // Keeps track of burn count with minimal overhead for tokenomics.\\n        uint64 numberBurned;\\n        // For miscellaneous variable(s) pertaining to the address\\n        // (e.g. number of whitelist mint slots used).\\n        // If there are multiple variables, please pack them into a uint64.\\n        uint64 aux;\\n    }\\n\\n    // The tokenId of the next token to be minted.\\n    uint256 internal _currentIndex;\\n\\n    // The number of tokens burned.\\n    uint256 internal _burnCounter;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to ownership details\\n    // An empty struct value does not necessarily mean the token is unowned. See _ownershipOf implementation for details.\\n    mapping(uint256 => TokenOwnership) internal _ownerships;\\n\\n    // Mapping owner address to address data\\n    mapping(address => AddressData) private _addressData;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _currentIndex = _startTokenId();\\n    }\\n\\n    /**\\n     * To change the starting tokenId, please override this function.\\n     */\\n    function _startTokenId() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev Burned tokens are calculated here, use _totalMinted() if you want to count just minted tokens.\\n     */\\n    function totalSupply() public view returns (uint256) {\\n        // Counter underflow is impossible as _burnCounter cannot be incremented\\n        // more than _currentIndex - _startTokenId() times\\n        unchecked {\\n            return _currentIndex - _burnCounter - _startTokenId();\\n        }\\n    }\\n\\n    /**\\n     * Returns the total amount of tokens minted in the contract.\\n     */\\n    function _totalMinted() internal view returns (uint256) {\\n        // Counter underflow is impossible as _currentIndex does not decrement,\\n        // and it is initialized to _startTokenId()\\n        unchecked {\\n            return _currentIndex - _startTokenId();\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view override returns (uint256) {\\n        if (owner == address(0)) revert BalanceQueryForZeroAddress();\\n        return uint256(_addressData[owner].balance);\\n    }\\n\\n    /**\\n     * Returns the number of tokens minted by `owner`.\\n     */\\n    function _numberMinted(address owner) internal view returns (uint256) {\\n        return uint256(_addressData[owner].numberMinted);\\n    }\\n\\n    /**\\n     * Returns the number of tokens burned by or on behalf of `owner`.\\n     */\\n    function _numberBurned(address owner) internal view returns (uint256) {\\n        return uint256(_addressData[owner].numberBurned);\\n    }\\n\\n    /**\\n     * Returns the auxillary data for `owner`. (e.g. number of whitelist mint slots used).\\n     */\\n    function _getAux(address owner) internal view returns (uint64) {\\n        return _addressData[owner].aux;\\n    }\\n\\n    /**\\n     * Sets the auxillary data for `owner`. (e.g. number of whitelist mint slots used).\\n     * If there are multiple variables, please pack them into a uint64.\\n     */\\n    function _setAux(address owner, uint64 aux) internal {\\n        _addressData[owner].aux = aux;\\n    }\\n\\n    /**\\n     * Gas spent here starts off proportional to the maximum mint batch size.\\n     * It gradually moves to O(1) as tokens get transferred around in the collection over time.\\n     */\\n    function _ownershipOf(uint256 tokenId) internal view returns (TokenOwnership memory) {\\n        uint256 curr = tokenId;\\n\\n        unchecked {\\n            if (_startTokenId() <= curr && curr < _currentIndex) {\\n                TokenOwnership memory ownership = _ownerships[curr];\\n                if (!ownership.burned) {\\n                    if (ownership.addr != address(0)) {\\n                        return ownership;\\n                    }\\n                    // Invariant:\\n                    // There will always be an ownership that has an address and is not burned\\n                    // before an ownership that does not have an address and is not burned.\\n                    // Hence, curr will not underflow.\\n                    while (true) {\\n                        curr--;\\n                        ownership = _ownerships[curr];\\n                        if (ownership.addr != address(0)) {\\n                            return ownership;\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n        revert OwnerQueryForNonexistentToken();\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view override returns (address) {\\n        return _ownershipOf(tokenId).addr;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        if (!_exists(tokenId)) revert URIQueryForNonexistentToken();\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length != 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : '';\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return '';\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public override {\\n        address owner = ERC721A.ownerOf(tokenId);\\n        if (to == owner) revert ApprovalToCurrentOwner();\\n\\n        if (_msgSender() != owner && !isApprovedForAll(owner, _msgSender())) {\\n            revert ApprovalCallerNotOwnerNorApproved();\\n        }\\n\\n        _approve(to, tokenId, owner);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view override returns (address) {\\n        if (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken();\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        if (operator == _msgSender()) revert ApproveToCaller();\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, '');\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        _transfer(from, to, tokenId);\\n        if (to.isContract() && !_checkContractOnERC721Received(from, to, tokenId, _data)) {\\n            revert TransferToNonERC721ReceiverImplementer();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     */\\n    function _exists(uint256 tokenId) internal view returns (bool) {\\n        return _startTokenId() <= tokenId && tokenId < _currentIndex && !_ownerships[tokenId].burned;\\n    }\\n\\n    function _safeMint(address to, uint256 quantity) internal {\\n        _safeMint(to, quantity, '');\\n    }\\n\\n    /**\\n     * @dev Safely mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called for each safe transfer.\\n     * - `quantity` must be greater than 0.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 quantity,\\n        bytes memory _data\\n    ) internal {\\n        _mint(to, quantity, _data, true);\\n    }\\n\\n    /**\\n     * @dev Mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `quantity` must be greater than 0.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 quantity,\\n        bytes memory _data,\\n        bool safe\\n    ) internal {\\n        uint256 startTokenId = _currentIndex;\\n        if (to == address(0)) revert MintToZeroAddress();\\n        if (quantity == 0) revert MintZeroQuantity();\\n\\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\\n\\n        // Overflows are incredibly unrealistic.\\n        // balance or numberMinted overflow if current value of either + quantity > 1.8e19 (2**64) - 1\\n        // updatedIndex overflows if _currentIndex + quantity > 1.2e77 (2**256) - 1\\n        unchecked {\\n            _addressData[to].balance += uint64(quantity);\\n            _addressData[to].numberMinted += uint64(quantity);\\n\\n            _ownerships[startTokenId].addr = to;\\n            _ownerships[startTokenId].startTimestamp = uint64(block.timestamp);\\n\\n            uint256 updatedIndex = startTokenId;\\n            uint256 end = updatedIndex + quantity;\\n\\n            if (safe && to.isContract()) {\\n                do {\\n                    emit Transfer(address(0), to, updatedIndex);\\n                    if (!_checkContractOnERC721Received(address(0), to, updatedIndex++, _data)) {\\n                        revert TransferToNonERC721ReceiverImplementer();\\n                    }\\n                } while (updatedIndex != end);\\n                // Reentrancy protection\\n                if (_currentIndex != startTokenId) revert();\\n            } else {\\n                do {\\n                    emit Transfer(address(0), to, updatedIndex++);\\n                } while (updatedIndex != end);\\n            }\\n            _currentIndex = updatedIndex;\\n        }\\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) private {\\n        TokenOwnership memory prevOwnership = _ownershipOf(tokenId);\\n\\n        if (prevOwnership.addr != from) revert TransferFromIncorrectOwner();\\n\\n        bool isApprovedOrOwner = (_msgSender() == from ||\\n            isApprovedForAll(from, _msgSender()) ||\\n            getApproved(tokenId) == _msgSender());\\n\\n        if (!isApprovedOrOwner) revert TransferCallerNotOwnerNorApproved();\\n        if (to == address(0)) revert TransferToZeroAddress();\\n\\n        _beforeTokenTransfers(from, to, tokenId, 1);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId, from);\\n\\n        // Underflow of the sender's balance is impossible because we check for\\n        // ownership above and the recipient's balance can't realistically overflow.\\n        // Counter overflow is incredibly unrealistic as tokenId would have to be 2**256.\\n        unchecked {\\n            _addressData[from].balance -= 1;\\n            _addressData[to].balance += 1;\\n\\n            TokenOwnership storage currSlot = _ownerships[tokenId];\\n            currSlot.addr = to;\\n            currSlot.startTimestamp = uint64(block.timestamp);\\n\\n            // If the ownership slot of tokenId+1 is not explicitly set, that means the transfer initiator owns it.\\n            // Set the slot of tokenId+1 explicitly in storage to maintain correctness for ownerOf(tokenId+1) calls.\\n            uint256 nextTokenId = tokenId + 1;\\n            TokenOwnership storage nextSlot = _ownerships[nextTokenId];\\n            if (nextSlot.addr == address(0)) {\\n                // This will suffice for checking _exists(nextTokenId),\\n                // as a burned slot cannot contain the zero address.\\n                if (nextTokenId != _currentIndex) {\\n                    nextSlot.addr = from;\\n                    nextSlot.startTimestamp = prevOwnership.startTimestamp;\\n                }\\n            }\\n        }\\n\\n        emit Transfer(from, to, tokenId);\\n        _afterTokenTransfers(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev This is equivalent to _burn(tokenId, false)\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        _burn(tokenId, false);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId, bool approvalCheck) internal virtual {\\n        TokenOwnership memory prevOwnership = _ownershipOf(tokenId);\\n\\n        address from = prevOwnership.addr;\\n\\n        if (approvalCheck) {\\n            bool isApprovedOrOwner = (_msgSender() == from ||\\n                isApprovedForAll(from, _msgSender()) ||\\n                getApproved(tokenId) == _msgSender());\\n\\n            if (!isApprovedOrOwner) revert TransferCallerNotOwnerNorApproved();\\n        }\\n\\n        _beforeTokenTransfers(from, address(0), tokenId, 1);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId, from);\\n\\n        // Underflow of the sender's balance is impossible because we check for\\n        // ownership above and the recipient's balance can't realistically overflow.\\n        // Counter overflow is incredibly unrealistic as tokenId would have to be 2**256.\\n        unchecked {\\n            AddressData storage addressData = _addressData[from];\\n            addressData.balance -= 1;\\n            addressData.numberBurned += 1;\\n\\n            // Keep track of who burned the token, and the timestamp of burning.\\n            TokenOwnership storage currSlot = _ownerships[tokenId];\\n            currSlot.addr = from;\\n            currSlot.startTimestamp = uint64(block.timestamp);\\n            currSlot.burned = true;\\n\\n            // If the ownership slot of tokenId+1 is not explicitly set, that means the burn initiator owns it.\\n            // Set the slot of tokenId+1 explicitly in storage to maintain correctness for ownerOf(tokenId+1) calls.\\n            uint256 nextTokenId = tokenId + 1;\\n            TokenOwnership storage nextSlot = _ownerships[nextTokenId];\\n            if (nextSlot.addr == address(0)) {\\n                // This will suffice for checking _exists(nextTokenId),\\n                // as a burned slot cannot contain the zero address.\\n                if (nextTokenId != _currentIndex) {\\n                    nextSlot.addr = from;\\n                    nextSlot.startTimestamp = prevOwnership.startTimestamp;\\n                }\\n            }\\n        }\\n\\n        emit Transfer(from, address(0), tokenId);\\n        _afterTokenTransfers(from, address(0), tokenId, 1);\\n\\n        // Overflow not possible, as _burnCounter cannot be exceed _currentIndex times.\\n        unchecked {\\n            _burnCounter++;\\n        }\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(\\n        address to,\\n        uint256 tokenId,\\n        address owner\\n    ) private {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(owner, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkContractOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n            return retval == IERC721Receiver(to).onERC721Received.selector;\\n        } catch (bytes memory reason) {\\n            if (reason.length == 0) {\\n                revert TransferToNonERC721ReceiverImplementer();\\n            } else {\\n                assembly {\\n                    revert(add(32, reason), mload(reason))\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before a set of serially-ordered token ids are about to be transferred. This includes minting.\\n     * And also called before burning one token.\\n     *\\n     * startTokenId - the first token id to be transferred\\n     * quantity - the amount to be transferred\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, `tokenId` will be burned by `from`.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _beforeTokenTransfers(\\n        address from,\\n        address to,\\n        uint256 startTokenId,\\n        uint256 quantity\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after a set of serially-ordered token ids have been transferred. This includes\\n     * minting.\\n     * And also called after one token has been burned.\\n     *\\n     * startTokenId - the first token id to be transferred\\n     * quantity - the amount to be transferred\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` has been\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` has been minted for `to`.\\n     * - When `to` is zero, `tokenId` has been burned by `from`.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _afterTokenTransfers(\\n        address from,\\n        address to,\\n        uint256 startTokenId,\\n        uint256 quantity\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x8ce51ff43bf1d6690341475ef3caf0929c43c63258fe56dc7fc301608ea9f30d\",\"license\":\"MIT\"},\"erc721a/contracts/extensions/ERC721AOwnersExplicit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.4;\\n\\nimport '../ERC721A.sol';\\n\\nerror AllOwnershipsHaveBeenSet();\\nerror QuantityMustBeNonZero();\\nerror NoTokensMintedYet();\\n\\nabstract contract ERC721AOwnersExplicit is ERC721A {\\n    uint256 public nextOwnerToExplicitlySet;\\n\\n    /**\\n     * @dev Explicitly set `owners` to eliminate loops in future calls of ownerOf().\\n     */\\n    function _setOwnersExplicit(uint256 quantity) internal {\\n        if (quantity == 0) revert QuantityMustBeNonZero();\\n        if (_currentIndex == _startTokenId()) revert NoTokensMintedYet();\\n        uint256 _nextOwnerToExplicitlySet = nextOwnerToExplicitlySet;\\n        if (_nextOwnerToExplicitlySet == 0) {\\n            _nextOwnerToExplicitlySet = _startTokenId();\\n        }\\n        if (_nextOwnerToExplicitlySet >= _currentIndex) revert AllOwnershipsHaveBeenSet();\\n\\n        // Index underflow is impossible.\\n        // Counter or index overflow is incredibly unrealistic.\\n        unchecked {\\n            uint256 endIndex = _nextOwnerToExplicitlySet + quantity - 1;\\n\\n            // Set the end index to be the last token index\\n            if (endIndex + 1 > _currentIndex) {\\n                endIndex = _currentIndex - 1;\\n            }\\n\\n            for (uint256 i = _nextOwnerToExplicitlySet; i <= endIndex; i++) {\\n                if (_ownerships[i].addr == address(0) && !_ownerships[i].burned) {\\n                    TokenOwnership memory ownership = _ownershipOf(i);\\n                    _ownerships[i].addr = ownership.addr;\\n                    _ownerships[i].startTimestamp = ownership.startTimestamp;\\n                }\\n            }\\n\\n            nextOwnerToExplicitlySet = endIndex + 1;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x87638daa1e525e20e73b587f5c921e94ef969d35843c225caa57194f64457bd7\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101006040523480156200001257600080fd5b5060405162002edb38038062002edb833981016040819052620000359162000480565b89518a908a906200004e9060029060208501906200030d565b508051620000649060039060208401906200030d565b505060008055506200007633620001da565b6001600a5586620000de5760405162461bcd60e51b815260206004820152602760248201527f52686170736f647943726561746f722f696e76616c69642d636f6c6c656374696044820152666f6e2d73697a6560c81b60648201526084015b60405180910390fd5b86851115620001415760405162461bcd60e51b815260206004820152602860248201527f52686170736f647943726561746f722f696e76616c69642d70726f6d6f74696f6044820152671b8b585b5bdd5b9d60c21b6064820152608401620000d5565b600084116200019e5760405162461bcd60e51b815260206004820152602260248201527f52686170736f647943726561746f722f696e76616c69642d6d696e742d707269604482015261636560f01b6064820152608401620000d5565b60e087905260a0869052608085905260c0849052620001bd886200022c565b620001ca83838362000245565b5050505050505050505062000594565b600980546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b8051620002419060109060208401906200030d565b5050565b828211620002a25760405162461bcd60e51b8152602060048201526024808201527f52686170736f647943726561746f722f696e76616c69642d70726573616c652d60448201526374696d6560e01b6064820152608401620000d5565b818111620002ff5760405162461bcd60e51b815260206004820152602360248201527f52686170736f647943726561746f722f696e76616c69642d7075626c69632d74604482015262696d6560e81b6064820152608401620000d5565b600d92909255600e55600f55565b8280546200031b9062000557565b90600052602060002090601f0160209004810192826200033f57600085556200038a565b82601f106200035a57805160ff19168380011785556200038a565b828001600101855582156200038a579182015b828111156200038a5782518255916020019190600101906200036d565b50620003989291506200039c565b5090565b5b808211156200039857600081556001016200039d565b634e487b7160e01b600052604160045260246000fd5b600082601f830112620003db57600080fd5b81516001600160401b0380821115620003f857620003f8620003b3565b604051601f8301601f19908116603f01168101908282118183101715620004235762000423620003b3565b816040528381526020925086838588010111156200044057600080fd5b600091505b8382101562000464578582018301518183018401529082019062000445565b83821115620004765760008385830101525b9695505050505050565b6000806000806000806000806000806101408b8d031215620004a157600080fd5b8a516001600160401b0380821115620004b957600080fd5b620004c78e838f01620003c9565b9b5060208d0151915080821115620004de57600080fd5b620004ec8e838f01620003c9565b9a5060408d01519150808211156200050357600080fd5b50620005128d828e01620003c9565b98505060608b0151965060808b0151955060a08b0151945060c08b0151935060e08b015192506101008b015191506101208b015190509295989b9194979a5092959850565b600181811c908216806200056c57607f821691505b602082108114156200058e57634e487b7160e01b600052602260045260246000fd5b50919050565b60805160a05160c05160e0516128d5620006066000396000818161040e015281816109b101528181610c670152610ef40152600081816104d301528181610a570152610d0701526000818161060e01528181610c2701526112a4015260008181610571015261121301526128d56000f3fe60806040526004361061023b5760003560e01c80636c0360eb1161012e578063ac446002116100ab578063c87b56dd1161006f578063c87b56dd146106bb578063d7224ba0146106db578063e985e9c5146106f1578063f2fde38b1461073a578063fd1e29621461075a57600080fd5b8063ac44600214610630578063b1f536fa14610645578063b88d4fde14610665578063ba2f59c814610685578063c6e62e0b146106a557600080fd5b80638da5cb5b116100f25780638da5cb5b1461059357806395d89b41146105b15780639c4dab52146105c6578063a22cb465146105dc578063a4babffd146105fc57600080fd5b80636c0360eb146104f557806370a082311461050a578063715018a61461052a57806372830dfd1461053f57806376972db21461055f57600080fd5b806328d7b276116101bc57806354fd4d501161018057806354fd4d501461043057806355f804b314610461578063617aa43c146104815780636352211e146104a15780636817c76c146104c157600080fd5b806328d7b276146103895780632d20fb60146103a95780632db11544146103c957806342842e0e146103dc57806345c0f533146103fc57600080fd5b80631b59169d116102035780631b59169d146103145780631bdc608e1461032757806322212e2b1461033d57806323b872dd1461035357806327b3bf111461037357600080fd5b806301ffc9a71461024057806306fdde0314610275578063081812fc14610297578063095ea7b3146102cf57806318160ddd146102f1575b600080fd5b34801561024c57600080fd5b5061026061025b3660046120d1565b61077a565b60405190151581526020015b60405180910390f35b34801561028157600080fd5b5061028a6107cc565b60405161026c9190612146565b3480156102a357600080fd5b506102b76102b2366004612159565b61085e565b6040516001600160a01b03909116815260200161026c565b3480156102db57600080fd5b506102ef6102ea36600461218e565b6108a2565b005b3480156102fd57600080fd5b50600154600054035b60405190815260200161026c565b6102ef610322366004612203565b610930565b34801561033357600080fd5b50610306600f5481565b34801561034957600080fd5b50610306600c5481565b34801561035f57600080fd5b506102ef61036e366004612255565b610b76565b34801561037f57600080fd5b50610306600d5481565b34801561039557600080fd5b506102ef6103a4366004612159565b610b81565b3480156103b557600080fd5b506102ef6103c4366004612159565b610b8e565b6102ef6103d7366004612159565b610bcf565b3480156103e857600080fd5b506102ef6103f7366004612255565b610d80565b34801561040857600080fd5b506103067f000000000000000000000000000000000000000000000000000000000000000081565b34801561043c57600080fd5b5061028a604051806040016040528060058152602001640312e302e360dc1b81525081565b34801561046d57600080fd5b506102ef61047c366004612291565b610d9b565b34801561048d57600080fd5b506102ef61049c366004612302565b610de6565b3480156104ad57600080fd5b506102b76104bc366004612159565b610df9565b3480156104cd57600080fd5b506103067f000000000000000000000000000000000000000000000000000000000000000081565b34801561050157600080fd5b5061028a610e0b565b34801561051657600080fd5b5061030661052536600461232e565b610e1a565b34801561053657600080fd5b506102ef610e68565b34801561054b57600080fd5b506102ef61055a366004612349565b610e7c565b34801561056b57600080fd5b506103067f000000000000000000000000000000000000000000000000000000000000000081565b34801561059f57600080fd5b506009546001600160a01b03166102b7565b3480156105bd57600080fd5b5061028a611031565b3480156105d257600080fd5b50610306600b5481565b3480156105e857600080fd5b506102ef6105f7366004612394565b611040565b34801561060857600080fd5b506103067f000000000000000000000000000000000000000000000000000000000000000081565b34801561063c57600080fd5b506102ef6110d6565b34801561065157600080fd5b5061030661066036600461232e565b6111ad565b34801561067157600080fd5b506102ef6106803660046123e6565b6111b8565b34801561069157600080fd5b506102ef6106a0366004612159565b611209565b3480156106b157600080fd5b50610306600e5481565b3480156106c757600080fd5b5061028a6106d6366004612159565b611399565b3480156106e757600080fd5b5061030660085481565b3480156106fd57600080fd5b5061026061070c3660046124c1565b6001600160a01b03918216600090815260076020908152604080832093909416825291909152205460ff1690565b34801561074657600080fd5b506102ef61075536600461232e565b61142b565b34801561076657600080fd5b506102ef610775366004612159565b6114a4565b60006001600160e01b031982166380ac58cd60e01b14806107ab57506001600160e01b03198216635b5e139f60e01b145b806107c657506301ffc9a760e01b6001600160e01b03198316145b92915050565b6060600280546107db906124f4565b80601f0160208091040260200160405190810160405280929190818152602001828054610807906124f4565b80156108545780601f1061082957610100808354040283529160200191610854565b820191906000526020600020905b81548152906001019060200180831161083757829003601f168201915b5050505050905090565b6000610869826114b1565b610886576040516333d1c03960e21b815260040160405180910390fd5b506000908152600660205260409020546001600160a01b031690565b60006108ad82610df9565b9050806001600160a01b0316836001600160a01b031614156108e25760405163250fdee360e21b815260040160405180910390fd5b336001600160a01b038216148015906109025750610900813361070c565b155b15610920576040516367d9dca160e11b815260040160405180910390fd5b61092b8383836114dc565b505050565b6002600a54141561095c5760405162461bcd60e51b81526004016109539061252f565b60405180910390fd5b6002600a55600e54801580159061097257508042115b61098e5760405162461bcd60e51b815260040161095390612566565b84843233146109af5760405162461bcd60e51b81526004016109539061259f565b7f00000000000000000000000000000000000000000000000000000000000000006109e7836109e16001546000540390565b90611538565b1115610a055760405162461bcd60e51b8152600401610953906125da565b80610a13836109e133611544565b1115610a315760405162461bcd60e51b815260040161095390612616565b60008211610a515760405162461bcd60e51b815260040161095390612661565b86610a7c7f000000000000000000000000000000000000000000000000000000000000000082611572565b3414610a9a5760405162461bcd60e51b8152600401610953906126ac565b60003411610aba5760405162461bcd60e51b815260040161095390612661565b86338787600c54610b3c838380806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250506040516bffffffffffffffffffffffff1960608a901b166020820152603481018a905285925060540190505b6040516020818303038152906040528051906020012061157e565b610b585760405162461bcd60e51b8152600401610953906126e6565b610b62338e611594565b50506001600a555050505050505050505050565b61092b8383836115e5565b610b896117d3565b600c55565b610b966117d3565b6002600a541415610bb95760405162461bcd60e51b81526004016109539061252f565b6002600a55610bc78161182d565b506001600a55565b6002600a541415610bf25760405162461bcd60e51b81526004016109539061252f565b6002600a55600f548015801590610c0857508042115b610c245760405162461bcd60e51b815260040161095390612566565b817f0000000000000000000000000000000000000000000000000000000000000000323314610c655760405162461bcd60e51b81526004016109539061259f565b7f0000000000000000000000000000000000000000000000000000000000000000610c97836109e16001546000540390565b1115610cb55760405162461bcd60e51b8152600401610953906125da565b80610cc3836109e133611544565b1115610ce15760405162461bcd60e51b815260040161095390612616565b60008211610d015760405162461bcd60e51b815260040161095390612661565b83610d2c7f000000000000000000000000000000000000000000000000000000000000000082611572565b3414610d4a5760405162461bcd60e51b8152600401610953906126ac565b60003411610d6a5760405162461bcd60e51b815260040161095390612661565b610d743386611594565b50506001600a55505050565b61092b838383604051806020016040528060008152506111b8565b610da36117d3565b610de282828080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061196492505050565b5050565b610dee6117d3565b61092b838383611977565b6000610e0482611a3b565b5192915050565b6060601080546107db906124f4565b60006001600160a01b038216610e43576040516323d3ad8160e21b815260040160405180910390fd5b506001600160a01b03166000908152600560205260409020546001600160401b031690565b610e706117d3565b610e7a6000611b55565b565b6002600a541415610e9f5760405162461bcd60e51b81526004016109539061252f565b6002600a55600d548015801590610eb557508042115b610ed15760405162461bcd60e51b815260040161095390612566565b8380323314610ef25760405162461bcd60e51b81526004016109539061259f565b7f0000000000000000000000000000000000000000000000000000000000000000610f24836109e16001546000540390565b1115610f425760405162461bcd60e51b8152600401610953906125da565b80610f50836109e133611544565b1115610f6e5760405162461bcd60e51b815260040161095390612616565b60008211610f8e5760405162461bcd60e51b815260040161095390612661565b85338686600b54610ff9838380806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250506040516bffffffffffffffffffffffff1960608a901b166020820152603481018a90528592506054019050610b21565b6110155760405162461bcd60e51b8152600401610953906126e6565b61101f338c611594565b50506001600a55505050505050505050565b6060600380546107db906124f4565b6001600160a01b03821633141561106a5760405163b06307db60e01b815260040160405180910390fd5b3360008181526007602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b6110de6117d3565b6002600a5414156111015760405162461bcd60e51b81526004016109539061252f565b6002600a55604051600090339047908381818185875af1925050503d8060008114611148576040519150601f19603f3d011682016040523d82523d6000602084013e61114d565b606091505b5050905080610bc75760405162461bcd60e51b815260206004820152602660248201527f52686170736f647943726561746f722f696e76616c69642d77697468647261776044820152652d6d6f6e657960d01b6064820152608401610953565b60006107c682611544565b6111c38484846115e5565b6001600160a01b0383163b151580156111e557506111e384848484611ba7565b155b15611203576040516368d2bf6b60e11b815260040160405180910390fd5b50505050565b6112116117d3565b7f0000000000000000000000000000000000000000000000000000000000000000611243826109e16001546000540390565b11156112a25760405162461bcd60e51b815260206004820152602860248201527f52686170736f647943726561746f722f696e76616c69642d70726f6d6f74696f6044820152676e2d737570706c7960c01b6064820152608401610953565b7f00000000000000000000000000000000000000000000000000000000000000006112cd8282611c9f565b156113295760405162461bcd60e51b815260206004820152602660248201527f52686170736f647943726561746f722f696e76616c69642d62617463682d6d756044820152656c7469706c6560d01b6064820152608401610953565b60006113358383611cab565b905060005b8181101561135e5761134c3384611cb7565b8061135681612739565b91505061133a565b5060405183815233907f0ce3610e89a4bb9ec9359763f99110ed52a4abaea0b62028a1637e242ca2768b9060200160405180910390a2505050565b60606113a4826114b1565b6113c157604051630a14c4b560e41b815260040160405180910390fd5b60006113d860408051602081019091526000815290565b90508051600014156113f95760405180602001604052806000815250611424565b8061140384611cd1565b604051602001611414929190612754565b6040516020818303038152906040525b9392505050565b6114336117d3565b6001600160a01b0381166114985760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610953565b6114a181611b55565b50565b6114ac6117d3565b600b55565b60008054821080156107c6575050600090815260046020526040902054600160e01b900460ff161590565b60008281526006602052604080822080546001600160a01b0319166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b60006114248284612783565b6001600160a01b038116600090815260056020526040812054600160401b90046001600160401b03166107c6565b6000611424828461279b565b60008261158b8584611dce565b14949350505050565b61159e8282611cb7565b816001600160a01b03167f0ce3610e89a4bb9ec9359763f99110ed52a4abaea0b62028a1637e242ca2768b826040516115d991815260200190565b60405180910390a25050565b60006115f082611a3b565b9050836001600160a01b031681600001516001600160a01b0316146116275760405162a1148160e81b815260040160405180910390fd5b6000336001600160a01b03861614806116455750611645853361070c565b806116605750336116558461085e565b6001600160a01b0316145b90508061168057604051632ce44b5f60e11b815260040160405180910390fd5b6001600160a01b0384166116a757604051633a954ecd60e21b815260040160405180910390fd5b6116b3600084876114dc565b6001600160a01b038581166000908152600560209081526040808320805467ffffffffffffffff198082166001600160401b0392831660001901831617909255898616808652838620805493841693831660019081018416949094179055898652600490945282852080546001600160e01b031916909417600160a01b4290921691909102178355870180845292208054919390911661178757600054821461178757805460208601516001600160401b0316600160a01b026001600160e01b03199091166001600160a01b038a16171781555b50505082846001600160a01b0316866001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45b5050505050565b6009546001600160a01b03163314610e7a5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610953565b8061184b576040516356be441560e01b815260040160405180910390fd5b60005461186b5760405163c0367cab60e01b815260040160405180910390fd5b60085480611877575060005b6000548110611899576040516370e89b1b60e01b815260040160405180910390fd5b60005482820160001981019110156118b45750600054600019015b815b818111611959576000818152600460205260409020546001600160a01b03161580156118f85750600081815260046020526040902054600160e01b900460ff16155b1561195157600061190882611a3b565b80516000848152600460209081526040909120805491909301516001600160401b0316600160a01b026001600160e01b03199091166001600160a01b0390921691909117179055505b6001016118b6565b506001016008555050565b8051610de2906010906020840190612022565b8282116119d25760405162461bcd60e51b8152602060048201526024808201527f52686170736f647943726561746f722f696e76616c69642d70726573616c652d60448201526374696d6560e01b6064820152608401610953565b818111611a2d5760405162461bcd60e51b815260206004820152602360248201527f52686170736f647943726561746f722f696e76616c69642d7075626c69632d74604482015262696d6560e81b6064820152608401610953565b600d92909255600e55600f55565b604080516060810182526000808252602082018190529181019190915281600054811015611b3c57600081815260046020908152604091829020825160608101845290546001600160a01b0381168252600160a01b81046001600160401b031692820192909252600160e01b90910460ff16151591810182905290611b3a5780516001600160a01b031615611ad1579392505050565b5060001901600081815260046020908152604091829020825160608101845290546001600160a01b038116808352600160a01b82046001600160401b031693830193909352600160e01b900460ff1615159281019290925215611b35579392505050565b611ad1565b505b604051636f96cda160e11b815260040160405180910390fd5b600980546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b604051630a85bd0160e11b81526000906001600160a01b0385169063150b7a0290611bdc9033908990889088906004016127ba565b602060405180830381600087803b158015611bf657600080fd5b505af1925050508015611c26575060408051601f3d908101601f19168201909252611c23918101906127f7565b60015b611c81573d808015611c54576040519150601f19603f3d011682016040523d82523d6000602084013e611c59565b606091505b508051611c79576040516368d2bf6b60e11b815260040160405180910390fd5b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490505b949350505050565b6000611424828461282a565b6000611424828461283e565b610de2828260405180602001604052806000815250611e1b565b606081611cf55750506040805180820190915260018152600360fc1b602082015290565b8160005b8115611d1f5780611d0981612739565b9150611d189050600a8361283e565b9150611cf9565b6000816001600160401b03811115611d3957611d396123d0565b6040519080825280601f01601f191660200182016040528015611d63576020820181803683370190505b5090505b8415611c9757611d78600183612852565b9150611d85600a8661282a565b611d90906030612783565b60f81b818381518110611da557611da5612869565b60200101906001600160f81b031916908160001a905350611dc7600a8661283e565b9450611d67565b600081815b8451811015611e1357611dff82868381518110611df257611df2612869565b6020026020010151611e28565b915080611e0b81612739565b915050611dd3565b509392505050565b61092b8383836001611e57565b6000818310611e44576000828152602084905260409020611424565b6000838152602083905260409020611424565b6000546001600160a01b038516611e8057604051622e076360e81b815260040160405180910390fd5b83611e9e5760405163b562e8dd60e01b815260040160405180910390fd5b6001600160a01b038516600081815260056020908152604080832080546fffffffffffffffffffffffffffffffff1981166001600160401b038083168c018116918217600160401b67ffffffffffffffff1990941690921783900481168c01811690920217909155858452600490925290912080546001600160e01b031916909217600160a01b429092169190910217905580808501838015611f4a57506001600160a01b0387163b15155b15611fd3575b60405182906001600160a01b038916906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a4611f9b6000888480600101955088611ba7565b611fb8576040516368d2bf6b60e11b815260040160405180910390fd5b80821415611f50578260005414611fce57600080fd5b612019565b5b6040516001830192906001600160a01b038916906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a480821415611fd4575b506000556117cc565b82805461202e906124f4565b90600052602060002090601f0160209004810192826120505760008555612096565b82601f1061206957805160ff1916838001178555612096565b82800160010185558215612096579182015b8281111561209657825182559160200191906001019061207b565b506120a29291506120a6565b5090565b5b808211156120a257600081556001016120a7565b6001600160e01b0319811681146114a157600080fd5b6000602082840312156120e357600080fd5b8135611424816120bb565b60005b838110156121095781810151838201526020016120f1565b838111156112035750506000910152565b600081518084526121328160208601602086016120ee565b601f01601f19169290920160200192915050565b602081526000611424602083018461211a565b60006020828403121561216b57600080fd5b5035919050565b80356001600160a01b038116811461218957600080fd5b919050565b600080604083850312156121a157600080fd5b6121aa83612172565b946020939093013593505050565b60008083601f8401126121ca57600080fd5b5081356001600160401b038111156121e157600080fd5b6020830191508360208260051b85010111156121fc57600080fd5b9250929050565b6000806000806060858703121561221957600080fd5b843593506020850135925060408501356001600160401b0381111561223d57600080fd5b612249878288016121b8565b95989497509550505050565b60008060006060848603121561226a57600080fd5b61227384612172565b925061228160208501612172565b9150604084013590509250925092565b600080602083850312156122a457600080fd5b82356001600160401b03808211156122bb57600080fd5b818501915085601f8301126122cf57600080fd5b8135818111156122de57600080fd5b8660208285010111156122f057600080fd5b60209290920196919550909350505050565b60008060006060848603121561231757600080fd5b505081359360208301359350604090920135919050565b60006020828403121561234057600080fd5b61142482612172565b60008060006040848603121561235e57600080fd5b8335925060208401356001600160401b0381111561237b57600080fd5b612387868287016121b8565b9497909650939450505050565b600080604083850312156123a757600080fd5b6123b083612172565b9150602083013580151581146123c557600080fd5b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b600080600080608085870312156123fc57600080fd5b61240585612172565b935061241360208601612172565b92506040850135915060608501356001600160401b038082111561243657600080fd5b818701915087601f83011261244a57600080fd5b81358181111561245c5761245c6123d0565b604051601f8201601f19908116603f01168101908382118183101715612484576124846123d0565b816040528281528a602084870101111561249d57600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b600080604083850312156124d457600080fd5b6124dd83612172565b91506124eb60208401612172565b90509250929050565b600181811c9082168061250857607f821691505b6020821081141561252957634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6020808252602b9082015260008051602061288083398151915260408201526a642d6d696e742d74696d6560a81b606082015260800190565b6020808252602d9082015260008051602061288083398151915260408201526c3216b6b4b73a16b1b0b63632b960991b606082015260800190565b6020808252602e9082015260008051602061288083398151915260408201526d642d746f74616c2d737570706c7960901b606082015260800190565b6020808252603b9082015260008051602061288083398151915260408201527f642d696e766f636174696f6e2d75707065722d626f756e646172790000000000606082015260800190565b6020808252603b9082015260008051602061288083398151915260408201527f642d696e766f636174696f6e2d6c6f7765722d626f756e646172790000000000606082015260800190565b6020808252602c9082015260008051602061288083398151915260408201526b642d6d696e742d76616c756560a01b606082015260800190565b6020808252602f9082015260008051602061288083398151915260408201526e3216b0b2323932b9b996b83937b7b360891b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b600060001982141561274d5761274d612723565b5060010190565b600083516127668184602088016120ee565b83519083019061277a8183602088016120ee565b01949350505050565b6000821982111561279657612796612723565b500190565b60008160001904831182151516156127b5576127b5612723565b500290565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906127ed9083018461211a565b9695505050505050565b60006020828403121561280957600080fd5b8151611424816120bb565b634e487b7160e01b600052601260045260246000fd5b60008261283957612839612814565b500690565b60008261284d5761284d612814565b500490565b60008282101561286457612864612723565b500390565b634e487b7160e01b600052603260045260246000fdfe52686170736f647943726561746f7247656e657261746976652f696e76616c69a26469706673582212200f07c831043bf3a60c5e55c6041379c3836c26d148cdd34bc0b179ef4e17460364736f6c63430008090033",
  "deployedBytecode": "0x60806040526004361061023b5760003560e01c80636c0360eb1161012e578063ac446002116100ab578063c87b56dd1161006f578063c87b56dd146106bb578063d7224ba0146106db578063e985e9c5146106f1578063f2fde38b1461073a578063fd1e29621461075a57600080fd5b8063ac44600214610630578063b1f536fa14610645578063b88d4fde14610665578063ba2f59c814610685578063c6e62e0b146106a557600080fd5b80638da5cb5b116100f25780638da5cb5b1461059357806395d89b41146105b15780639c4dab52146105c6578063a22cb465146105dc578063a4babffd146105fc57600080fd5b80636c0360eb146104f557806370a082311461050a578063715018a61461052a57806372830dfd1461053f57806376972db21461055f57600080fd5b806328d7b276116101bc57806354fd4d501161018057806354fd4d501461043057806355f804b314610461578063617aa43c146104815780636352211e146104a15780636817c76c146104c157600080fd5b806328d7b276146103895780632d20fb60146103a95780632db11544146103c957806342842e0e146103dc57806345c0f533146103fc57600080fd5b80631b59169d116102035780631b59169d146103145780631bdc608e1461032757806322212e2b1461033d57806323b872dd1461035357806327b3bf111461037357600080fd5b806301ffc9a71461024057806306fdde0314610275578063081812fc14610297578063095ea7b3146102cf57806318160ddd146102f1575b600080fd5b34801561024c57600080fd5b5061026061025b3660046120d1565b61077a565b60405190151581526020015b60405180910390f35b34801561028157600080fd5b5061028a6107cc565b60405161026c9190612146565b3480156102a357600080fd5b506102b76102b2366004612159565b61085e565b6040516001600160a01b03909116815260200161026c565b3480156102db57600080fd5b506102ef6102ea36600461218e565b6108a2565b005b3480156102fd57600080fd5b50600154600054035b60405190815260200161026c565b6102ef610322366004612203565b610930565b34801561033357600080fd5b50610306600f5481565b34801561034957600080fd5b50610306600c5481565b34801561035f57600080fd5b506102ef61036e366004612255565b610b76565b34801561037f57600080fd5b50610306600d5481565b34801561039557600080fd5b506102ef6103a4366004612159565b610b81565b3480156103b557600080fd5b506102ef6103c4366004612159565b610b8e565b6102ef6103d7366004612159565b610bcf565b3480156103e857600080fd5b506102ef6103f7366004612255565b610d80565b34801561040857600080fd5b506103067f000000000000000000000000000000000000000000000000000000000000000081565b34801561043c57600080fd5b5061028a604051806040016040528060058152602001640312e302e360dc1b81525081565b34801561046d57600080fd5b506102ef61047c366004612291565b610d9b565b34801561048d57600080fd5b506102ef61049c366004612302565b610de6565b3480156104ad57600080fd5b506102b76104bc366004612159565b610df9565b3480156104cd57600080fd5b506103067f000000000000000000000000000000000000000000000000000000000000000081565b34801561050157600080fd5b5061028a610e0b565b34801561051657600080fd5b5061030661052536600461232e565b610e1a565b34801561053657600080fd5b506102ef610e68565b34801561054b57600080fd5b506102ef61055a366004612349565b610e7c565b34801561056b57600080fd5b506103067f000000000000000000000000000000000000000000000000000000000000000081565b34801561059f57600080fd5b506009546001600160a01b03166102b7565b3480156105bd57600080fd5b5061028a611031565b3480156105d257600080fd5b50610306600b5481565b3480156105e857600080fd5b506102ef6105f7366004612394565b611040565b34801561060857600080fd5b506103067f000000000000000000000000000000000000000000000000000000000000000081565b34801561063c57600080fd5b506102ef6110d6565b34801561065157600080fd5b5061030661066036600461232e565b6111ad565b34801561067157600080fd5b506102ef6106803660046123e6565b6111b8565b34801561069157600080fd5b506102ef6106a0366004612159565b611209565b3480156106b157600080fd5b50610306600e5481565b3480156106c757600080fd5b5061028a6106d6366004612159565b611399565b3480156106e757600080fd5b5061030660085481565b3480156106fd57600080fd5b5061026061070c3660046124c1565b6001600160a01b03918216600090815260076020908152604080832093909416825291909152205460ff1690565b34801561074657600080fd5b506102ef61075536600461232e565b61142b565b34801561076657600080fd5b506102ef610775366004612159565b6114a4565b60006001600160e01b031982166380ac58cd60e01b14806107ab57506001600160e01b03198216635b5e139f60e01b145b806107c657506301ffc9a760e01b6001600160e01b03198316145b92915050565b6060600280546107db906124f4565b80601f0160208091040260200160405190810160405280929190818152602001828054610807906124f4565b80156108545780601f1061082957610100808354040283529160200191610854565b820191906000526020600020905b81548152906001019060200180831161083757829003601f168201915b5050505050905090565b6000610869826114b1565b610886576040516333d1c03960e21b815260040160405180910390fd5b506000908152600660205260409020546001600160a01b031690565b60006108ad82610df9565b9050806001600160a01b0316836001600160a01b031614156108e25760405163250fdee360e21b815260040160405180910390fd5b336001600160a01b038216148015906109025750610900813361070c565b155b15610920576040516367d9dca160e11b815260040160405180910390fd5b61092b8383836114dc565b505050565b6002600a54141561095c5760405162461bcd60e51b81526004016109539061252f565b60405180910390fd5b6002600a55600e54801580159061097257508042115b61098e5760405162461bcd60e51b815260040161095390612566565b84843233146109af5760405162461bcd60e51b81526004016109539061259f565b7f00000000000000000000000000000000000000000000000000000000000000006109e7836109e16001546000540390565b90611538565b1115610a055760405162461bcd60e51b8152600401610953906125da565b80610a13836109e133611544565b1115610a315760405162461bcd60e51b815260040161095390612616565b60008211610a515760405162461bcd60e51b815260040161095390612661565b86610a7c7f000000000000000000000000000000000000000000000000000000000000000082611572565b3414610a9a5760405162461bcd60e51b8152600401610953906126ac565b60003411610aba5760405162461bcd60e51b815260040161095390612661565b86338787600c54610b3c838380806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250506040516bffffffffffffffffffffffff1960608a901b166020820152603481018a905285925060540190505b6040516020818303038152906040528051906020012061157e565b610b585760405162461bcd60e51b8152600401610953906126e6565b610b62338e611594565b50506001600a555050505050505050505050565b61092b8383836115e5565b610b896117d3565b600c55565b610b966117d3565b6002600a541415610bb95760405162461bcd60e51b81526004016109539061252f565b6002600a55610bc78161182d565b506001600a55565b6002600a541415610bf25760405162461bcd60e51b81526004016109539061252f565b6002600a55600f548015801590610c0857508042115b610c245760405162461bcd60e51b815260040161095390612566565b817f0000000000000000000000000000000000000000000000000000000000000000323314610c655760405162461bcd60e51b81526004016109539061259f565b7f0000000000000000000000000000000000000000000000000000000000000000610c97836109e16001546000540390565b1115610cb55760405162461bcd60e51b8152600401610953906125da565b80610cc3836109e133611544565b1115610ce15760405162461bcd60e51b815260040161095390612616565b60008211610d015760405162461bcd60e51b815260040161095390612661565b83610d2c7f000000000000000000000000000000000000000000000000000000000000000082611572565b3414610d4a5760405162461bcd60e51b8152600401610953906126ac565b60003411610d6a5760405162461bcd60e51b815260040161095390612661565b610d743386611594565b50506001600a55505050565b61092b838383604051806020016040528060008152506111b8565b610da36117d3565b610de282828080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061196492505050565b5050565b610dee6117d3565b61092b838383611977565b6000610e0482611a3b565b5192915050565b6060601080546107db906124f4565b60006001600160a01b038216610e43576040516323d3ad8160e21b815260040160405180910390fd5b506001600160a01b03166000908152600560205260409020546001600160401b031690565b610e706117d3565b610e7a6000611b55565b565b6002600a541415610e9f5760405162461bcd60e51b81526004016109539061252f565b6002600a55600d548015801590610eb557508042115b610ed15760405162461bcd60e51b815260040161095390612566565b8380323314610ef25760405162461bcd60e51b81526004016109539061259f565b7f0000000000000000000000000000000000000000000000000000000000000000610f24836109e16001546000540390565b1115610f425760405162461bcd60e51b8152600401610953906125da565b80610f50836109e133611544565b1115610f6e5760405162461bcd60e51b815260040161095390612616565b60008211610f8e5760405162461bcd60e51b815260040161095390612661565b85338686600b54610ff9838380806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250506040516bffffffffffffffffffffffff1960608a901b166020820152603481018a90528592506054019050610b21565b6110155760405162461bcd60e51b8152600401610953906126e6565b61101f338c611594565b50506001600a55505050505050505050565b6060600380546107db906124f4565b6001600160a01b03821633141561106a5760405163b06307db60e01b815260040160405180910390fd5b3360008181526007602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b6110de6117d3565b6002600a5414156111015760405162461bcd60e51b81526004016109539061252f565b6002600a55604051600090339047908381818185875af1925050503d8060008114611148576040519150601f19603f3d011682016040523d82523d6000602084013e61114d565b606091505b5050905080610bc75760405162461bcd60e51b815260206004820152602660248201527f52686170736f647943726561746f722f696e76616c69642d77697468647261776044820152652d6d6f6e657960d01b6064820152608401610953565b60006107c682611544565b6111c38484846115e5565b6001600160a01b0383163b151580156111e557506111e384848484611ba7565b155b15611203576040516368d2bf6b60e11b815260040160405180910390fd5b50505050565b6112116117d3565b7f0000000000000000000000000000000000000000000000000000000000000000611243826109e16001546000540390565b11156112a25760405162461bcd60e51b815260206004820152602860248201527f52686170736f647943726561746f722f696e76616c69642d70726f6d6f74696f6044820152676e2d737570706c7960c01b6064820152608401610953565b7f00000000000000000000000000000000000000000000000000000000000000006112cd8282611c9f565b156113295760405162461bcd60e51b815260206004820152602660248201527f52686170736f647943726561746f722f696e76616c69642d62617463682d6d756044820152656c7469706c6560d01b6064820152608401610953565b60006113358383611cab565b905060005b8181101561135e5761134c3384611cb7565b8061135681612739565b91505061133a565b5060405183815233907f0ce3610e89a4bb9ec9359763f99110ed52a4abaea0b62028a1637e242ca2768b9060200160405180910390a2505050565b60606113a4826114b1565b6113c157604051630a14c4b560e41b815260040160405180910390fd5b60006113d860408051602081019091526000815290565b90508051600014156113f95760405180602001604052806000815250611424565b8061140384611cd1565b604051602001611414929190612754565b6040516020818303038152906040525b9392505050565b6114336117d3565b6001600160a01b0381166114985760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610953565b6114a181611b55565b50565b6114ac6117d3565b600b55565b60008054821080156107c6575050600090815260046020526040902054600160e01b900460ff161590565b60008281526006602052604080822080546001600160a01b0319166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b60006114248284612783565b6001600160a01b038116600090815260056020526040812054600160401b90046001600160401b03166107c6565b6000611424828461279b565b60008261158b8584611dce565b14949350505050565b61159e8282611cb7565b816001600160a01b03167f0ce3610e89a4bb9ec9359763f99110ed52a4abaea0b62028a1637e242ca2768b826040516115d991815260200190565b60405180910390a25050565b60006115f082611a3b565b9050836001600160a01b031681600001516001600160a01b0316146116275760405162a1148160e81b815260040160405180910390fd5b6000336001600160a01b03861614806116455750611645853361070c565b806116605750336116558461085e565b6001600160a01b0316145b90508061168057604051632ce44b5f60e11b815260040160405180910390fd5b6001600160a01b0384166116a757604051633a954ecd60e21b815260040160405180910390fd5b6116b3600084876114dc565b6001600160a01b038581166000908152600560209081526040808320805467ffffffffffffffff198082166001600160401b0392831660001901831617909255898616808652838620805493841693831660019081018416949094179055898652600490945282852080546001600160e01b031916909417600160a01b4290921691909102178355870180845292208054919390911661178757600054821461178757805460208601516001600160401b0316600160a01b026001600160e01b03199091166001600160a01b038a16171781555b50505082846001600160a01b0316866001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45b5050505050565b6009546001600160a01b03163314610e7a5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610953565b8061184b576040516356be441560e01b815260040160405180910390fd5b60005461186b5760405163c0367cab60e01b815260040160405180910390fd5b60085480611877575060005b6000548110611899576040516370e89b1b60e01b815260040160405180910390fd5b60005482820160001981019110156118b45750600054600019015b815b818111611959576000818152600460205260409020546001600160a01b03161580156118f85750600081815260046020526040902054600160e01b900460ff16155b1561195157600061190882611a3b565b80516000848152600460209081526040909120805491909301516001600160401b0316600160a01b026001600160e01b03199091166001600160a01b0390921691909117179055505b6001016118b6565b506001016008555050565b8051610de2906010906020840190612022565b8282116119d25760405162461bcd60e51b8152602060048201526024808201527f52686170736f647943726561746f722f696e76616c69642d70726573616c652d60448201526374696d6560e01b6064820152608401610953565b818111611a2d5760405162461bcd60e51b815260206004820152602360248201527f52686170736f647943726561746f722f696e76616c69642d7075626c69632d74604482015262696d6560e81b6064820152608401610953565b600d92909255600e55600f55565b604080516060810182526000808252602082018190529181019190915281600054811015611b3c57600081815260046020908152604091829020825160608101845290546001600160a01b0381168252600160a01b81046001600160401b031692820192909252600160e01b90910460ff16151591810182905290611b3a5780516001600160a01b031615611ad1579392505050565b5060001901600081815260046020908152604091829020825160608101845290546001600160a01b038116808352600160a01b82046001600160401b031693830193909352600160e01b900460ff1615159281019290925215611b35579392505050565b611ad1565b505b604051636f96cda160e11b815260040160405180910390fd5b600980546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b604051630a85bd0160e11b81526000906001600160a01b0385169063150b7a0290611bdc9033908990889088906004016127ba565b602060405180830381600087803b158015611bf657600080fd5b505af1925050508015611c26575060408051601f3d908101601f19168201909252611c23918101906127f7565b60015b611c81573d808015611c54576040519150601f19603f3d011682016040523d82523d6000602084013e611c59565b606091505b508051611c79576040516368d2bf6b60e11b815260040160405180910390fd5b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490505b949350505050565b6000611424828461282a565b6000611424828461283e565b610de2828260405180602001604052806000815250611e1b565b606081611cf55750506040805180820190915260018152600360fc1b602082015290565b8160005b8115611d1f5780611d0981612739565b9150611d189050600a8361283e565b9150611cf9565b6000816001600160401b03811115611d3957611d396123d0565b6040519080825280601f01601f191660200182016040528015611d63576020820181803683370190505b5090505b8415611c9757611d78600183612852565b9150611d85600a8661282a565b611d90906030612783565b60f81b818381518110611da557611da5612869565b60200101906001600160f81b031916908160001a905350611dc7600a8661283e565b9450611d67565b600081815b8451811015611e1357611dff82868381518110611df257611df2612869565b6020026020010151611e28565b915080611e0b81612739565b915050611dd3565b509392505050565b61092b8383836001611e57565b6000818310611e44576000828152602084905260409020611424565b6000838152602083905260409020611424565b6000546001600160a01b038516611e8057604051622e076360e81b815260040160405180910390fd5b83611e9e5760405163b562e8dd60e01b815260040160405180910390fd5b6001600160a01b038516600081815260056020908152604080832080546fffffffffffffffffffffffffffffffff1981166001600160401b038083168c018116918217600160401b67ffffffffffffffff1990941690921783900481168c01811690920217909155858452600490925290912080546001600160e01b031916909217600160a01b429092169190910217905580808501838015611f4a57506001600160a01b0387163b15155b15611fd3575b60405182906001600160a01b038916906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a4611f9b6000888480600101955088611ba7565b611fb8576040516368d2bf6b60e11b815260040160405180910390fd5b80821415611f50578260005414611fce57600080fd5b612019565b5b6040516001830192906001600160a01b038916906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a480821415611fd4575b506000556117cc565b82805461202e906124f4565b90600052602060002090601f0160209004810192826120505760008555612096565b82601f1061206957805160ff1916838001178555612096565b82800160010185558215612096579182015b8281111561209657825182559160200191906001019061207b565b506120a29291506120a6565b5090565b5b808211156120a257600081556001016120a7565b6001600160e01b0319811681146114a157600080fd5b6000602082840312156120e357600080fd5b8135611424816120bb565b60005b838110156121095781810151838201526020016120f1565b838111156112035750506000910152565b600081518084526121328160208601602086016120ee565b601f01601f19169290920160200192915050565b602081526000611424602083018461211a565b60006020828403121561216b57600080fd5b5035919050565b80356001600160a01b038116811461218957600080fd5b919050565b600080604083850312156121a157600080fd5b6121aa83612172565b946020939093013593505050565b60008083601f8401126121ca57600080fd5b5081356001600160401b038111156121e157600080fd5b6020830191508360208260051b85010111156121fc57600080fd5b9250929050565b6000806000806060858703121561221957600080fd5b843593506020850135925060408501356001600160401b0381111561223d57600080fd5b612249878288016121b8565b95989497509550505050565b60008060006060848603121561226a57600080fd5b61227384612172565b925061228160208501612172565b9150604084013590509250925092565b600080602083850312156122a457600080fd5b82356001600160401b03808211156122bb57600080fd5b818501915085601f8301126122cf57600080fd5b8135818111156122de57600080fd5b8660208285010111156122f057600080fd5b60209290920196919550909350505050565b60008060006060848603121561231757600080fd5b505081359360208301359350604090920135919050565b60006020828403121561234057600080fd5b61142482612172565b60008060006040848603121561235e57600080fd5b8335925060208401356001600160401b0381111561237b57600080fd5b612387868287016121b8565b9497909650939450505050565b600080604083850312156123a757600080fd5b6123b083612172565b9150602083013580151581146123c557600080fd5b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b600080600080608085870312156123fc57600080fd5b61240585612172565b935061241360208601612172565b92506040850135915060608501356001600160401b038082111561243657600080fd5b818701915087601f83011261244a57600080fd5b81358181111561245c5761245c6123d0565b604051601f8201601f19908116603f01168101908382118183101715612484576124846123d0565b816040528281528a602084870101111561249d57600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b600080604083850312156124d457600080fd5b6124dd83612172565b91506124eb60208401612172565b90509250929050565b600181811c9082168061250857607f821691505b6020821081141561252957634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6020808252602b9082015260008051602061288083398151915260408201526a642d6d696e742d74696d6560a81b606082015260800190565b6020808252602d9082015260008051602061288083398151915260408201526c3216b6b4b73a16b1b0b63632b960991b606082015260800190565b6020808252602e9082015260008051602061288083398151915260408201526d642d746f74616c2d737570706c7960901b606082015260800190565b6020808252603b9082015260008051602061288083398151915260408201527f642d696e766f636174696f6e2d75707065722d626f756e646172790000000000606082015260800190565b6020808252603b9082015260008051602061288083398151915260408201527f642d696e766f636174696f6e2d6c6f7765722d626f756e646172790000000000606082015260800190565b6020808252602c9082015260008051602061288083398151915260408201526b642d6d696e742d76616c756560a01b606082015260800190565b6020808252602f9082015260008051602061288083398151915260408201526e3216b0b2323932b9b996b83937b7b360891b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b600060001982141561274d5761274d612723565b5060010190565b600083516127668184602088016120ee565b83519083019061277a8183602088016120ee565b01949350505050565b6000821982111561279657612796612723565b500190565b60008160001904831182151516156127b5576127b5612723565b500290565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906127ed9083018461211a565b9695505050505050565b60006020828403121561280957600080fd5b8151611424816120bb565b634e487b7160e01b600052601260045260246000fd5b60008261283957612839612814565b500690565b60008261284d5761284d612814565b500490565b60008282101561286457612864612723565b500390565b634e487b7160e01b600052603260045260246000fdfe52686170736f647943726561746f7247656e657261746976652f696e76616c69a26469706673582212200f07c831043bf3a60c5e55c6041379c3836c26d148cdd34bc0b179ef4e17460364736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "claimMint(uint256,bytes32[])": {
        "details": "user must mint max invocations",
        "params": {
          "invocations": "number of tokens to mint",
          "proof": "merkle proof to prove address and token mint count are in tree"
        }
      },
      "constructor": {
        "params": {
          "_amountForPromotion": "promotional nfts count",
          "_collectionSize": "the total size of the collection",
          "_maxPublicBatchPerAddress": "max mintable tokens in public sale",
          "_mintPrice": "mint price of each nft"
        }
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "presaleMint(uint256,uint256,bytes32[])": {
        "params": {
          "invocations": "number of tokens to mint",
          "maxInvocation": "max number of invocations of the user",
          "proof": "merkle proof to prove address and token mint count are in tree"
        }
      },
      "promotionMint(uint256)": {
        "params": {
          "invocations": "the number of invocations to batch mint"
        }
      },
      "publicMint(uint256)": {
        "details": "user can only mint less than maxPublicBatchPerAddress of tokens",
        "params": {
          "invocations": "number of tokens to mint"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "setClaimMerkleRoot(bytes32)": {
        "params": {
          "_claimMerkleRoot": "root of the merklelized claimlist"
        }
      },
      "setMintTime(uint256,uint256,uint256)": {
        "details": "this function can serve as an \"active\" and \"non-active\" sale statusset the values to uint256(-1) for \"non-active\" sale statusalso, pass contract ownership to address(0) to close sale forever",
        "params": {
          "_presaleTime": "time the presale starts",
          "_publicTime": "time the public sale starts"
        }
      },
      "setOwnersExplicit(uint256)": {
        "details": "eliminate loops in future calls of ownerOf()"
      },
      "setPresaleMerkleRoot(bytes32)": {
        "params": {
          "_presaleMerkleRoot": "root of the merklelized whitelist"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "totalSupply()": {
        "details": "Burned tokens are calculated here, use _totalMinted() if you want to count just minted tokens."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "stateVariables": {
      "version": {
        "details": "Semantic versioning for this contract"
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "Created(address,uint256)": {
        "notice": "============ Events ============"
      }
    },
    "kind": "user",
    "methods": {
      "amountForPromotion()": {
        "notice": "promotional nfts count"
      },
      "baseURI()": {
        "notice": "core metadata baseURI used for tokens metadata"
      },
      "claimMerkleRoot()": {
        "notice": "ERC721-presale inclusion root"
      },
      "claimMint(uint256,bytes32[])": {
        "notice": "Allows claim of tokens if address is part of merkle tree"
      },
      "claimTime()": {
        "notice": "time the claim starts"
      },
      "collectionSize()": {
        "notice": "total number of tokens in the collection"
      },
      "constructor": {
        "notice": "Creates a new Creator contract"
      },
      "maxPublicBatchPerAddress()": {
        "notice": "max mintable tokens for each address in public"
      },
      "mintOf(address)": {
        "notice": "returns the number of mints of an address"
      },
      "mintPrice()": {
        "notice": "mint price of each nft; same for pre/public sale."
      },
      "presaleMerkleRoot()": {
        "notice": "ERC721-presale inclusion root"
      },
      "presaleMint(uint256,uint256,bytes32[])": {
        "notice": "Allows presale minting of tokens if address is part of merkle tree"
      },
      "presaleTime()": {
        "notice": "time the presale starts;"
      },
      "promotionMint(uint256)": {
        "notice": "used by owner to mint promotional nfts"
      },
      "publicMint(uint256)": {
        "notice": "Allows public minting of tokens"
      },
      "publicTime()": {
        "notice": "time the public starts;"
      },
      "setBaseURI(string)": {
        "notice": "set the new baseURI to change the tokens metadata"
      },
      "setClaimMerkleRoot(bytes32)": {
        "notice": "force override the merkle root used in presale mint"
      },
      "setMintTime(uint256,uint256,uint256)": {
        "notice": "Set the time for the mint"
      },
      "setOwnersExplicit(uint256)": {
        "notice": "sets the owners quantity explicity"
      },
      "setPresaleMerkleRoot(bytes32)": {
        "notice": "force override the merkle root used in presale mint"
      },
      "version()": {
        "notice": "============ Semantic Versioning ============"
      },
      "withdrawMoney()": {
        "notice": "withdraws the ether in the contract to owner"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5167,
        "contract": "contracts/RhapsodyCreatorBasic.sol:RhapsodyCreatorBasic",
        "label": "_currentIndex",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 5169,
        "contract": "contracts/RhapsodyCreatorBasic.sol:RhapsodyCreatorBasic",
        "label": "_burnCounter",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 5171,
        "contract": "contracts/RhapsodyCreatorBasic.sol:RhapsodyCreatorBasic",
        "label": "_name",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 5173,
        "contract": "contracts/RhapsodyCreatorBasic.sol:RhapsodyCreatorBasic",
        "label": "_symbol",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 5178,
        "contract": "contracts/RhapsodyCreatorBasic.sol:RhapsodyCreatorBasic",
        "label": "_ownerships",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_struct(TokenOwnership)5156_storage)"
      },
      {
        "astId": 5183,
        "contract": "contracts/RhapsodyCreatorBasic.sol:RhapsodyCreatorBasic",
        "label": "_addressData",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_struct(AddressData)5165_storage)"
      },
      {
        "astId": 5187,
        "contract": "contracts/RhapsodyCreatorBasic.sol:RhapsodyCreatorBasic",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 5193,
        "contract": "contracts/RhapsodyCreatorBasic.sol:RhapsodyCreatorBasic",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 6433,
        "contract": "contracts/RhapsodyCreatorBasic.sol:RhapsodyCreatorBasic",
        "label": "nextOwnerToExplicitlySet",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 7,
        "contract": "contracts/RhapsodyCreatorBasic.sol:RhapsodyCreatorBasic",
        "label": "_owner",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 123,
        "contract": "contracts/RhapsodyCreatorBasic.sol:RhapsodyCreatorBasic",
        "label": "_status",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 2619,
        "contract": "contracts/RhapsodyCreatorBasic.sol:RhapsodyCreatorBasic",
        "label": "claimMerkleRoot",
        "offset": 0,
        "slot": "11",
        "type": "t_bytes32"
      },
      {
        "astId": 2622,
        "contract": "contracts/RhapsodyCreatorBasic.sol:RhapsodyCreatorBasic",
        "label": "presaleMerkleRoot",
        "offset": 0,
        "slot": "12",
        "type": "t_bytes32"
      },
      {
        "astId": 2625,
        "contract": "contracts/RhapsodyCreatorBasic.sol:RhapsodyCreatorBasic",
        "label": "claimTime",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 2628,
        "contract": "contracts/RhapsodyCreatorBasic.sol:RhapsodyCreatorBasic",
        "label": "presaleTime",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 2631,
        "contract": "contracts/RhapsodyCreatorBasic.sol:RhapsodyCreatorBasic",
        "label": "publicTime",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 2633,
        "contract": "contracts/RhapsodyCreatorBasic.sol:RhapsodyCreatorBasic",
        "label": "_baseTokenURI",
        "offset": 0,
        "slot": "16",
        "type": "t_string_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_struct(AddressData)5165_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ERC721A.AddressData)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressData)5165_storage"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(TokenOwnership)5156_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ERC721A.TokenOwnership)",
        "numberOfBytes": "32",
        "value": "t_struct(TokenOwnership)5156_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AddressData)5165_storage": {
        "encoding": "inplace",
        "label": "struct ERC721A.AddressData",
        "members": [
          {
            "astId": 5158,
            "contract": "contracts/RhapsodyCreatorBasic.sol:RhapsodyCreatorBasic",
            "label": "balance",
            "offset": 0,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 5160,
            "contract": "contracts/RhapsodyCreatorBasic.sol:RhapsodyCreatorBasic",
            "label": "numberMinted",
            "offset": 8,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 5162,
            "contract": "contracts/RhapsodyCreatorBasic.sol:RhapsodyCreatorBasic",
            "label": "numberBurned",
            "offset": 16,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 5164,
            "contract": "contracts/RhapsodyCreatorBasic.sol:RhapsodyCreatorBasic",
            "label": "aux",
            "offset": 24,
            "slot": "0",
            "type": "t_uint64"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(TokenOwnership)5156_storage": {
        "encoding": "inplace",
        "label": "struct ERC721A.TokenOwnership",
        "members": [
          {
            "astId": 5151,
            "contract": "contracts/RhapsodyCreatorBasic.sol:RhapsodyCreatorBasic",
            "label": "addr",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 5153,
            "contract": "contracts/RhapsodyCreatorBasic.sol:RhapsodyCreatorBasic",
            "label": "startTimestamp",
            "offset": 20,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 5155,
            "contract": "contracts/RhapsodyCreatorBasic.sol:RhapsodyCreatorBasic",
            "label": "burned",
            "offset": 28,
            "slot": "0",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}